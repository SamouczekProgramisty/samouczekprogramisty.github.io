<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://www.samouczekprogramisty.pl/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.samouczekprogramisty.pl/" rel="alternate" type="text/html" /><updated>2022-09-29T07:24:44+02:00</updated><id>https://www.samouczekprogramisty.pl/feed.xml</id><title type="html">Samouczek Programisty</title><subtitle>Cześć! Jestem Marcin :) Pracuję jako programista od 2007 roku. Na blogu chcę podzielić się z Tobą moją pasją do programowania.</subtitle><author><name>Marcin Pietraszek</name></author><entry><title type="html">Pogodynka w chmurze</title><link href="https://www.samouczekprogramisty.pl/pogodynka-w-chmurze/" rel="alternate" type="text/html" title="Pogodynka w chmurze" /><published>2021-05-23T00:00:00+02:00</published><updated>2021-05-27T06:33:14+02:00</updated><id>https://www.samouczekprogramisty.pl/pogodynka-w-chmurze</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/pogodynka-w-chmurze/"><![CDATA[<div class="notice--info">
    
<p>Ten artykuł pokazuje kolejną odsłonę projektu Pogodynka. Jeśli jesteś zainteresowany starszą wersją odsyłam Cię do serii poprzednich artykułów:</p>

<ul>
  <li><a href="/projekt-pogodynka-wprowadzenie/">Projekt Pogodynka – wprowadzenie</a></li>
  <li><a href="/pogodynka-naiwny-termometr/">Projekt Pogodynka – naiwny termometr</a></li>
  <li><a href="/pogodynka-dzialajacy-termometr/">Projekt Pogodynka – działający termometr</a></li>
  <li><a href="/pogodynka-szkielet-aplikacji-webowej/">Projekt Pogodynka – szkielet aplikacji webowej</a></li>
  <li><a href="/pogodynka-json-i-walidacja/">Projekt Pogodynka – JSON i walidacja</a></li>
  <li><a href="/pogodynka-jpa-i-spring-data/">Projekt Pogodynka – JPA i Spring Data</a></li>
  <li><a href="/pogodynka-konfiguracja-serwera/">Projekt Pogodynka – konfiguracja serwera</a></li>
  <li><a href="/pogodynka-konfiguracja-bazy-danych/">Projekt Pogodynka – konfiguracja bazy danych</a></li>
  <li><a href="/pogodynka-szkic-interfejsu-uzytkownika/">Projekt Pogodynka – szkic interfejsu użytkownika</a></li>
  <li><a href="/pogodynka-integracja/">Projekt Pogodynka – integracja</a></li>
  <li><a href="/pogodynka-podsumowanie/">Projekt Pogodynka – podsumowanie</a></li>
</ul>

</div>

<h2 id="nowe-podejście">Nowe podejście</h2>

<h3 id="hardware">Hardware</h3>

<p>Starsza wersja pogodynki zawierała więcej komponentów, nad którymi pracowałem samodzielnie. Wówczas postawiłem na serwer współdzielony, na którym zainstalowałem niezbędne elementy takie jak silnik bazy danych czy serwer HTTP. Stary diagram wygląda tak:</p>

<figure class="">
  <img src="/assets/images/2021/0523-pogodynka-w-chmurze/diagram_pogodynka_1.jpg" alt="" /><figcaption>
      Diagram aplikacji Pogodynka 1.0

    </figcaption></figure>

<p>Takie podejście ma swoje wady i zalety. Niestety w skali tak małego projektu doświadczałem głównie wad:</p>

<ul>
  <li>byłem odpowiedzialny za utrzymanie wszystkich komponentów,</li>
  <li>koszt serwera był relatywnie wysoki,</li>
  <li>zdarzały się przerwy w dostępności Pogodynki.</li>
</ul>

<p>Biorąc te elementy pod uwagę postanowiłem zmienić podejście. Tym razem jedynym sprzętem za który jestem odpowiedzialny jest Rasberry Pi z zestawem czujników. Reszta to płatne usługi. Mimo tego, że usługi te są płatne, finalnie koszt będzie dużo niższy. Dokładny opis szacowania kosztów znajdziesz w jednym z punktów poniżej.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="software">Software</h3>

<p>Kolejnym elementem, który zmieniłem jest stos technologiczny. Stara wersja Pogodynki używała głównie języka Java. Do tego przygotowałem prosty interfejs użytkownika przy pomocy HTML, CSS i JavaScript. Do zarządzania infrastrukturą użyłem Puppet’a.</p>

<p>Nowe podejście jest mocno uproszczone. Użyłem języka Python. Do zarządzania zasobami w chmurze posłużyłem się Terraform’em.</p>

<h2 id="nowa-pogodynka">Nowa pogodynka</h2>

<h3 id="czujnik-pyłu-zawieszonego-sds011">Czujnik pyłu zawieszonego SDS011</h3>

<p>Przebudowując Pogodynkę rozszerzyłem ją o dodatkowy czujnik. Teraz Pogodynka może także mierzyć ilość pyłu zawieszonego o średnicy 2.5μm i 10μm. Podstawowa wersja kodu, którą napisałem sprawia, że czujnik działa bez przerwy. Pogodynka 2.1 mogłaby włączać czujnik na żądanie wydłużając żywotność lasera.</p>

<h3 id="python-vs-java">Python vs Java</h3>

<p>Co tu dużo mówić, większą frajdę sprawia mi pisanie kodu w Python’ie. Między innymi z tego powodu zdecydowałem, że Pogodynka 2.0 używa tego języka programowania. Proszę spójrz na przykład poniżej:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SDS011</span><span class="p">:</span>

    <span class="n">DATA_PACKET_SIZE</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">HEADER</span> <span class="o">=</span> <span class="mh">0xAA</span>
    <span class="n">TAIL</span> <span class="o">=</span> <span class="mh">0xAB</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">port</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>

    <span class="k">def</span> <span class="nf">poke_25</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">],</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span>

    <span class="k">def</span> <span class="nf">poke_10</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">],</span> <span class="n">byteorder</span><span class="o">=</span><span class="s">"little"</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span>

    <span class="k">def</span> <span class="nf">read_bytes</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">port</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">DATA_PACKET_SIZE</span><span class="p">)</span>

        <span class="k">assert</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">HEADER</span>
        <span class="k">assert</span> <span class="n">data</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">TAIL</span>

        <span class="k">return</span> <span class="n">data</span>
</code></pre></div></div>

<p>Te 24 linijek kodu to wszystko, co jest potrzebne do obsługi czujnika <a href="https://aqicn.org/sensor/sds011/">SDS011</a> (dla czytelności pominąłem dokumentację i komentarze). Aż boję się pomyśleć ile musiałbym się nadziubać, żeby zaimplementować to w Javie :). Testy jednostkowe dla kodu są równie zwięzłe:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">pytest</span><span class="p">.</span><span class="n">fixture</span>
<span class="k">def</span> <span class="nf">port_mock</span><span class="p">():</span>
    <span class="n">port_mock</span> <span class="o">=</span> <span class="n">mock</span><span class="p">.</span><span class="n">MagicMock</span><span class="p">()</span>
    <span class="n">port_mock</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\xaa\xc0\x1c\x00</span><span class="s">1</span><span class="se">\x00\x0b\x14</span><span class="s">1</span><span class="se">\xab</span><span class="s">"</span>

    <span class="k">return</span> <span class="n">port_mock</span>


<span class="k">def</span> <span class="nf">test_pm25</span><span class="p">(</span><span class="n">port_mock</span><span class="p">):</span>
    <span class="n">pm_sensor</span> <span class="o">=</span> <span class="n">sds011</span><span class="p">.</span><span class="n">SDS011</span><span class="p">(</span><span class="n">port_mock</span><span class="p">)</span>

    <span class="k">assert</span> <span class="n">pm_sensor</span><span class="p">.</span><span class="n">poke_25</span><span class="p">()</span> <span class="o">==</span> <span class="n">pytest</span><span class="p">.</span><span class="n">approx</span><span class="p">(</span><span class="mf">2.8</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">test_pm10</span><span class="p">(</span><span class="n">port_mock</span><span class="p">):</span>
    <span class="n">pm_sensor</span> <span class="o">=</span> <span class="n">sds011</span><span class="p">.</span><span class="n">SDS011</span><span class="p">(</span><span class="n">port_mock</span><span class="p">)</span>

    <span class="k">assert</span> <span class="n">pm_sensor</span><span class="p">.</span><span class="n">poke_10</span><span class="p">()</span> <span class="o">==</span> <span class="n">pytest</span><span class="p">.</span><span class="n">approx</span><span class="p">(</span><span class="mf">4.9</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="google-cloud-platform">Google Cloud Platform</h3>

<p>Przeniosłem Pogodynkę do chmury :). Postawiłem na Google BigQuery jako bazę danych, w której przechowuję wyniki pomiarów. Przesiadka na BigQuery pozwoliła mi zwiększyć częstotliwość pomiarów bez przejmowania się potencjalnymi problemami z wydajnością bazy danych. Pogodynka 2.0 wysyła wskazania czujników co minutę.</p>

<p>Za strumieniowe przesyłanie danych do chmury odpowiedzialny jest poniższy fragment kodu:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">stream_to_gbq</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">scoped_table</span><span class="p">,</span> <span class="n">measurements</span><span class="p">):</span>
    <span class="n">rows_to_insert</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">measurement</span> <span class="ow">in</span> <span class="n">measurements</span><span class="p">:</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">"time"</span><span class="p">:</span> <span class="n">measurement</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">GBQ_TIMESTAMP_FORMAT</span><span class="p">),</span>
            <span class="s">"pm25"</span><span class="p">:</span> <span class="n">measurement</span><span class="p">.</span><span class="n">pm25</span><span class="p">,</span>
            <span class="s">"pm10"</span><span class="p">:</span> <span class="n">measurement</span><span class="p">.</span><span class="n">pm10</span><span class="p">,</span>
            <span class="s">"temperature"</span><span class="p">:</span> <span class="n">measurement</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">rows_to_insert</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">insert_rows_json</span><span class="p">(</span><span class="n">scoped_table</span><span class="p">,</span> <span class="n">rows_to_insert</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">BadRequest</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">StoreError</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">errors</span> <span class="o">!=</span> <span class="p">[]:</span>
        <span class="k">raise</span> <span class="n">StoreError</span><span class="p">(</span><span class="n">errors</span><span class="p">)</span>
</code></pre></div></div>

<p>Zrezygnowałem też z własnego narzędzia do wizualizacji na rzecz Google DataStudio. Przykładowy raport wygenerowany na podstawie danych zebranych przez Pogodynkę 2.0 możesz zobaczyć poniżej:</p>

<figure class="">
  <img src="/assets/images/2021/0523-pogodynka-w-chmurze/data_studio_wizualizacja.jpg" alt="" /><figcaption>
      Pogodynka 2.0 w DataStudio

    </figcaption></figure>

<p>Starałem się maksymalnie ograniczyć liczbę komponentów żeby niepotrzebnie nie komplikować rozwiązania.</p>

<h4 id="terraform">Terraform</h4>

<p>W związku z przesiadką na chmurę odstawiłem w kąt Puppet’a. Tym razem użyłem Terraform’a do zarządzania wszystkimi zasobami w chmurze. Przechowywanie definicji infrastruktury jako kod ma wiele zalet. Jedną z nich jest możliwość wglądu w historię zmian. Konfiguracja w przypadku Pogodynki 2.0 nie jest skomplikowana. Możesz ją przejrzeć w <a href="https://github.com/SamouczekProgramisty/pogodynka_gcp_resources">publicznym repozytorium</a>.</p>

<h3 id="funkcjonalność-cache">Funkcjonalność cache</h3>

<p>Przy Pogodynce 1.0 zauważyłem, że elementem, który był najbardziej zawodny był dostęp do internetu w miejscu gdzie działała Pogodynka. Skutkowało to utratą wyników pomiarów wykonanych w czasie, kiedy nie było dostępu do internetu.</p>

<p>Tym razem postanowiłem to zmienić wprowadzając lokalny cache. W przypadku braku dostępu do internetu
 Pogodynka 2.0 zapisuje wyniki pomiarów lokalnie. Raz jeszcze dzięki Python’owi cały kod jest niesłychanie zwięzły:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Cache</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cache_path</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">cache_path</span> <span class="o">=</span> <span class="n">cache_path</span>

    <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">cache_path</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">[]</span>

        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">cache_path</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">cache_file</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">pickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">cache_file</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">measurements</span><span class="p">):</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">cache_path</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">cache_file</span><span class="p">:</span>
            <span class="n">pickle</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">measurements</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">clear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dump</span><span class="p">([])</span>
</code></pre></div></div>

<p>Połączenie klas wspomnianych wyżej możesz zobaczyć poniżej:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pm_port</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">Serial</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">pm_sensor_device</span><span class="p">)</span>
<span class="n">pm_sensor</span> <span class="o">=</span> <span class="n">sds011</span><span class="p">.</span><span class="n">SDS011</span><span class="p">(</span><span class="n">pm_port</span><span class="p">)</span>
<span class="n">temperature_sensor</span> <span class="o">=</span> <span class="n">ds18b20</span><span class="p">.</span><span class="n">DS18B20</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">temperature_sensor_path</span><span class="p">)</span>

<span class="n">cache</span> <span class="o">=</span> <span class="n">store</span><span class="p">.</span><span class="n">Cache</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">cache_path</span><span class="p">)</span>

<span class="n">measurements</span> <span class="o">=</span> <span class="n">cache</span><span class="p">.</span><span class="n">load</span><span class="p">()</span>
<span class="n">measurements</span><span class="p">.</span><span class="n">append</span><span class="p">(</span>
    <span class="n">sensor</span><span class="p">.</span><span class="n">Measurement</span><span class="p">(</span>
        <span class="n">time</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">utcnow</span><span class="p">(),</span>
        <span class="n">pm25</span><span class="o">=</span><span class="n">pm_sensor</span><span class="p">.</span><span class="n">poke_25</span><span class="p">(),</span>
        <span class="n">pm10</span><span class="o">=</span><span class="n">pm_sensor</span><span class="p">.</span><span class="n">poke_10</span><span class="p">(),</span>
        <span class="n">temperature</span><span class="o">=</span><span class="n">temperature_sensor</span><span class="p">.</span><span class="n">poke</span><span class="p">(),</span>
    <span class="p">),</span>
<span class="p">)</span>

<span class="n">gbq_client</span> <span class="o">=</span> <span class="n">bigquery</span><span class="p">.</span><span class="n">Client</span><span class="p">()</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">store</span><span class="p">.</span><span class="n">stream_to_gbq</span><span class="p">(</span><span class="n">gbq_client</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">destination_table</span><span class="p">,</span> <span class="n">measurements</span><span class="p">)</span>
    <span class="n">cache</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
<span class="k">except</span> <span class="n">store</span><span class="p">.</span><span class="n">StoreError</span><span class="p">:</span>
    <span class="n">cache</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">measurements</span><span class="p">)</span>
    <span class="k">raise</span>
</code></pre></div></div>

<p>Na początku tworzę instancje klas obsługujących czujniki. Kolejna linijka to utworzenie instancji klasy obsługującej lokalny cache. Następne linijki to utworzenie listy pomiarów do wysłania.</p>

<p>W końcu wysyłam pomiary do tabeli w Google BigQuery.</p>

<h3 id="przygotowanie-karty-sd">Przygotowanie karty SD</h3>

<p>System, które używałem w przypadku Pogodynki 1.0 ma już swoje lata. Zdecydowałem się zaktualizować go do najnowszej wersji. Ze <a href="https://www.raspberrypi.org/software/operating-systems/">strony Rasberry Pi</a> pobrałem najnowszą wersję systemu Raspberry Pi OS Lite. Obraz skopiowałem na kartę microSD zgodnie z <a href="https://www.raspberrypi.org/documentation/installation/installing-images/linux.md">instrukcją ze strony Raspberry Pi</a>.</p>

<p>Po uruchomieniu malinki zaktualizowałem zainstalowane oprogramowanie i dodałem kilka dodatkowych narzędzi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update 
apt-get upgrade 
apt-get install python3-pip python3-venv git vim tree
</code></pre></div></div>

<p>Kod odpowiedzialny za Pogodynkę uruchamiany jest w kontekście dedykowanego użytkownika:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>useradd pogodynka
usermod --append --groups dialout pogodynka
</code></pre></div></div>

<p>Ostatnia komenda dodaje użytkownika <code class="language-plaintext highlighter-rouge">pogodynka</code> do grupy <code class="language-plaintext highlighter-rouge">dialout</code>. Jest to potrzebne, aby mieć  bezpośredni dostęp do odczytu danych z portu USB.</p>

<p>Wszystkie te operacje wykonałem podłączając klawiaturę bezpośrednio do malinki. Dla wygody włączyłem demona ssh, dzięki czemu pozostałe operacje mogę wykonać zdalnie:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch /boot/ssh
</code></pre></div></div>

<h3 id="moduły-jądra-linuxa">Moduły jądra Linux’a</h3>

<p>Żeby termometr działał poprawnie wymagana jest drobna modyfikacja konfiguracji malinki:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo dtoverlay=w1-gpio &gt;&gt; /boot/config.txt

reboot

modprobe w1-gpio
modprobe w1-therm
</code></pre></div></div>

<h2 id="stara-architektura-a-chmura">Stara architektura a chmura</h2>

<h3 id="porównanie-kosztów">Porównanie kosztów</h3>

<p>Pogodynka 1.0 używała serwera współdzielonego. Korzystałem z usług jednej z polskich firm hostingowych. Koszt utrzymania serwera wynosił około 10zł miesięcznie. Pogodynka 2.0 to zupełnie inna para kaloszy. Szacowanie kosztów usług chmurowych jest dużo bardziej złożone. W przypadku usług, z których korzystam składniki ceny są następujące:</p>

<ul>
  <li>przechowywanie danych w bazie danych – kosztuje $0,02 za 1GB przechowywanych danych<sup id="fnref:uproszczenie" role="doc-noteref"><a href="#fn:uproszczenie" class="footnote" rel="footnote">1</a></sup>,</li>
  <li>strumieniowe ładowanie danych do bazy – kosztuje $0,01 za 200MB, ładowany wiersz to minimum 1KB,</li>
  <li>pobieranie danych z bazy danych – kosztuje $5 za każdy odczytany 1TB.</li>
</ul>

<h4 id="koszt-przechowywania-danych">Koszt przechowywania danych</h4>

<p>Spróbuję oszacować wielkość bazy danych po roku:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>60 (odczytów na godzinę) * 24 (godziny) * 365 (dni) = 525'600 (odczytów rocznie)
</code></pre></div></div>

<p>Każdy odczyt to jeden wiersz. Tabela przechowująca pomiary składa się z czterech kolumn:</p>

<ul>
  <li>daty typu <code class="language-plaintext highlighter-rouge">DATETIME</code></li>
  <li>odczytu temperatury typu <code class="language-plaintext highlighter-rouge">FLOAT</code></li>
  <li>odczytu PM2.5 typu <code class="language-plaintext highlighter-rouge">FLOAT</code></li>
  <li>odczytu PM10 typu <code class="language-plaintext highlighter-rouge">FLOAT</code></li>
</ul>

<p>Każda z tych kolumn to 8B, więc jeden wiersz to 8B * 4 = 32B. Zatem 525’600 odczytów rocznie to w sumie 17MB (16’819’200B). Zatem przechowywanie całego roku danych kosztuje aż $0,00034. A… zapomniałem dodać, że pierwsze 10GB jest darmowe. Innymi słowy przy takiej skali danych nie muszę się przejmować opłatami za przechowywanie danych.</p>

<h4 id="koszt-ładowania-danych">Koszt ładowania danych</h4>

<p>Zdecydowałem się na ładowanie strumieniowe żeby mieć natychmiastowy dostęp do danych. Strumieniowe ładowanie danych jest płatne. W ciągu miesiąca Pogodynka 2.0 doda do bazy następującą liczbę wierszy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>60 (odczytów na godzinę) * 24 (godziny) * 30 (dni) = 43'200 (odczytów miesięcznie)
</code></pre></div></div>

<p>Żądanie dodania danych do bazy ma minimum 1KB (w przypadku Pogodynki 2.0 jest dużo mniejsze, jednak takie jest ograniczenie narzucone przez Google BigQuery). Zatem w ciągu miesiąca strumieniowo zostanie przesłanych 43,2MB danych. Podsumowując, miesięczny koszt strumieniowego ładowania danych to $0,0002. Myślę, że mogę żyć z takim zobowiązaniem ;).</p>

<h4 id="koszt-pobierania-danych-z-bazy">Koszt pobierania danych z bazy</h4>

<p>Nie planuję odczytywać danych samodzielnie. Dane będą odczytywane przez raport, który utworzyłem w DataStudio. Dla uproszczenia pomijam tu kwestię przechowania wyników w cache’u, która obniży finalny koszt.</p>

<p>Załóżmy, że pogodynka będzie działała przez 1000 lat ;). W trakcie tak długiego czasu w bazie uzbiera się 17GB. Jednorazowy odczyt tysiącletniej historii pomiarów czujników Pogodynki 2.0 kosztowałby $0,09. A… znów zapomniałem o tym, że pierwszy 1TB w miesiącu jest darmowy. Po raz kolejny przy takiej skali danych nie muszę się przejmować opłatami za odczyt danych z bazy.</p>

<h4 id="finalne-porównanie">Finalne porównanie</h4>

<p>W tym konkretnym przypadku chmura jest praktycznie darmowa. Pamiętaj jednak, że podobną analizę kosztów warto zrobić dla konkretnego przypadku – koszty rozwiązań chmurowych potrafią zaskoczyć, jeśli projektowane rozwiązania nie są efektywne.</p>

<p>Dla przykładu, w pierwotnej wersji Pogodynki 2.0 każdy czujnik zapisywał pomiar w osobnym wierszu. Sprowadzał się do do trzy razy większej liczby wierszy – trzy razy wyższym koszcie za strumieniowe przesyłanie danych. W skali Pogodynki $0,0002 czy $0,0006 nie robi większej różnicy, jednak w produkcyjnych systemach operujących na dużych zbiorach danych takie szczegóły mogą być bardzo istotne.</p>

<h3 id="infrastruktura-jako-kod">Infrastruktura jako kod</h3>

<p>Pracując z projektami opartymi o chmurę miałem do czynienia z różnym podejściem do zarządzania zasobami w chmurze. W części z projektów zasoby były tworzone ręcznie. Całość konfiguracji odbywała się ręcznie przez interfejs dostarczony przez dostawcę chmury.</p>

<p>Na dłuższą metę takie podejście jest uciążliwe. Używanie narzędzi pokroju Terraform znacząco ułatwia pracę w projekcie opartym o chmurę.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Pogodynka 2.0 już działa. Zachęcam Cię do samodzielnego wykonania takiego projektu. Koszt jaki będziesz musiał ponieść jest znikomy w porównaniu do wiedzy, którą możesz zdobyć. Jedynym znaczącym kosztem jest cena samej malinki (aktualnie około 180zł) i czujnika SDS011 (aktualnie około 70zł).</p>

<p>Kod źródłowy Pogodynki 2.0 dostępny jest na <a href="https://github.com/SamouczekProgramisty/pogodynka2">Samouczkowym Githubie</a>.</p>

<p>Mam nadzieję, że artykuł był dla Ciebie pomocny. Proszę podziel się nim ze swoimi znajomymi. Dzięki temu pozwolisz mi dotrzeć do nowych Czytelników, za co z góry dziękuję. Jeśli nie chcesz pominąć kolejnych artykułów dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">Samouczka Programisty na Facebooku</a>.</p>

<p>Do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:uproszczenie" role="doc-endnote">
      <p>Dla uproszczenia obliczeń pomijam tutaj tak zwane „long-term storage”, dane starsze niż 90 dni kosztują $0,01 za 1GB <a href="#fnref:uproszczenie" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Projekty" /><category term="Pogodynka" /><summary type="html"><![CDATA[Projektu Pogodynka ciąg dalszy. Wywracam projekt do góry nogami wprowadzając nowy język programowania, nową architekturę i nowy czujnik. Pogodynka 2.0 to Python + Terraform. Pogodynka ląduje w chmurze Google'a. Nowa Pogodynka poza temperaturą mierzy także stężenie pyłów PM2.5 i PM10 w powietrzu. W artykule przeczytasz też o porównaniu kosztów rozwiązania na serwerze dedykowanych i w chmurze.]]></summary></entry><entry><title type="html">Funkcje analityczne w SQL</title><link href="https://www.samouczekprogramisty.pl/funkcje-analityczne-w-sql/" rel="alternate" type="text/html" title="Funkcje analityczne w SQL" /><published>2021-05-04T00:00:00+02:00</published><updated>2021-05-04T20:30:19+02:00</updated><id>https://www.samouczekprogramisty.pl/funkcje-analityczne-w-sql</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/funkcje-analityczne-w-sql/"><![CDATA[<div class="notice--info">
  
<p>To jest jeden z artykułów w ramach <a href="https://www.samouczekprogramisty.pl/kurs-sql">praktycznego kursu SQL</a>. Proszę zapoznaj się z pozostałymi częściami, mogą one być pomocne w zrozumieniu materiału z tego artykułu.</p>

<p>Każde zapytanie z kursu możesz wykonać samodzielnie. Potrzebujesz do tego środowiska opisanego w <a href="/pobieranie-danych-z-bazy-select/">pierwszym artykule kursu</a>. Bardzo mocno Cię do tego zachęcam. Moim zdaniem najwięcej nauczysz się samodzielnie eksperymentując z zapytaniami.</p>

</div>

<p class="notice--info">W tym artykule używam funkcji SQLite, które zostały dodane w wersji 3.28.0. Jeśli używasz SQLite do eksperymentowania upewnij się, że korzystasz z wersji 3.28.0 bądź nowszej. Możesz to zrobić używając polecenia <code class="language-plaintext highlighter-rouge">sqlite3 --version</code>.</p>

<h2 id="czym-są-funkcje-analityczne-w-sql">Czym są funkcje analityczne w SQL</h2>

<p>W jednym zdaniu można powiedzieć, że funkcje analityczne (ang. <em>analytic functions</em>) zwracają wartość na podstawie grupy wierszy powiązanych z aktualnym wierszem. Tę grupę nazywa się partycją. Sam opis może być skomplikowany, więc proszę spójrz na przykład poniżej:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>Poza funkcją analityczną użyłem tu <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/#aliasy-dla-kolumn">aliasu kolumny</a>, <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/#sortowanie-wyników">sortowania</a> i <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/#ograniczanie-liczby-wyników">ograniczenia liczby zwracanych wierszy</a>. W wyniku tego zapytania otrzymasz dziesięć wierszy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  customer_total_sum
----------  ---------  -----  ------------------
1           98         3.98   39.62
1           121        3.96   39.62
1           143        5.94   39.62
1           195        0.99   39.62
1           316        1.98   39.62
1           327        13.86  39.62
1           382        8.91   39.62
2           1          1.98   37.62
2           12         13.86  37.62
2           67         8.91   37.62
</code></pre></div></div>

<p>To zapytanie zwraca cztery różne kolumny. Ostatnia z nich jest wynikiem działania funkcji analitycznej. Spróbuję rozłożyć ją na części pierwsze:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
<span class="n">OVER</span>
<span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
</code></pre></div></div>

<p>W pierwszej linijce widzisz funkcję <code class="language-plaintext highlighter-rouge">SUM</code>. Możesz ją pamiętać z <a href="/funkcje-i-grupowanie-wierszy-w-sql/#funkcje-grupujące">artykułu o funkcjach w SQL</a>. W poprzednim przypadku była ona użyta jako funkcja agregująca. Użycie słowa kluczowego <code class="language-plaintext highlighter-rouge">OVER</code> sprawia, że jej zachowanie nieznacznie się zmienia. W tym przypadku <code class="language-plaintext highlighter-rouge">SUM</code> nadal zwraca sumę, jednak w przypadku funkcji analitycznej pod uwagę brana jest partycja a nie cała tabela<sup id="fnref:edgecase" role="doc-noteref"><a href="#fn:edgecase" class="footnote" rel="footnote">1</a></sup>.</p>

<p>W ostatniej linijce znajduje się definicja partycji, która zostanie użyta do obliczenia wartości funkcji. W tym przypadku do partycji należą wiersze zawierające taką samą wartość kolumny <code class="language-plaintext highlighter-rouge">customerid</code>.</p>

<p>Zatem ta funkcja:</p>
<ul>
  <li>oblicza sumę kolumny <code class="language-plaintext highlighter-rouge">total</code> (<code class="language-plaintext highlighter-rouge">SUM(total)</code>),</li>
  <li>sumując wiersze, które mają taką samą wartość kolumny <code class="language-plaintext highlighter-rouge">customerid</code> (<code class="language-plaintext highlighter-rouge">PARTITION BY customerid</code>).</li>
</ul>

<p>Proszę spójrz na pierwszych siedem wierszy, które mają taką samą wartość kolumny <code class="language-plaintext highlighter-rouge">customerid</code>. Kolumna <code class="language-plaintext highlighter-rouge">total</code> sumowana jest w ramach partycji: <code class="language-plaintext highlighter-rouge">3.98 + 3.96 + 5.94 + 0.99 + 1.98 + 13.86 + 8.91 = 39.62</code>. Wartość ta, będąca wynikiem działania funkcji, jest przypisywana do każdego wiersza z partycji.</p>

<p>Można powiedzieć, że funkcje analityczne są podobne do standardowego grupowania przy użyciu klauzuli <code class="language-plaintext highlighter-rouge">GROUP BY</code>. Funkcje agregujące zwracają jeden wiersz dla grupy, funkcje analityczne zwracają wiele wierszy.</p>

<h4 id="pozostałe-funkcje-agregujące">Pozostałe funkcje agregujące</h4>

<p>Poniżej znajdziesz listę funkcji agregujących, których możesz użyć przed słowem kluczowym <code class="language-plaintext highlighter-rouge">OVER</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AVG</code> – zwraca średnią wartość,</li>
  <li><code class="language-plaintext highlighter-rouge">COUNT</code> – zwraca liczbę wierszy,</li>
  <li><code class="language-plaintext highlighter-rouge">MAX</code> – zwraca maksymalną wartość,</li>
  <li><code class="language-plaintext highlighter-rouge">MIN</code> – zwraca minimalną wartość,</li>
  <li><code class="language-plaintext highlighter-rouge">SUM</code> – zwraca sumę wartości.</li>
</ul>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="klauzula-partition-by">Klauzula <code class="language-plaintext highlighter-rouge">PARTITION BY</code></h3>

<p>W przykładzie wyżej wszystkie wiersze w tabeli <code class="language-plaintext highlighter-rouge">invoice</code> zostały podzielone na osobne partycje. Do podziału na partycje użyłem wyłącznie jednej kolumny. W klauzuli <code class="language-plaintext highlighter-rouge">PARTITION BY</code> możesz użyć wielu wyrażeń:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span>
<span class="n">OVER</span>
<span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">,</span> <span class="n">billingcountry</span><span class="p">)</span>
</code></pre></div></div>

<p>W tym przypadku tabela zostanie podzielona na więcej partycji. Do jednej partycji trafią wszystkie wiersze, które mają taką samą wartość kolumn <code class="language-plaintext highlighter-rouge">customerid</code> i <code class="language-plaintext highlighter-rouge">billingcountry</code>.</p>

<p>Istnieje też możliwość pominięcia klauzuli <code class="language-plaintext highlighter-rouge">PARTITION BY</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">()</span>
</code></pre></div></div>

<p>W takim przypadku partycja równoznaczna jest z całą tabelą<sup id="fnref:virtualtable" role="doc-noteref"><a href="#fn:virtualtable" class="footnote" rel="footnote">2</a></sup>. Dla każdego wynikowego wiersza <code class="language-plaintext highlighter-rouge">SUM(total) OVER ()</code> zwróci sumę kolumny <code class="language-plaintext highlighter-rouge">total</code> we wszystkich wierszach.</p>

<h3 id="kiedy-obliczana-jest-wartość-funkcji-analitycznej">Kiedy obliczana jest wartość funkcji analitycznej</h3>

<p>Funkcje analityczne mogą być użyte wyłącznie w klauzuli <code class="language-plaintext highlighter-rouge">SELECT</code> i <code class="language-plaintext highlighter-rouge">ORDER BY</code>. Wynika to z faktu, że funkcje analityczne operują na „wirtualnej tabeli” (w <a href="/wstep-do-relacyjnych-baz-danych/#model-relacyjny">modelu relacyjnym</a> można mówić o relacji), która powstanie po filtrowaniu i grupowaniu wierszy.</p>

<p>Można powiedzieć, że zapytanie wykonywane jest w następującej kolejności:</p>

<ol>
  <li>Wykonanie klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code>,</li>
  <li>Wykonanie klauzuli <code class="language-plaintext highlighter-rouge">GROUP BY</code>,</li>
  <li>Wykonanie klauzuli <code class="language-plaintext highlighter-rouge">HAVING</code>,</li>
  <li>Wykonanie funkcji analitycznych,</li>
  <li>Wykonanie klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code>,</li>
  <li>Wykonanie klauzuli <code class="language-plaintext highlighter-rouge">LIMIT</code>.</li>
</ol>

<h3 id="czym-jest-okno">Czym jest okno</h3>

<p>Tak naprawdę, to funkcja do obliczenia wartości bierze pod uwagę tak zwane okno. Każdy wiersz w partycji ma swoje własne okno, które jest podzbiorem partycji. Jeśli okno nie jest zdefiniowane wówczas przyjmuje ono wartość całej partycji. Istnieje wiele możliwości na ograniczenie okna dla funkcji analitycznej. Najprostszym z nich jest użycie klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code>.</p>

<h3 id="ćwiczenia-do-samodzielnego-wykonania">Ćwiczenia do samodzielnego wykonania</h3>

<p>Teraz czas na Twoje eksperymenty. Spróbuj samodzielnie uruchomić przykładowe zapytanie. Możesz je także zmodyfikować:</p>

<ul>
  <li>zmień limit zwracanych wierszy,</li>
  <li>zwróć wyłącznie wiersze z parzystą wartością kolumny <code class="language-plaintext highlighter-rouge">customerid</code>.</li>
</ul>

<h2 id="sortowanie-w-funkcjach-analitycznych">Sortowanie w funkcjach analitycznych</h2>

<p>Nieznacznie zmodyfikuję definicję partycji z pierwszego zapytania. Przykład poniżej używa dwóch funkcji. Druga z nich używa <code class="language-plaintext highlighter-rouge">ORDER BY invoiceid</code> po definicji partycji:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span>
                              <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">invoiceid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_increasing_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">,</span> <span class="n">invoiceid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>Proszę spójrz na wynik zapytania. Zwróć uwagę na wartości kolumn <code class="language-plaintext highlighter-rouge">customer_total_sum</code> i <code class="language-plaintext highlighter-rouge">customer_total_increasing_sum</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  customer_total_sum  customer_total_increasing_sum
----------  ---------  -----  ------------------  -----------------------------
1           98         3.98   39.62               3.98
1           121        3.96   39.62               7.94
1           143        5.94   39.62               13.88
1           195        0.99   39.62               14.87
1           316        1.98   39.62               16.85
1           327        13.86  39.62               30.71
1           382        8.91   39.62               39.62
2           1          1.98   37.62               1.98
2           12         13.86  37.62               15.84
2           67         8.91   37.62               24.75
</code></pre></div></div>

<p>Użycie <code class="language-plaintext highlighter-rouge">ORDER BY</code> w definicji funkcji analitycznej powoduje zmianę okna dla każdego z wierszy. <code class="language-plaintext highlighter-rouge">ORDER BY</code> tworzy „narastające okna” dla każdego kolejnego wiersza:</p>

<ul>
  <li>okno dla pierwszego wiersza to wyłącznie pierwszy wiersz (<code class="language-plaintext highlighter-rouge">3.98 = 3.98</code>),</li>
  <li>okno dla drugiego wiersza to dwa pierwsze wiersze (<code class="language-plaintext highlighter-rouge">3.98 + 3.96 = 7.94</code>),</li>
  <li>okno dla trzeciego wiersza to trzy pierwsze wiersze (<code class="language-plaintext highlighter-rouge">3.98 + 3.96 + 5.94 = 13.88</code>),</li>
  <li>itd.</li>
</ul>

<p>Zauważ, że w tym przykładzie użyłem dwóch klauzul <code class="language-plaintext highlighter-rouge">ORDER BY</code>. Pierwsza z nich służy do określenia okna dla funkcji analitycznej, druga służy do sortowania wyników całego zapytania.</p>

<h3 id="partycje-a-sortowanie">Partycje a sortowanie</h3>

<p>Zapytanie używające partycji zwraca dane posortowane zgodnie z definicją partycji. Na przykład wyniki poniższego zapytania będą posortowane używając kolumny <code class="language-plaintext highlighter-rouge">customerid</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customerid</span>
      <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
  <span class="k">FROM</span> <span class="n">invoice</span>
</code></pre></div></div>

<p>Chociaż dane będą zwrócone w ten sposób nie polegałbym na tym zachowaniu. Jeśli zależy Ci na uzyskaniu posortowanych danych określ to jasno używając <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/">klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code></a>. W ten sposób jasno określasz swoje intencje:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">;</span>
</code></pre></div></div>

<p>We wszystkich przykładach w artykule dodałem klauzulę <code class="language-plaintext highlighter-rouge">ORDER BY</code>.</p>

<h3 id="ćwiczenia-do-samodzielnego-wykonania-1">Ćwiczenia do samodzielnego wykonania</h3>

<p>Teraz czas na Twoje eksperymenty. Spróbuj samodzielnie uruchomić przykładowe zapytanie zawierające dwie funkcje analityczne. Możesz je także zmodyfikować:</p>

<ul>
  <li>sprawdź jak na wynik zapytania wpływają różne kolumny użyte do sortowania,</li>
  <li>użyj kilku kolumn do sortowania wyników/wierszy w partycji,</li>
  <li>użyj <code class="language-plaintext highlighter-rouge">DESC</code>/<code class="language-plaintext highlighter-rouge">ASC</code> do z zmiany wyniku sortowania.</li>
</ul>

<h2 id="unikanie-duplikacji--nazwane-partycje">Unikanie duplikacji – nazwane partycje</h2>

<p>Wyobraź sobie sytuację, w której chcesz zwrócić wynik różnych funkcji analitycznych, jednak używając tej samej definicji partycji. Spójrz na przykład poniżej:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
        <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total_avg</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>W tym przykładzie definicja partycji jest prosta. Możesz jednak trafić na przypadek, w którym będzie ona dużo bardziej skomplikowana. Takie zapytanie zawiera duplikację definicji partycji. Duplikacja w większości przypadków jest zła. Nie inaczej jest w przypadku zapytań SQL. W takiej sytuacji z pomocą przychodzi klauzula <code class="language-plaintext highlighter-rouge">WINDOW</code>. Proszę spójrz na przykład poniżej, jest on równoznaczny z poprzednim zapytaniem:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">customer_total_sum</span>
        <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">customer_total_avg</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
  <span class="k">WINDOW</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customer</span> <span class="n">id</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>Oba zapytania zwrócą ten sam wynik:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  customer_total_sum  customer_total_avg
----------  ---------  -----  ------------------  ------------------
1           98         3.98   39.62               5.66
1           121        3.96   39.62               5.66
1           143        5.94   39.62               5.66
1           195        0.99   39.62               5.66
1           316        1.98   39.62               5.66
1           327        13.86  39.62               5.66
1           382        8.91   39.62               5.66
2           1          1.98   37.62               5.37428571428571
2           12         13.86  37.62               5.37428571428571
2           67         8.91   37.62               5.37428571428571
</code></pre></div></div>

<p>Co więcej partycje zdefiniowane w ten sposób możesz dodatkowo rozszerzać:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">customer_window</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">invoiceid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_ordered_total_sum</span>
        <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">customer_total_avg</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
  <span class="k">WINDOW</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>W tym przykładzie suma kolumny <code class="language-plaintext highlighter-rouge">total</code> jest narastająca:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  customer_ordered_total_sum  customer_total_avg
----------  ---------  -----  --------------------------  ------------------
1           98         3.98   3.98                        5.66
1           121        3.96   7.94                        5.66
1           143        5.94   13.88                       5.66
1           195        0.99   14.87                       5.66
1           316        1.98   16.85                       5.66
1           327        13.86  30.71                       5.66
1           382        8.91   39.62                       5.66
2           1          1.98   1.98                        5.37428571428571
2           12         13.86  15.84                       5.37428571428571
2           67         8.91   24.75                       5.37428571428571
</code></pre></div></div>

<h2 id="funkcje-okna">Funkcje okna</h2>

<p>Jak już wiesz funkcje analityczne działają w oparciu o partycje. Dodatkowo funkcje te pozwalają Ci na zdefiniowanie tak zwanego okna. Domyślnie okno zawiera:</p>

<ul>
  <li>wszystkie wiersze partycji jeśli nie użyjesz klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code>,</li>
  <li>wiersze „do aktualnego wiersza” jeśli użyjesz klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code>.</li>
</ul>

<p>Domyślną zawartość okna możesz zmienić. Okno pozwala na dalsze ograniczenie wierszy branych pod uwagę przez funkcję. Składnię można rozszerzyć do:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">funkcja</span><span class="o">&gt;</span>
<span class="n">OVER</span>
<span class="p">[</span> <span class="k">PARTITION</span> <span class="k">BY</span> <span class="err">…</span> <span class="p">]</span>
<span class="p">[</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="err">…</span> <span class="p">]</span>
<span class="o">&lt;</span><span class="n">definicja</span> <span class="n">okna</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Okno może być jednego z trzech rodzajów:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ROWS</code> – granice okna określone są przez liczbę wierszy przed i po aktualnym wierszu,</li>
  <li><code class="language-plaintext highlighter-rouge">GROUPS</code> – granice okna określone są przez liczbę „grup” przed i po aktualnej „grupie”. Do grupy zalicza się te wartości, które są „równe” w trakcie sortowania przy użyciu <code class="language-plaintext highlighter-rouge">ORDER BY</code>,</li>
  <li><code class="language-plaintext highlighter-rouge">RANGE</code> – granice okna określone są przez różnicę wartości względem aktualnego wiersza.</li>
</ul>

<p>Dla uproszczenia w definicji okna będę używał wyłącznie <code class="language-plaintext highlighter-rouge">BETWEEN x PRECEDING AND y FOLLOWING</code>. Oznacza to, że okno będzie obejmowało zakres <code class="language-plaintext highlighter-rouge">x</code> przed aktualnym wierszem i <code class="language-plaintext highlighter-rouge">y</code> po aktualnym wierszu. Składania pozwala na dużo bardziej zaawansowane modyfikacje, jednak ich znajomość nie jest niezbędna do zrozumienia działania samego mechanizmu. Jeśli jesteś zainteresowany tymi szczegółami odsyłam Cię do dokumentacji silnika bazy danych, którego używasz.</p>

<p>Mam świadomość, że to wszystko brzmi jak łacina bez konkretnego przykładu. Postaram się to poprawić ;)</p>

<h3 id="okno-typu-rows">Okno typu <code class="language-plaintext highlighter-rouge">ROWS</code></h3>

<p>Proszę spójrz na pierwszy z nich:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span>
                              <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">invoiceid</span>
                                  <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">1</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="mi">1</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>W wyniku tego zapytania otrzymasz 10 wierszy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  rolling_sum
----------  ---------  -----  -----------
1           98         3.98   7.94
1           121        3.96   13.88
1           143        5.94   10.89
1           195        0.99   8.91
1           316        1.98   16.83
1           327        13.86  24.75
1           382        8.91   22.77
2           1          1.98   15.84
2           12         13.86  24.75
2           67         8.91   24.75
</code></pre></div></div>

<p>W tym przypadku <code class="language-plaintext highlighter-rouge">SUM(total)</code> sumuje jedynie wiersze należące do okna, a nie całej partycji.</p>

<ul>
  <li>dla pierwszego wiersza oknem są wiersze pierwszy i drugi: <code class="language-plaintext highlighter-rouge">3.98 + 3.96 = 7.94</code> (brak poprzedniego wiersza w partycji),</li>
  <li>dla drugiego wiersza oknem są wiersze pierwszy, drugi i trzeci: <code class="language-plaintext highlighter-rouge">3.98 + 3.96 + 5.94 = 13.88</code> ,</li>
  <li>dla siódmego wiersza oknem są wiersze szósty i siódmy: <code class="language-plaintext highlighter-rouge">13.86 + 8.91 = 22.77</code> (brak następnego wiersza w partycji).</li>
</ul>

<h3 id="okno-typu-groups">Okno typu <code class="language-plaintext highlighter-rouge">GROUPS</code></h3>

<p>Tym razem do utworzenia partycji posłużę się kolumną <code class="language-plaintext highlighter-rouge">billingcountry</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">billingcountry</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">billingcountry</span>
                              <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span>
                                <span class="n">GROUPS</span> <span class="k">BETWEEN</span> <span class="mi">1</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="mi">1</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
   <span class="k">WHERE</span> <span class="n">billingcountry</span> <span class="o">=</span> <span class="s1">'India'</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span><span class="p">;</span>
</code></pre></div></div>

<p>W wyniku tego zapytania otrzymasz 13 wierszy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BillingCountry  InvoiceId  Total  rolling_sum
--------------  ---------  -----  -----------
India           120        1.98   9.92
India           218        1.98   9.92
India           315        1.98   9.92
India           97         1.99   17.84
India           412        1.99   17.84
India           23         3.96   23.78
India           338        3.96   23.78
India           45         5.94   37.62
India           360        5.94   37.62
India           186        8.91   57.42
India           284        8.91   57.42
India           131        13.86  45.54
India           229        13.86  45.54
</code></pre></div></div>

<p>Także tym przypadku <code class="language-plaintext highlighter-rouge">SUM(total)</code> sumuje jedynie wiersze należące do okna, a nie całej partycji:</p>

<ul>
  <li>dla pierwszego wiersza oknem jest pierwszych pięć wierszy. Grupa do której należy pierwszy wiersz i następna grupa: <code class="language-plaintext highlighter-rouge">3 * 1.98 + 2 * 1.99 = 9.92</code> (brak poprzedniej grupy w partycji),</li>
  <li>dla piątego wiersza oknem jest pierwszych siedem wierszy. Grupa poprzedzająca, grupa do której należy piąty wiersz i następna grupa: <code class="language-plaintext highlighter-rouge">3 * 1.98 + 2 * 1.99 + 2 * 3.96 = 17.84</code> ,</li>
  <li>dla przedostatniego wiersza oknem są wiersze 10., 11., 12. i 13.: <code class="language-plaintext highlighter-rouge">2 * 8.91 + 2 * 13.86</code> (brak następnej grupy w partycji).</li>
</ul>

<h3 id="okno-typu-range">Okno typu <code class="language-plaintext highlighter-rouge">RANGE</code></h3>

<p>W tym przypadku okno definiowane jest jako „odległość” 2 przed i po wartości kolumny <code class="language-plaintext highlighter-rouge">total</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span>
                              <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span>
                                 <span class="k">RANGE</span> <span class="k">BETWEEN</span> <span class="mi">2</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="mi">2</span> <span class="k">FOLLOWING</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">total</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>W wyniku tego zapytania otrzymasz dziesięć wierszy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  rolling_sum
----------  ---------  -----  -----------
1           195        0.99   2.97
1           316        1.98   10.91
1           121        3.96   15.86
1           98         3.98   15.86
1           143        5.94   13.88
1           382        8.91   8.91
1           327        13.86  13.86
2           293        0.99   4.95
2           1          1.98   8.91
2           196        1.98   8.91
</code></pre></div></div>

<p>Także tutaj <code class="language-plaintext highlighter-rouge">SUM(total)</code> sumuje jedynie wiersze należące do okna, a nie całej partycji.</p>

<ul>
  <li>dla pierwszego wiersza oknem są pierwsze dwa wiersze. Dzieje się tak ponieważ wartość kolumny <code class="language-plaintext highlighter-rouge">total</code> dla tych wierszy jest w zakresie  <code class="language-plaintext highlighter-rouge">&lt;0.99 - 2, 0.99 + 2&gt;</code>,</li>
  <li>dla drugiego wiersza oknem są pierwsze cztery wiersze. Dzieje się tak ponieważ wartość kolumny <code class="language-plaintext highlighter-rouge">total</code> dla tych wierszy jest w zakresie  <code class="language-plaintext highlighter-rouge">&lt;1.98 - 2, 1.98 + 2&gt;</code>,</li>
  <li>dla trzeciego wiersza oknem są wiersze drugi, trzeci, czwarty i piąty. Dzieje się tak ponieważ wartość kolumny <code class="language-plaintext highlighter-rouge">total</code> dla tych wierszy jest w zakresie  <code class="language-plaintext highlighter-rouge">&lt;3.96 - 2, 3.96 + 2&gt;</code>.</li>
</ul>

<h3 id="filtrowanie-okna">Filtrowanie okna</h3>

<p>Jakby tego było mało do tego wszystkiego dochodzi możliwość filtrowania :). Oznacza to tyle, że możesz użyć filtrowania jak w klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code>, żeby dodatkowo ograniczyć wiersze „pasujące” do definicji okna. Proszę spójrz na przykład poniżej:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">rows_window</span> <span class="k">AS</span> <span class="n">rolling_sum</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">FILTER</span> <span class="p">(</span><span class="k">WHERE</span> <span class="n">invoiceid</span> <span class="o">!=</span> <span class="mi">121</span><span class="p">)</span>
                      <span class="n">OVER</span> <span class="n">rows_window</span> <span class="k">AS</span> <span class="n">filtered_rolling_sum</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
  <span class="k">WINDOW</span> <span class="n">rows_window</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>Zwróć uwagę na wartości kolumn <code class="language-plaintext highlighter-rouge">rolling_sum</code> i <code class="language-plaintext highlighter-rouge">filtered_rolling_sum</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total  rolling_sum  filtered_rolling_sum
----------  ---------  -----  -----------  --------------------
1           98         3.98   39.62        35.66
1           121        3.96   39.62        35.66
1           143        5.94   39.62        35.66
1           195        0.99   39.62        35.66
1           316        1.98   39.62        35.66
1           327        13.86  39.62        35.66
1           382        8.91   39.62        35.66
2           1          1.98   37.62        37.62
2           12         13.86  37.62        37.62
2           67         8.91   37.62        37.62
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">filtered_rolling_sum</code> ma wartość <code class="language-plaintext highlighter-rouge">39.62 - 3.96 = 35.66</code>. Zatem funkcja analityczna w przypadku partycji gdzie <code class="language-plaintext highlighter-rouge">customerid = 1</code> nie wzięła pod uwagę filtrowanego wiersza. Wiersz, w którym <code class="language-plaintext highlighter-rouge">invoiceid = 121</code> nie został wzięty pod uwagę podczas sumowania. Dla przypomnienia odsyłam cię do artykułu opisującego <a href="/klauzula-where-w-zapytaniach-sql/">klauzulę <code class="language-plaintext highlighter-rouge">WHERE</code></a>.</p>

<h3 id="lista-funkcji">Lista funkcji</h3>

<p>Bazy danych posiadają szereg funkcji dedykowanych do użycia z klauzulą <code class="language-plaintext highlighter-rouge">OVER</code>. Poniżej znajdziesz listę zawierającą część z nich. Podobnie jak w innych przypadkach odsyłam Cię do dokumentacji Twojej bazy danych, jeśli chcesz znać ich komplet:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ROW_NUMBER()</code> – Numeruje wiersze w partycji zaczynając od 1. Bierze pod uwagę klauzulę <code class="language-plaintext highlighter-rouge">ORDER BY</code>,</li>
  <li><code class="language-plaintext highlighter-rouge">RANK()</code>, <code class="language-plaintext highlighter-rouge">DENSE_RANK()</code> – Funkcje numerujące unikalne wartości w partycji. <code class="language-plaintext highlighter-rouge">RANK</code> zostawia „dziury” w numeracji. Pokażę to na przykładzie poniżej. Bez klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code> każdy z wierszy ma numer 1,</li>
  <li><code class="language-plaintext highlighter-rouge">NTILE(N)</code> – Dzieli partycję na <code class="language-plaintext highlighter-rouge">N</code> „możliwie równych” i przydziela wiersze do grup o wartości od 1 do <code class="language-plaintext highlighter-rouge">N</code>.</li>
</ul>

<p>Pierwszy przykład pokazuje działanie funkcji <code class="language-plaintext highlighter-rouge">ROW_NUMBER</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customerid</span>
      <span class="p">,</span><span class="n">total</span>
      <span class="p">,</span><span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">row_number</span>
  <span class="k">FROM</span> <span class="n">invoice</span>
 <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  Total  row_number
----------  -----  ----------
1           0.99   1
1           1.98   2
1           3.96   3
1           3.98   4
1           5.94   5
1           8.91   6
1           13.86  7
2           0.99   1
2           1.98   2
2           1.98   3
</code></pre></div></div>

<p>Drugi przykład porównuje funkcje <code class="language-plaintext highlighter-rouge">RANK</code> i <code class="language-plaintext highlighter-rouge">DENSE_RANK</code>. Proszę zwróć uwagę na wyniki tych funkcji dla 10. i 11. wiersza:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customerid</span>
      <span class="p">,</span><span class="n">total</span>
      <span class="p">,</span><span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">rank_unsorted</span>
      <span class="p">,</span><span class="n">DENSE_RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">dense_rank_unsorted</span>
      <span class="p">,</span><span class="n">RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">customer_window</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rank_sorted</span>
      <span class="p">,</span><span class="n">DENSE_RANK</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">customer_window</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dense_rank_sorted</span>
  <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">WINDOW</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
 <span class="k">LIMIT</span> <span class="mi">13</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  Total  rank_unsorted  dense_rank_unsorted  rank_sorted  dense_rank_sorted
----------  -----  -------------  -------------------  -----------  -----------------
1           0.99   1              1                    1            1
1           1.98   1              1                    2            2
1           3.96   1              1                    3            3
1           3.98   1              1                    4            4
1           5.94   1              1                    5            5
1           8.91   1              1                    6            6
1           13.86  1              1                    7            7
2           0.99   1              1                    1            1
2           1.98   1              1                    2            2
2           1.98   1              1                    2            2
2           3.96   1              1                    4            3
2           5.94   1              1                    5            4
2           8.91   1              1                    6            5
</code></pre></div></div>

<p>Ostatni przykład pokazuje sposób podziału partycji przez funkcję <code class="language-plaintext highlighter-rouge">NTILE</code> z użyciem różnych argumentów:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customerid</span>
      <span class="p">,</span><span class="n">total</span>
      <span class="p">,</span><span class="n">NTILE</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">ntile_2</span>
      <span class="p">,</span><span class="n">NTILE</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="n">OVER</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="n">ntile_4</span>
  <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">WINDOW</span> <span class="n">customer_window</span> <span class="k">AS</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">)</span>
 <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  Total  ntile_2  ntile_4
----------  -----  -------  -------
1           3.98   1        1
1           3.96   1        1
1           5.94   1        2
1           0.99   1        2
1           1.98   2        3
1           13.86  2        3
1           8.91   2        4
2           1.98   1        1
2           13.86  1        1
2           8.91   1        2
</code></pre></div></div>

<h2 id="funkcje-analityczne-a-klauzula-where">Funkcje analityczne a klauzula <code class="language-plaintext highlighter-rouge">WHERE</code></h2>

<p>Jak już wiesz funkcje analityczne mogą być użyte wyłącznie w klauzuli <code class="language-plaintext highlighter-rouge">SELECT</code> i <code class="language-plaintext highlighter-rouge">ORDER BY</code>. Co jeśli musisz użyć wyniku funkcji analitycznej do filtrowania? Z pomocą przychodzą <a href="/podzapytania-sql/">podzapytania</a>. Na przykład poniższe zapytanie zwróci wyłącznie te faktury wystawione dla klienta, których suma będzie mniejsza niż 10:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">invoiceid</span>
        <span class="p">,</span><span class="n">total</span>
    <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">JOIN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">invoiceid</span>
                             <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">customerid</span>
                                                   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">invoiceid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">invoice_sum</span>
                         <span class="k">FROM</span> <span class="n">invoice</span><span class="p">)</span>
                 <span class="k">USING</span> <span class="p">(</span><span class="n">invoiceid</span><span class="p">)</span>
   <span class="k">WHERE</span> <span class="n">invoice_sum</span> <span class="o">&lt;</span> <span class="mi">10</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  InvoiceId  Total
----------  ---------  -----
1           98         3.98
1           121        3.96
2           1          1.98
3           99         3.98
4           2          3.96
4           24         5.94
5           77         1.98
5           100        3.96
6           46         8.91
7           78         1.98
</code></pre></div></div>

<p class="notice--info">Nie przejmuj się, jeśli to zapytanie będzie dla Ciebie zbyt skomplikowane. To nic dziwnego, używa ono wielu elementów składki SQL. Postaraj się przeanalizować je jeszcze raz. Spróbuj też samodzielnie eksperymentować. Zacznij od wywołania podzapytania i przeanalizowania jego wyników.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Artykuł nie wyczerpuje tematu funkcji analitycznych. Zachęcam Cię do rzucenia okiem na dodatkowe materiały do nauki. Pamiętaj, że dokumentacja Twojego silnika baz danych jest niezastąpiona ;) i zawiera dużo bardziej szczegółowe informacje.</p>

<ul>
  <li><a href="https://www.postgresql.org/docs/current/tutorial-window.html">Tutorial dotyczący funkcji analitycznych dla PostgreSQL</a>,</li>
  <li><a href="https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS">Składnia funkcji analitycznych w PostgreSQL</a>,</li>
  <li><a href="https://www.postgresql.org/docs/current/functions-window.html">Funkcje okna w PostgreSQL</a>,</li>
  <li><a href="https://www.sqlite.org/windowfunctions.html">Składnia funkcji analitycznych w SQLite</a>,</li>
  <li><a href="http://tpd.cs.put.poznan.pl/accounts/pdf/PABD/SQL_ZaawansowaneAnalizy_Czesc2_Wyklad.pdf">Materiały wykładowe z Politechniki Poznańskiej</a>.</li>
</ul>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Po przeczytaniu tego artykułu wiesz już czym są funkcje analityczne. Wiesz czym takie funkcje różnią się od zwykłego grupowania. Wiesz czym są funkcje okna i jak ich używać. Po przerobieniu ćwiczeń możesz śmiało powiedzieć, że udało Ci się sprawdzić wiedzę w praktyce. Gratulacje ;), funkcje analityczne to jedne z bardziej zaawansowanych elementów składki SQL.</p>

<p>Mam nadzieję, że artykuł był dla Ciebie pomocny. Proszę podziel się nim ze swoimi znajomymi. Dzięki temu pozwolisz mi dotrzeć do nowych Czytelników, za co z góry dziękuję. Jeśli nie chcesz pominąć kolejnych artykułów dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">Samouczka Programisty na Facebooku</a>.</p>

<p>Do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:edgecase" role="doc-endnote">
      <p>W wyjątkowych przypadkach partycją może być także cała tabela. Przeczytasz o tym w dalszej części artykułu. <a href="#fnref:edgecase" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:virtualtable" role="doc-endnote">
      <p>Właściwie to nie z całą tabelą, a relacją powstałą po filtrowaniu i grupowaniu. Także to zagadnienie opiszę dokładniej w dalszej części artykułu. <a href="#fnref:virtualtable" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Bazy danych" /><category term="Kurs SQL" /><summary type="html"><![CDATA[W tym artykule opisuję funkcje analityczne w SQL. Po lekturze tego artykułu będziesz wiedzieć czym są funkcje analityczne i czym różnią się od funkcji agregujących. Na licznych przykładach poznasz składnię funkcji analitycznych. Te przykłady pozwolą Ci przetestować zapytania analityczne samodzielnie. W artykule czeka na Ciebie zestaw ćwiczeń, które pomogą Ci utrwalić zdobytą wiedzę.]]></summary></entry><entry><title type="html">Wzorzec projektowy metoda wytwórcza</title><link href="https://www.samouczekprogramisty.pl/wzorzec-projektowy-metoda-wytworcza/" rel="alternate" type="text/html" title="Wzorzec projektowy metoda wytwórcza" /><published>2020-09-29T00:00:00+02:00</published><updated>2020-09-29T23:40:23+02:00</updated><id>https://www.samouczekprogramisty.pl/wzorzec-projektowy-metoda-wytworcza</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/wzorzec-projektowy-metoda-wytworcza/"><![CDATA[<p class="notice--info">Czytasz jeden z artykułów opisujących wzorce projektowe. Jeśli interesuje Cię ten temat zapraszam Cię do lektury pozostałych artykułów, które powstały w ramach tej serii – <a href="https://www.samouczekprogramisty.pl/narzedzia-i-dobre-praktyki/#wzorce-projektowe">wzorce projektowe</a>. W zrozumieniu artykułu przyda Ci się wiedza dotycząca <a href="/podstawy-uml/">podstaw UML’a</a>.</p>

<h2 id="problem-do-rozwiązania">Problem do rozwiązania</h2>

<p>Wyobraź sobie sytuację, w której prowadzisz sklep internetowy ze znaczkami pocztowymi. Obsługa zamówień odbywa się przez program, który zarządza całym procesem. Program nadzoruje wszystko od złożenia zamówienia do obsługi ewentualnych reklamacji. Jednym z etapów obsługi zamówienia jest wysyłka towaru do klienta.</p>

<p>Do tej pory program  pozwalał wyłącznie na wysyłkę znaczków używając standardowej poczty. Z biegiem czasu klienci zaczęli oczekiwać dostępności innych sposobów dostawy. Problem polega na tym, że program używa wyłącznie jednego rodzaju wysyłki. Z pomocą w usprawnieniu takiego programu może przyjść metoda wytwórcza (ang. <em>factory method</em>).</p>

<p>W tym przypadku metoda wytwórcza może być odpowiedzialna za tworzenie klas odpowiedzialnych za różne rodzaje wysyłek.</p>

<h2 id="wzorzec-projektowy-metoda-wytwórcza">Wzorzec projektowy metoda wytwórcza</h2>

<h3 id="diagram-klas">Diagram klas</h3>

<p>Ten wzorzec projektowy w jednej ze swoich form opiera się o 4 elementy. Proszę spójrz na <a href="/podstawy-uml/#diagram-klas">diagram klas</a> poniżej:</p>

<figure class="">
  <img src="/assets/images/2020/0929-wzorzec-projektowy-metoda-wytworcza/metoda_wytworcza.svg" alt="" /><figcaption>
      Wzorzec projektowy metoda wytwórcza (ang. <em>factory method</em>)

    </figcaption></figure>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Product</code> – klasa bazowa dla obiektów tworzonych przez metodę wytwórczą,</li>
  <li><code class="language-plaintext highlighter-rouge">Creator</code>– klasa zawierająca metodę wytwórczą <code class="language-plaintext highlighter-rouge">factoryMethod</code>,</li>
  <li><code class="language-plaintext highlighter-rouge">SublassedProduct</code> – przykładowa podklasa <code class="language-plaintext highlighter-rouge">Product</code>,</li>
  <li><code class="language-plaintext highlighter-rouge">SubclassedCreator</code> – podklasa, nadpisująca metodę wytwórczą zwracając instancję <code class="language-plaintext highlighter-rouge">SubclassedProduct</code>.</li>
</ul>

<p>Chociaż na diagramie klas pokazałem <code class="language-plaintext highlighter-rouge">Product</code> jako klasę, w rzeczywistości wcale nie musi tak być. Podobnie metoda <code class="language-plaintext highlighter-rouge">factoryMethod</code> nie musi być abstrakcyjna.</p>

<p><code class="language-plaintext highlighter-rouge">Product</code> może być zdefiniowany jako interfejs. W takim przypadku podklasy <code class="language-plaintext highlighter-rouge">Creator</code> tworzą instancje różnych klas implementujących interfejs <code class="language-plaintext highlighter-rouge">Product</code>. Metoda <code class="language-plaintext highlighter-rouge">factoryMethod</code> wcale nie musi być abstrakcyjna. Klasa <code class="language-plaintext highlighter-rouge">Creator</code> może mieć domyślną implementację tej metody, która może być napisana przez podklasy.</p>

<p>Inną modyfikacją może być wprowadzenie parametrów do metody wytwórczej. W takim przypadku parametry mogą mieć wpływ na obiekt, który jest przez nią zwracany.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="przykładowa-implementacja-metody-wytwórczej">Przykładowa implementacja metody wytwórczej</h3>

<h4 id="java">Java</h4>

<p>W przykładzie odpowiednikiem <code class="language-plaintext highlighter-rouge">Product</code> będzie następujący interfejs:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DeliveryService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">deliver</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">parcel</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Interfejs ten jest implementowany przez kilka klas. Jedną z nich możesz zobaczyć poniżej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pigeon</span> <span class="kd">implements</span> <span class="nc">DeliveryService</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deliver</span><span class="o">(</span><span class="nc">Parcel</span> <span class="n">parcel</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Parcel %s was delivered by Pigeon"</span><span class="o">,</span> <span class="n">parcel</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Odpowiednikiem klasy <code class="language-plaintext highlighter-rouge">Creator</code> jest klasa <code class="language-plaintext highlighter-rouge">OrderLifecycle</code>, która obsługuje cykl życia zamówienia. Jak widzisz poniżej metoda wytwórcza zwraca instancję <code class="language-plaintext highlighter-rouge">PostOffice</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderLifecycle</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processOrder</span><span class="o">(</span><span class="nc">String</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Parcel</span> <span class="n">parcel</span> <span class="o">=</span> <span class="n">prepareParcel</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
        <span class="nc">DeliveryService</span> <span class="n">deliveryService</span> <span class="o">=</span> <span class="n">deliveryService</span><span class="o">();</span>
        <span class="n">deliveryService</span><span class="o">.</span><span class="na">deliver</span><span class="o">(</span><span class="n">parcel</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="nc">DeliveryService</span> <span class="nf">deliveryService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PostOffice</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Parcel</span> <span class="nf">prepareParcel</span><span class="o">(</span><span class="nc">String</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Parcel</span> <span class="n">parcel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Parcel</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Parcel %s was prepared"</span><span class="o">,</span> <span class="n">parcel</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">parcel</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Dodatkowe podklasy nadpisują implementację metody wytwórczej zwracając inną implementację interfejsu <code class="language-plaintext highlighter-rouge">DeliveryService</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PigeonOrderLifecycle</span> <span class="kd">extends</span> <span class="nc">OrderLifecycle</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DeliveryService</span> <span class="nf">deliveryService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Pigeon</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Przykładowa metoda <code class="language-plaintext highlighter-rouge">main</code> pokazuje sposób wywołania poszczególnych klas, które używają metody wytwórczej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">CourierOrderLifecycle</span> <span class="n">courierOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CourierOrderLifecycle</span><span class="o">();</span>
    <span class="nc">PigeonOrderLifecycle</span> <span class="n">pigeonOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PigeonOrderLifecycle</span><span class="o">();</span>
    <span class="nc">OrderLifecycle</span> <span class="n">postOfficeOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OrderLifecycle</span><span class="o">();</span>

    <span class="n">postOfficeOrder</span><span class="o">.</span><span class="na">processOrder</span><span class="o">(</span><span class="s">"order_1"</span><span class="o">);</span>
    <span class="n">courierOrder</span><span class="o">.</span><span class="na">processOrder</span><span class="o">(</span><span class="s">"order_2"</span><span class="o">);</span>
    <span class="n">pigeonOrder</span><span class="o">.</span><span class="na">processOrder</span><span class="o">(</span><span class="s">"order_3"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Po uruchomieniu tego programu na konsoli pokaże się:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Parcel [sampro:order_1] was prepared
Parcel [sampro:order_1] was delivered by PostOffice
Parcel [sampro:order_2] was prepared
Parcel [sampro:order_2] was delivered by Courier
Parcel [sampro:order_3] was prepared
Parcel [sampro:order_3] was delivered by Pigeon
</code></pre></div></div>

<h4 id="python">Python</h4>

<p>Implementacja w języku Python wygląda trochę prościej<sup id="fnref:kaczka" role="doc-noteref"><a href="#fn:kaczka" class="footnote" rel="footnote">1</a></sup>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PostOffice</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deliver</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parcel</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Parcel </span><span class="si">{</span><span class="n">parcel</span><span class="si">}</span><span class="s"> was delivered by PostOffice"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Courier</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deliver</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parcel</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Parcel </span><span class="si">{</span><span class="n">parcel</span><span class="si">}</span><span class="s"> was delivered by Courier"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Pigeon</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">deliver</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parcel</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Parcel </span><span class="si">{</span><span class="n">parcel</span><span class="si">}</span><span class="s"> was delivered by Pigeon"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">OrderLifecycle</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">process_order</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order_id</span><span class="p">):</span>
        <span class="n">parcel</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prepare_parcel</span><span class="p">(</span><span class="n">order_id</span><span class="p">)</span>
        <span class="n">delivery_service</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">delivery_service</span><span class="p">()</span>
        <span class="n">delivery_service</span><span class="p">.</span><span class="n">deliver</span><span class="p">(</span><span class="n">parcel</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">prepare_parcel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order_id</span><span class="p">):</span>
        <span class="n">parcel</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"[sampro:</span><span class="si">{</span><span class="n">order_id</span><span class="si">}</span><span class="s">]"</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Parcel </span><span class="si">{</span><span class="n">parcel</span><span class="si">}</span><span class="s"> was prepared"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">parcel</span>

    <span class="k">def</span> <span class="nf">delivery_service</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">PostOffice</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">PigeonOrderLifecycle</span><span class="p">(</span><span class="n">OrderLifecycle</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">delivery_service</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Pigeon</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">CourierOrderLifecycle</span><span class="p">(</span><span class="n">OrderLifecycle</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">delivery_service</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Courier</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">courier_order</span> <span class="o">=</span> <span class="n">CourierOrderLifecycle</span><span class="p">()</span>
    <span class="n">pigeon_order</span> <span class="o">=</span> <span class="n">PigeonOrderLifecycle</span><span class="p">()</span>
    <span class="n">post_office_order</span> <span class="o">=</span> <span class="n">OrderLifecycle</span><span class="p">()</span>

    <span class="n">post_office_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_1"</span><span class="p">)</span>
    <span class="n">courier_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_2"</span><span class="p">)</span>
    <span class="n">pigeon_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_3"</span><span class="p">)</span>
</code></pre></div></div>

<p>Efekt działania tego programu będzie dokładnie taki sam jak w przypadku implementacji w języku Java.</p>

<h3 id="dodatkowe-rozważania">Dodatkowe rozważania</h3>

<p>Metoda wytwórcza to specyficzny przypadek innego wzorca projektowego – metody szablonowej. Wzorzec metody szablonowej opiszę w jednym z kolejnych artykułów w serii.</p>

<p>Metoda wytwórcza może być częścią innego wzorca projektowego jakim jest fabryka abstrakcyjna, także ten wzorzec omówię w jednym z kolejnych artykułów w serii.</p>

<h4 id="zalety">Zalety</h4>

<p>Stosowanie metody wytwórczej sprawia, że kod staje się łatwiejszy do testowania. Dzieje się tak ponieważ w łatwy sposób można nadpisać metodę wytwórczą używając <a href="/testy-jednostkowe-z-uzyciem-mock-i-stub/">mock’ów</a>, albo naiwnej implementacji na potrzeby testów.</p>

<p>To, że kod jest łatwiejszy do testowania jest konsekwencją stosowania reguł opisanych przez akronim <a href="/solid-czyli-dobre-praktyki-w-programowaniu-obiektowym/">SOLID</a>:</p>

<ul>
  <li>kod jest <a href="/solid-czyli-dobre-praktyki-w-programowaniu-obiektowym/#o-jak-otwarty">możliwy do rozszerzania</a> – tworząc podklasy w bardzo łatwy sposób możesz zmienić zachowanie klas używających metody wytwórczej,</li>
  <li>możesz <a href="/solid-czyli-dobre-praktyki-w-programowaniu-obiektowym/#l-jak-liskov-barbara">używać obiektów podklas</a> zwracanych przez metody wytwórcze – to zachowanie to „serce” metody wytwórczej.</li>
</ul>

<h4 id="wady">Wady</h4>

<p>Moim zdaniem główną wadą tego wzorca projektowego jest hierarchia dziedziczenia. Prowadzi ona do powstawania wielu (nadmiarowych?) bytów. Przeciążenie metody wytwórczej wymaga dziedziczenia po klasie, która ma już implementację tej metody. Pewną alternatywą dla takiego podejścia może być stosowanie kompozycji zamiast dziedziczenia. Proszę spójrz na przykład:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OrderLifecycle</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">delivery_service_factory</span><span class="o">=</span><span class="n">PostOffice</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">delivery_service_factory</span> <span class="o">=</span> <span class="n">delivery_service_factory</span>

    <span class="k">def</span> <span class="nf">process_order</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order_id</span><span class="p">):</span>
        <span class="n">parcel</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">prepare_parcel</span><span class="p">(</span><span class="n">order_id</span><span class="p">)</span>
        <span class="n">delivery_service</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">delivery_service_factory</span><span class="p">()</span>
        <span class="n">delivery_service</span><span class="p">.</span><span class="n">deliver</span><span class="p">(</span><span class="n">parcel</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">prepare_parcel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">order_id</span><span class="p">):</span>
        <span class="n">parcel</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"[sampro:</span><span class="si">{</span><span class="n">order_id</span><span class="si">}</span><span class="s">]"</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Parcel </span><span class="si">{</span><span class="n">parcel</span><span class="si">}</span><span class="s"> was prepared"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">parcel</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">courier_order</span> <span class="o">=</span> <span class="n">OrderLifecycle</span><span class="p">(</span><span class="n">Courier</span><span class="p">)</span>
    <span class="n">pigeon_order</span> <span class="o">=</span> <span class="n">OrderLifecycle</span><span class="p">(</span><span class="n">Pigeon</span><span class="p">)</span>
    <span class="n">post_office_order</span> <span class="o">=</span> <span class="n">OrderLifecycle</span><span class="p">()</span>

    <span class="n">post_office_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_1"</span><span class="p">)</span>
    <span class="n">courier_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_2"</span><span class="p">)</span>
    <span class="n">pigeon_order</span><span class="p">.</span><span class="n">process_order</span><span class="p">(</span><span class="s">"order_3"</span><span class="p">)</span>
</code></pre></div></div>

<p>To rozwiązanie nie jest już „czystą” metodą wytwórczą. To coś pomiędzy budowniczym (tak, kolejny wzorzec, który opiszę w innym artykule) a metodą wytwórczą. Na byt tego typu czasami mówi się po prostu fabryka.</p>

<h2 id="przykłady-użycia-wzorca-metody-wytwórczej">Przykłady użycia wzorca metody wytwórczej</h2>

<p>Ten wzorzec projektowy jest często używany w ramach fabryki abstrakcyjnej. Za przykład może to posłużyć metoda <a href="https://github.com/apache/commons-logging/blob/9444f0730bb04b6f3678d0501599234d77527210/src/main/java/org/apache/commons/logging/LogFactory.java#L226"><code class="language-plaintext highlighter-rouge">LogFactory.getLog</code></a> z biblioteki commons-logging.</p>

<p>Innymi przykładami mogą być metody w fabrykach związanych z obsługą formatu JSON, na przykład <a href="https://static.javadoc.io/javax.json/javax.json-api/1.1.2/javax/json/JsonReaderFactory.html"><code class="language-plaintext highlighter-rouge">JsonReaderFactory</code></a> czy   <a href="https://static.javadoc.io/javax.json/javax.json-api/1.1.2/javax/json/JsonBuilderFactory.html"><code class="language-plaintext highlighter-rouge">JsonBuilderFactory</code></a>.</p>

<h2 id="zadanie-do-wykonania">Zadanie do wykonania</h2>

<p>W sekcji opisującej wady metody wytwórczej pokazałem sposób modyfikacji tego wzorca projektowego. Zaimplementuj analogiczne rozwiązanie w języku Java. Spróbuj użyć <a href="/wyrazenia-lambda-w-jezyku-java/">wyrażeń lambda</a>. Przydatny może też być interfejs <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/function/Supplier.html"><code class="language-plaintext highlighter-rouge">Supplier</code></a>.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Niezmiennie, we wszystkich artykułach z serii poświęconej wzorcom projektowym polecam książkę <a href="https://www.amazon.com/gp/product/0201633612/">Design Patterns – Gamma, Helm, Johnson, Vlissides</a>. Jeśli miałbym polecić wyłącznie jedno źródło to poprzestałbym na tej książce.</p>

<p>Warto także rzucić okiem do polskiej i angielskiej Wikipedii, gdzie znajdziesz artykuły opisujące metodę wytwórczą:</p>

<ul>
  <li><a href="https://pl.wikipedia.org/wiki/Metoda_wytw%C3%B3rcza_(wzorzec_projektowy)">artykuł na polskiej Wikipedii o metodzie wytwórczej</a>,</li>
  <li><a href="https://en.wikipedia.org/wiki/Factory_method_pattern">artykuł na angielskiej Wikipedii o metodzie wytwórczej</a>.</li>
</ul>

<p>Kod źródłowy przykładów użytych w artykule także może być pomocny:</p>
<ul>
  <li><a href="https://github.com/SamouczekProgramisty/WzorceProjektowe/tree/master/java/04_factory_method/src/main/java/pl/samouczekprogramisty/patterns/factorymethod">kod źródłowy w języku Java</a>.</li>
  <li><a href="https://github.com/SamouczekProgramisty/WzorceProjektowe/blob/master/python/pattern/factory_method.py">kod źródłowy w języku Python</a>.</li>
</ul>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Wiesz już czym jest metoda wytwórcza i jak można ją zbudować. Znasz przykłady jej zastosowania zarówno z przykładu w artykule jak i innych bibliotek. Poznałeś zalety i wady tego wzorca projektowego. Wiesz jak można poradzić sobie z jego wadami. Jeśli udało Ci się samodzielnie rozwiązać zadanie do wykonania możesz śmiało powiedzieć, że znasz ten wzorzec projektowy. Gratulacje! :)</p>

<p>Jeśli artykuł przypadł Ci do gustu proszę podziel się nim ze znajomymi. Dzięki temu pozwolisz mi dotrzeć do nowych Czytelników, za co z góry dziękuję. Jeśli nie chcesz pomiąć kolejnych artykułów dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">Samouczka Programisty na Facebooku</a>.</p>

<p>Do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:kaczka" role="doc-endnote">
      <p>Jeśli coś chodzi jak kaczka i kwacze jak kaczka to jest kaczką ;). W odróżnieniu od Javy nie stosowałem tu dziedziczenia w przypadku odpowiedników klasy <code class="language-plaintext highlighter-rouge">Product</code>. Tę implementację można ją jeszcze uprościć, jak pokazałem paragrafie opisującym wady. <a href="#fnref:kaczka" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Wzorce projektowe" /><summary type="html"><![CDATA[W tym artykule przeczytasz o metodzie wytwórczej (ang. _factory method_), jednym z wzorców projektowych. Na przykładach pokażę Ci sposób użycia tego wzorca. Diagram UML pomoże Ci zrozumieć relacje pomiędzy klasami w występującymi w tym wzorcu. Artykuł zawiera także przykładową implementację wzorca w dwóch językach programowania. Ćwiczenie zawarte na końcu artykułu pozwoli Ci wykorzystać zdobytą wiedzę w praktyce.]]></summary></entry><entry><title type="html">Wprowadzenie do bash’a</title><link href="https://www.samouczekprogramisty.pl/wprowadzenie-do-basha/" rel="alternate" type="text/html" title="Wprowadzenie do bash’a" /><published>2020-09-21T00:00:00+02:00</published><updated>2020-09-21T20:57:24+02:00</updated><id>https://www.samouczekprogramisty.pl/wprowadzenie-do-basha</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/wprowadzenie-do-basha/"><![CDATA[<div class="notice--info">
    
<p>Jeśli do tej pory nie pracowałeś z konsolą koniecznie przeczytaj artykuł opisujący <a href="/poczatki-pracy-z-wierszem-polecen/">początki pracy z linią poleceń</a>. Mając podstawy opisane w tamtym artykule będzie Ci dużo łatwiej. <a href="/poczatki-pracy-z-wierszem-polecen/">Artykuł o początkach pracy z linią poleceń</a> między innymi opisuje programy:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cd</code></li>
  <li><code class="language-plaintext highlighter-rouge">ls</code></li>
  <li><code class="language-plaintext highlighter-rouge">pwd</code></li>
  <li><code class="language-plaintext highlighter-rouge">mkdir</code></li>
  <li><code class="language-plaintext highlighter-rouge">rmdir</code></li>
  <li><code class="language-plaintext highlighter-rouge">touch</code></li>
  <li><code class="language-plaintext highlighter-rouge">echo</code></li>
  <li><code class="language-plaintext highlighter-rouge">cat</code></li>
  <li><code class="language-plaintext highlighter-rouge">clear</code></li>
</ul>

</div>

<h2 id="specyficzne-dla-basha">Specyficzne dla <code class="language-plaintext highlighter-rouge">bash</code>‘a</h2>

<p>Na tym etapie wiesz już czym jest <a href="/poczatki-pracy-z-wierszem-polecen/#ścieżka">ścieżka</a>. Sporo programów akceptuje ścieżki jako parametry. W niektórych przypadkach niezbędne jest przekazanie wielu ścieżek. W takiej sytuacji z pomocą mogą przyjść wyrażenia glob.</p>

<h3 id="glob">Glob</h3>

<p><code class="language-plaintext highlighter-rouge">bash</code> nie wspiera <a href="/wyrazenia-regularne-w-jezyku-java/">wyrażeń regularnych</a>. Mam na myśli to, że sama powłoka nie pozwala na przykład na określenia ścieżki do pliku używając <a href="/wyrazenia-regularne-czesc-2/">wyrażeń regularnych</a><sup id="fnref:regexpprogramy" role="doc-noteref"><a href="#fn:regexpprogramy" class="footnote" rel="footnote">1</a></sup>. <code class="language-plaintext highlighter-rouge">bash</code> używa wyrażeń „glob”, które są do nich podobne.</p>

<p>Historycznie glob był osobnym programem, który został wchłonięty przez bash’a. Wyrażenia glob pozwalają na odwoływanie się do plików/katalogów używając <code class="language-plaintext highlighter-rouge">?</code>, <code class="language-plaintext highlighter-rouge">*</code> i <code class="language-plaintext highlighter-rouge">[]</code>. Znak <code class="language-plaintext highlighter-rouge">?</code> zastępuje jeden znak, <code class="language-plaintext highlighter-rouge">*</code> zastępuje dowolną liczbę znaków. Na przykład wyrażenie glob <code class="language-plaintext highlighter-rouge">*.txt</code> pasuje do wszystkich plików z rozszerzeniem <code class="language-plaintext highlighter-rouge">.txt</code> w aktualnym katalogu. Wyrażenie glob <code class="language-plaintext highlighter-rouge">?.txt</code> pasuje do wszystkich plików których nazwa (przed rozszerzeniem) ma jeden znak.</p>

<p><code class="language-plaintext highlighter-rouge">[]</code> zawiera w sobie grupę dozwolonych znaków. Na przykład wyrażenie <code class="language-plaintext highlighter-rouge">[ab].txt</code> pasuje do nazw plików <code class="language-plaintext highlighter-rouge">a.txt</code> i <code class="language-plaintext highlighter-rouge">b.txt</code> ale nie pasuje do nazwy <code class="language-plaintext highlighter-rouge">ab.txt</code>. Grupy umieszczone wewnątrz <code class="language-plaintext highlighter-rouge">[]</code> mogą być zakresami znaków. Zakres znaków oddzielony jest <code class="language-plaintext highlighter-rouge">-</code>, na przykład <code class="language-plaintext highlighter-rouge">[a-d].txt</code> pasuje do nazw plików <code class="language-plaintext highlighter-rouge">a.txt</code>, <code class="language-plaintext highlighter-rouge">b.txt</code>, <code class="language-plaintext highlighter-rouge">c.txt</code> i <code class="language-plaintext highlighter-rouge">d.txt</code>. Jeśli chcesz dopasować <code class="language-plaintext highlighter-rouge">-</code> dosłownie umieść go na początku, albo na końcu grupy, na przykład <code class="language-plaintext highlighter-rouge">[-a]</code> albo <code class="language-plaintext highlighter-rouge">[a-]</code>.</p>

<p>Podsumowując, w wyrażeniach glob możesz używać następujących wzorców:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">?</code> oznacza dowolny pojedynczy znak (poza <code class="language-plaintext highlighter-rouge">/</code> i <code class="language-plaintext highlighter-rouge">.</code> na początku)</li>
  <li><code class="language-plaintext highlighter-rouge">*</code> oznacza dowolną liczbę znaków (poza <code class="language-plaintext highlighter-rouge">/</code> i <code class="language-plaintext highlighter-rouge">.</code> na początku)</li>
  <li><code class="language-plaintext highlighter-rouge">[…]</code> oznacza grupę znaków zgodnie z zawartością</li>
</ul>

<p>Istotne jest to, że wyrażenia glob są interpretowane przez konsolę zanim zostanie uruchomiony właściwy program. Proszę rzuć okiem na przykład poniżej:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>a.txt b.txt c.csv

<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.txt
a.txt b.txt
</code></pre></div></div>

<p>W pierwszym przypadku zostanie uruchomiony <a href="/poczatki-pracy-z-wierszem-polecen/#ls">program <code class="language-plaintext highlighter-rouge">ls</code></a> bez żadnego parametru. Domyślnie zatem zostanie użyty aktualny katalog (<code class="language-plaintext highlighter-rouge">.</code>). Program wypisze zawartość aktualnego katalogu, w moim przypadku są to trzy pliki: a.txt, b.txt i c.csv. W drugim przypadku pojawia się wyrażenie glob <code class="language-plaintext highlighter-rouge">*.txt</code>, które zostaje rozwinięte przez konsolę do <code class="language-plaintext highlighter-rouge">a.txt b.txt</code> i przekazane jako argument do programu <code class="language-plaintext highlighter-rouge">ls</code>. Zatem w przykładzie powyżej <code class="language-plaintext highlighter-rouge">ls *.txt</code> jest tak na prawdę wywołaniem <code class="language-plaintext highlighter-rouge">ls a.txt b.txt</code>.</p>

<p>Wyrażenia glob nie biorą pod uwagę plików/katalogów, których nazwa zaczyna się od kropki (<code class="language-plaintext highlighter-rouge">.</code>). Jeśli wyrażenie glob nie może być rozwinięte (nie pasuje do żadnego pliku/katalogu) zostanie przekazane jako parametr bez zmian:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>exists.txt

<span class="nv">$ </span><span class="nb">echo</span> <span class="k">*</span>.txt
exists.txt

<span class="nv">$ </span><span class="nb">echo</span> <span class="k">*</span>.pdf
<span class="k">*</span>.pdf
</code></pre></div></div>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="rozwijanie-">Rozwijanie <code class="language-plaintext highlighter-rouge">~</code></h3>

<p>W <code class="language-plaintext highlighter-rouge">bash</code>‘u znak tyldy (<code class="language-plaintext highlighter-rouge">~</code>) ma specjalne znaczenie. <code class="language-plaintext highlighter-rouge">~</code> oznacza katalog domowy użytkownika. Podobnie jak wyrażenia glob, tylda rozwijana jest do właściwej ścieżki przed przekazaniem jej jako parametr do programu. Proszę spójrz na przykład poniżej, w którym użyłem <a href="/poczatki-pracy-z-wierszem-polecen/#echo">programu <code class="language-plaintext highlighter-rouge">echo</code></a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> ~
/home/mapi

<span class="nv">$ </span><span class="nb">echo</span> ~/some/path
/home/mapi/some/path
</code></pre></div></div>

<p>Używając tyldy możesz także odwołać się do katalogu domowego dowolnego użytkownika. Na przykład <code class="language-plaintext highlighter-rouge">~root</code> oznacza katalog domowy użytkownika <code class="language-plaintext highlighter-rouge">root</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> ~root
/root
</code></pre></div></div>

<p>Możesz użyć także rozwijania <code class="language-plaintext highlighter-rouge">~</code> do poznania aktualnego katalogu używając <code class="language-plaintext highlighter-rouge">+</code><sup id="fnref:inaczej" role="doc-noteref"><a href="#fn:inaczej" class="footnote" rel="footnote">2</a></sup>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /run/usr/1000

<span class="nv">$ </span><span class="nb">echo</span> ~+
/run/user/1000
</code></pre></div></div>

<p>W podobny sposób <code class="language-plaintext highlighter-rouge">-</code> pokazuje poprzedni katalog:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /tmp

<span class="nv">$ </span><span class="nb">cd</span> 

<span class="nv">$ </span><span class="nb">echo</span> ~-
/tmp
</code></pre></div></div>

<p>Podobnie jak wyrażenia glob, także znak <code class="language-plaintext highlighter-rouge">~</code> jest rozwijany przez powłokę przed przekazaniem tego znaku jako parametr do uruchamianego programu.</p>

<h3 id="rozwijanie--">Rozwijanie <code class="language-plaintext highlighter-rouge">{ }</code></h3>

<p>Bash wspiera także mechanizm rozwijania <code class="language-plaintext highlighter-rouge">{ }</code>. Proszę spójrz na przykład poniżej:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo </span>some-<span class="o">{</span>magic,long,complicated<span class="o">}</span><span class="nt">-text</span>
some-magic-text some-long-text some-complicated-text
</code></pre></div></div>

<p>Wywołanie <a href="/poczatki-pracy-z-wierszem-polecen/#echo">programu <code class="language-plaintext highlighter-rouge">echo</code></a> wyświetla przekazane argumenty używając <a href="/poczatki-pracy-z-wierszem-polecen/#standardowe-wejście-i-wyjście">standardowego wyjścia</a>. Bash, w trakcie procesu rozwijania <code class="language-plaintext highlighter-rouge">{ }</code> zamienił pojedynczy parametr na trzy osobne parametry.</p>

<p>Wewnątrz nawiasów może znajdować się dowolna liczba elementów oddzielona znakiem <code class="language-plaintext highlighter-rouge">,</code>. Każdy z tych elementów będzie skutkował nowym „słowem” podstawionym przez bash’a.</p>

<p>Rozwijanie <code class="language-plaintext highlighter-rouge">{ }</code> może także służyć do generowania sekwencji numerów. Proszę spójrz na przykład, w którym generuję liczby od 7 do 10:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo </span>sequence-<span class="o">{</span>7..10<span class="o">}</span>
sequence-7 sequence-8 sequence-9 sequence-10
</code></pre></div></div>

<p>Użycie wiodącego <code class="language-plaintext highlighter-rouge">0</code> powoduje generowanie numerów o stałej szerokości:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo </span>sequence-<span class="o">{</span>07..10<span class="o">}</span>
sequence-07 sequence-08 sequence-09 sequence-10
</code></pre></div></div>

<p>Opcjonalnym, trzecim parametrem może być skok, który informuje o ile powinny różnić się kolejno generowane liczby:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo </span>sequence-<span class="o">{</span>0..10..2<span class="o">}</span>
sequence-0 sequence-2 sequence-4 sequence-6 sequence-8 sequence-10
</code></pre></div></div>

<p>Ten sam mechanizm można także użyć do generowania sekwencji liter:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo </span>sequence-<span class="o">{</span>a..d<span class="o">}</span>
sequence-a sequence-b sequence-c sequence-d
</code></pre></div></div>

<p>Najczęściej używam tej składni jeśli chcę skopiować albo przenieść plik czy folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls 
</span>some_file.txt

<span class="nv">$ </span><span class="nb">mv </span>some_file.txt<span class="o">{</span>,.bak<span class="o">}</span>

<span class="nv">$ </span><span class="nb">ls 
</span>some_file.txt.bak
</code></pre></div></div>

<h3 id="parametry-specjalne">Parametry specjalne</h3>

<p><code class="language-plaintext highlighter-rouge">bash</code> posiada zestaw parametrów, które mają specjalne znaczenie. Możesz odwołać się do tych parametrów używając składni <code class="language-plaintext highlighter-rouge">$&lt;znak parametru&gt;</code>, na przykład <code class="language-plaintext highlighter-rouge">$?</code>. Są one traktowane jako specjalne, ponieważ służą wyłącznie do odczytu. Część z nich znajdziesz poniżej:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">$#</code> - zawiera liczbę parametrów przekazanych do skryptu bash’a</li>
  <li><code class="language-plaintext highlighter-rouge">$?</code> - zawiera kod wyjścia poprzednio uruchomionego programu</li>
  <li><code class="language-plaintext highlighter-rouge">$$</code> - zawiera identyfikator procesu bash’a</li>
  <li><code class="language-plaintext highlighter-rouge">$_</code> - zawiera ostatni argument poprzedniej komendy</li>
</ul>

<p>Proszę spróbuj trochę poeksperymentować z użyciem tych parametrów, wtedy zrozumienie ich działania będzie dużo łatwiejsze.</p>

<h3 id="historia">Historia</h3>

<p>Bash posiada bardzo przydatną funkcję, pozwala ona na zapisywanie historii wykonywanych poleceń. Przy odpowiedniej konfiguracji (domyślnej na przykład w Ubuntu) w pliku <code class="language-plaintext highlighter-rouge">~/.bash_history</code> zapisywana jest historia poleceń. Historia ta jest aktualizowana w momencie zamykania okna terminala.</p>

<p>Historia jest przydatna, bo często możesz używać poleceń, których używałeś poprzednio. Pomocny może być skrót klawiaturowy <code class="language-plaintext highlighter-rouge">Ctrl+R</code>, który pozwala na przeszukiwanie historii. Po użyciu tego skrótu klawiaturowego zmieni się standardowy znak zachęty. Możesz wtedy wpisywać fragmenty poleceń z historii. Jak zwykle, zachęcam Cię do eksperymentów:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>reverse-i-search<span class="o">)</span><span class="sb">`</span><span class="s1">': 
</span></code></pre></div></div>

<p>To dzięki historii możesz też używać strzałek (góra/dół) do poruszania się po historii wykonywanych poleceń. Chociaż sam używam częściej programu <code class="language-plaintext highlighter-rouge">history</code> albo wspomnianego skrótu <code class="language-plaintext highlighter-rouge">Ctrl+R</code>.</p>

<h4 id="history"><code class="language-plaintext highlighter-rouge">history</code></h4>

<p>Program <code class="language-plaintext highlighter-rouge">history</code> wypisuje historię wykonywanych poleceń. Często zdarza mi się używać tego programu w połączeniu z <code class="language-plaintext highlighter-rouge">grep</code> i <a href="/poczatki-pracy-z-wierszem-polecen/#potoki">potokami</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">history</span> | <span class="nb">grep </span>docker | <span class="nb">tail</span> <span class="nt">-n</span> 3
 4500  docker run <span class="nt">--rm</span> <span class="nt">-it</span> alpine
 4501  docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">--entrypoint</span> /bin/sh alpine/helm
 4545  <span class="nb">history</span> | <span class="nb">grep </span>docker | <span class="nb">tail</span> <span class="nt">-n</span> 3
</code></pre></div></div>

<p>Przydatny może być też program <code class="language-plaintext highlighter-rouge">fc</code>, który pozwala na edycję wprowadzonych do tej pory komend przed ich wywołaniem. W przykładzie poniżej <code class="language-plaintext highlighter-rouge">fc 1170</code> uruchomi edytor tekstu z poleceniem <code class="language-plaintext highlighter-rouge">git rebase -i master</code>. To polecenie znajduje się na 1170 miejscu w historii bash’a:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">history</span> | <span class="nb">grep </span>git | <span class="nb">tail</span> <span class="nt">-n</span> 4
 1170  git rebase <span class="nt">-i</span> master
 1174  git status
 1176  git log <span class="nt">-5</span>
 1178  git push

<span class="nv">$ </span><span class="nb">fc </span>1170
</code></pre></div></div>

<h4 id="modyfikowanie-historii">Modyfikowanie historii</h4>

<p>Chociaż historia to dobra rzecz i nie raz może uratować skórę, zdarzają się przypadki, w których nie chcesz zostawiać po sobie śladu. Na przykład kiedy w linii poleceń wpisujesz hasło czy klucz do API.</p>

<div class="notice--warning">
    
<p>To bardzo zła praktyka. Do przekazywania danych wrażliwych jak hasła czy tokeny dostępu używaj plików (przekazując ścieżkę do pliku z danymi wrażliwymi) albo zmiennych środowiskowych (zawierających dane wrażliwe albo ścieżkę do pliku z danymi wrażliwymi).</p>

<p>To rozwiązanie też nie jest idealne. Zmienne środowiskowe, podobnie jak pliki mogą być dostępne dla innych użytkowników systemu. Jednak takie rozwiązanie jest o niebo lepsze niż używanie danych wrażliwych bezpośrednio w konsoli.</p>

</div>

<p>W przypadku kiedy nie chcesz aby dana komenda została zapisana w historii poprzedź ją ` ` (spacją)<sup id="fnref:histcontrol" role="doc-noteref"><a href="#fn:histcontrol" class="footnote" rel="footnote">3</a></sup>.</p>

<p>A co jeśli mleko już się rozlało i komenda została już zapisana w historii? Wówczas z pomocą przychodzi program <code class="language-plaintext highlighter-rouge">history</code> z parametrem <code class="language-plaintext highlighter-rouge">-d</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">history</span> | <span class="nb">tail</span> <span class="nt">-n</span> 1
 1190 curl https://admin:password1@ministry.gov

<span class="nv">$ </span><span class="nb">history</span> <span class="nt">-d</span> 1190

<span class="nv">$ </span><span class="nb">history</span> <span class="nt">-w</span>
</code></pre></div></div>

<p>Polecenie <code class="language-plaintext highlighter-rouge">history -d 1190</code> usuwa z historii komendę z numerem 1190. <code class="language-plaintext highlighter-rouge">hisory -w</code> zapisuje aktualną historię (z usuniętą komendą) w pliku historii.</p>

<p>Jeśli nie chcesz używać programu <code class="language-plaintext highlighter-rouge">history</code> zawsze możesz edytować plik historii samodzielnie. Zmienna środowiskowa <code class="language-plaintext highlighter-rouge">HISTFILE</code> przechowuje ścieżkę do pliku, w którym przechowywana jest historia poleceń:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vim <span class="nv">$HISTFILE</span>
</code></pre></div></div>

<h4 id="rozwijanie-historii">Rozwijanie historii</h4>

<p>Proszę spójrz na przykład poniżej, w którym użyłem podstawowego mechanizmu rozwijania historii:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">history</span> | <span class="nb">grep </span>git | <span class="nb">tail</span> <span class="nt">-n</span> 3
 1174  git status
 1176  git log <span class="nt">-5</span>
 1178  git push

<span class="nv">$ </span><span class="o">!</span>1176

<span class="nv">$ </span><span class="nb">history</span> | <span class="nb">grep </span>git | <span class="nb">tail</span> <span class="nt">-n</span> 3
 1176  git log <span class="nt">-5</span>
 1178  git push
 1201  git log <span class="nt">-5</span>
</code></pre></div></div>

<p>Wywołanie <code class="language-plaintext highlighter-rouge">!1176</code> spowodowało ponowne uruchomienie programu zapisanego w historii pod numerem 1176. Mechanizm ten jest dość rozbudowany. Jeśli chcesz poznać więcej jego możliwości odsyłam Cię do sekcji „History expansion” w <a href="https://linux.die.net/man/1/bash">dokumentacji <code class="language-plaintext highlighter-rouge">bash</code>‘a</a>.</p>

<h3 id="polecenia-wbudowane">Polecenia wbudowane</h3>

<p>Do tej pory używałem głównie określenia „program”, jednak nie we wszystkich przypadkach było to do końca poprawne. Dzieje się tak za sprawą poleceń wbudowanych.</p>

<p>W dochodzeniu do prawdy pomocny będzie program <code class="language-plaintext highlighter-rouge">which</code> :). Ten program zwraca ścieżki programów, które byłyby uruchomione dla każdego z przekazanych parametrów. Robi to oparciu o listę katalogów przechowywanych w zmiennej środowiskowej <code class="language-plaintext highlighter-rouge">PATH</code>. Proszę spójrz na przykład:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>which <span class="nb">ls</span>
/bin/ls
</code></pre></div></div>

<p>W tym przykładzie <code class="language-plaintext highlighter-rouge">which</code> zwraca <a href="/poczatki-pracy-z-wierszem-polecen/#ścieżka">absolutną ścieżkę</a> programu, który zostanie uruchomiony po wywołaniu <code class="language-plaintext highlighter-rouge">ls</code>. W tym przypadku jest to <code class="language-plaintext highlighter-rouge">/bin/ls</code>.</p>

<p>W ten sam sposób możesz sprawdzić inne programy:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>which which mount cron
/usr/bin/which
/bin/mount
/usr/sbin/cron
</code></pre></div></div>

<p>A teraz spróbuj zrobić to samo dla innych „programów”, których używasz <code class="language-plaintext highlighter-rouge">cd</code> czy <code class="language-plaintext highlighter-rouge">history</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>which <span class="nb">cd history</span>
</code></pre></div></div>

<p>Hmm ;), <code class="language-plaintext highlighter-rouge">which</code> nie pokazało nic. Dzieje się tak z tego powodu, że zarówno <code class="language-plaintext highlighter-rouge">cd</code> jak i <code class="language-plaintext highlighter-rouge">history</code> to polecenia wbudowane w <code class="language-plaintext highlighter-rouge">bash</code>‘a. Takich poleceń jest więcej. Jednym z wbudowanych poleceń jest <code class="language-plaintext highlighter-rouge">type</code>, które rzuca więcej światła na tę sprawę:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">type</span> <span class="nt">-a</span> <span class="nb">history
history </span>is a shell <span class="nb">builtin</span>
</code></pre></div></div>

<p>Użyłem tu przełącznika <code class="language-plaintext highlighter-rouge">-a</code>, który zwraca wszystkie możliwe opcje, a jest ich kilka :). Proszę spójrz na kolejny przykład:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">type</span> <span class="nt">-a</span> <span class="nb">kill pwd
kill </span>is a shell <span class="nb">builtin
kill </span>is /bin/kill
<span class="nb">pwd </span>is a shell <span class="nb">builtin
pwd </span>is /bin/pwd
</code></pre></div></div>

<p>Jak widzisz istnieją także „programy”, które są zarówno poleceniami wbudowanymi jak i zwyczajnymi programami. W dalszej części artykuł nadal będę używał określenia „program” odnosząc się zarówno do programów jak i poleceń wbudowanych.</p>

<h3 id="wywoływanie-programów-w-tle">Wywoływanie programów w tle</h3>

<p>Może się zdarzyć, że chcesz wywołać program, który działa bardzo długo a nie chcesz zajmować aktualnego okna konsoli. Z pomocą przychodzi operator <code class="language-plaintext highlighter-rouge">&amp;</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt &amp;
<span class="o">[</span>1] 11410
</code></pre></div></div>

<p>W przykładzie powyżej wywołałem program <code class="language-plaintext highlighter-rouge">ping</code> i <a href="/poczatki-pracy-z-wierszem-polecen/#przekierowania">przekierowałem standardowe wyjście</a> do pliku <code class="language-plaintext highlighter-rouge">~/ping_output.txt</code>. Kolejna linia <code class="language-plaintext highlighter-rouge">[1] 11410</code> informuje o tym, że zadanie <code class="language-plaintext highlighter-rouge">[1]</code> działające w tle zostało uruchomione. Zadanie to działa jako proces 11410.</p>

<p>W każdym momencie możesz sprawdzić listę zadań używając programu <code class="language-plaintext highlighter-rouge">jobs</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">jobs</span>
<span class="o">[</span>1]+  Running                 ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt &amp;
</code></pre></div></div>

<p>W tym przypadku uruchomione jest jedno zadanie w tle, które ma status <code class="language-plaintext highlighter-rouge">Running</code>. Możesz „przywołać” to zadanie używając programu <code class="language-plaintext highlighter-rouge">fg</code> (od ang. <em>foreground</em>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">fg</span> %1
ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt
</code></pre></div></div>

<p>W zarządzaniu zadaniami pomocny jest też skrót klawiaturowy <code class="language-plaintext highlighter-rouge">&lt;Ctrl+Z&gt;</code>, który usypia aktualny program<sup id="fnref:sygnal" role="doc-noteref"><a href="#fn:sygnal" class="footnote" rel="footnote">4</a></sup>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">fg</span> %1
ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt
^Z <span class="c"># tu użyłem Ctrl+Z</span>
<span class="o">[</span>1]+  Stopped                 ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt
</code></pre></div></div>

<p>Jak widzisz w tym przypadku zadanie <code class="language-plaintext highlighter-rouge">[1]</code> ma status <code class="language-plaintext highlighter-rouge">Stopped</code>. Jeśli chcesz wznowić zatrzymany program w tle użyj programu <code class="language-plaintext highlighter-rouge">bg</code> (od ang. <em>background</em>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">jobs</span>
<span class="o">[</span>1]+  Stopped                 ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt

<span class="nv">$ </span><span class="nb">bg</span> %1
<span class="o">[</span>1]+ ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt

<span class="nv">$ </span><span class="nb">jobs</span>
<span class="o">[</span>1]+  Running                 ping www.samouczekprogramisty.pl <span class="o">&gt;</span> ~/ping_output.txt &amp;
</code></pre></div></div>

<h2 id="zmienne-środowiskowe">Zmienne środowiskowe</h2>

<p>Uruchomienie programu wiąże się z uruchomieniem procesu. Proces nadzorowany jest przez system operacyjny. Każdy proces posiada, między innymi, swój zestaw zmiennych środowiskowych.</p>

<p>Można powiedzieć, że zmienne środowiskowe są podobne do zmiennych w językach programowania. Zmienne środowiskowe zawierają dane, które dostępne są dla procesu (programu). Zazwyczaj nazwy zmiennych środowiskowych używają wielkich liter, choć nie jest to wymagane. Kilka przykładowych zmiennych środowiskowych:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PATH</code> – zawiera listę katalogów, w których poszukiwane są programy do uruchomienia. To dzięki tej zmiennej możesz napisać <code class="language-plaintext highlighter-rouge">ls</code> bez podawania pełnej ścieżki programu (<code class="language-plaintext highlighter-rouge">/bin/ls</code>),</li>
  <li><code class="language-plaintext highlighter-rouge">HOME</code> – zawiera ścieżkę do katalogu domowego użytkownika,</li>
  <li><code class="language-plaintext highlighter-rouge">EDITOR</code> – zawiera ścieżkę do preferowanego edytora tekstu,</li>
  <li><code class="language-plaintext highlighter-rouge">PPID</code> – zawiera identyfikator procesu nadrzędnego (tego, który uruchomił aktualny proces).</li>
</ul>

<p>Możesz sprawdzić aktualną listę zmiennych środowiskowych wywołując program <code class="language-plaintext highlighter-rouge">set</code> bez żadnych parametrów<sup id="fnref:set" role="doc-noteref"><a href="#fn:set" class="footnote" rel="footnote">5</a></sup>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">set</span> | <span class="nb">head</span> <span class="nt">-n</span> 1
<span class="nv">BASH</span><span class="o">=</span>/bin/bash
</code></pre></div></div>

<p>Przykład poniżej pokazuje użycie zmiennych środowiskowych:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$HOME</span>
/home/mapi

<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$HOMEsweetHOME</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>sweetHOME
/home/mapisweetHOME
</code></pre></div></div>

<p>Pierwsza komenda wyświetla zawartość zmiennej <code class="language-plaintext highlighter-rouge">HOME</code>. Druga zawartość zmiennej <code class="language-plaintext highlighter-rouge">HOMEsweetHOME</code>. Zauważ, że w tym przypadku <code class="language-plaintext highlighter-rouge">bash</code> nie wie gdzie kończy się nazwa zmiennej środowiskowej. Dlatego właśnie wyświetla pustą linię – zmienna <code class="language-plaintext highlighter-rouge">HOMEsweetHOME</code> nie jest zdefiniowana. W trzecim przypadku użyłem składni <code class="language-plaintext highlighter-rouge">${}</code><sup id="fnref:rozwijanieparametrow" role="doc-noteref"><a href="#fn:rozwijanieparametrow" class="footnote" rel="footnote">6</a></sup> otaczając nawiasami klamrowymi nazwę zmiennej.</p>

<p>Możesz też definiować swoje zmienne środowiskowe używając składni <code class="language-plaintext highlighter-rouge">NAZWA_ZMIENNEJ=wartosc zmiennej</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$NEW_VARIABLE</span>

<span class="nv">$ NEW_VARIABLE</span><span class="o">=</span><span class="s2">"some value"</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$NEW_VARIABLE</span>
some value
</code></pre></div></div>

<h3 id="zmienne-środowiskowe-w-procesach-potomnych">Zmienne środowiskowe w procesach potomnych</h3>

<p>Wiesz już, że zmienne środowiskowe przypisane są do procesu. Każdy proces ma swoją kopię zmiennych środowiskowych. Uruchamiając nowy proces <em>eksportowane</em> zmienne środowiskowe kopiowane są do procesu potomnego. Oznacza to tyle, że proces potomny ma dostęp wyłącznie do podzbioru zmiennych aktualnie zdefiniowanych.</p>

<p>Zmienną środowiskową możesz eksportować używając programu <code class="language-plaintext highlighter-rouge">export</code>. Proszę spójrz na przykład:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ VARIABLE_1</span><span class="o">=</span>value1

<span class="nv">$ </span><span class="nb">export </span><span class="nv">VARIABLE_2</span><span class="o">=</span>value2

<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$VARIABLE_1</span> <span class="nv">$VARIABLE_2</span> <span class="nv">$PPID</span>
value1 value2 2855

<span class="nv">$ </span>bash  <span class="c"># uruchamia nowy proces</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$VARIABLE_1</span> <span class="nv">$VARIABLE_2</span> <span class="nv">$PPID</span>
value2 10189
</code></pre></div></div>

<p>W przykładzie możesz zobaczyć dwie zmienne: <code class="language-plaintext highlighter-rouge">VARIABLE_1</code> i <code class="language-plaintext highlighter-rouge">VARIABLE_2</code>. Druga z nich została wyeksportowana. Dzięki temu jest dostępne w procesie potomnym.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Podobnie jak w <a href="/poczatki-pracy-z-wierszem-polecen/">poprzednim artkule</a> z serii jako pierwsze źródło polecę Ci dokumentację. Znów odsyłam cię do programu <code class="language-plaintext highlighter-rouge">man</code> lub wbudowanej dokumentacji, którą możesz przeczytać uruchamiając <code class="language-plaintext highlighter-rouge">&lt;program&gt; --help</code>.</p>

<p>W przypadku tego artykułu nieocenionym źródłem wiedzy będzie dokumentacja programu <code class="language-plaintext highlighter-rouge">bash</code>, którą możesz przeczytać po uruchomieniu <code class="language-plaintext highlighter-rouge">man bash</code> lub <a href="https://www.gnu.org/software/bash/manual/bash.html">online</a>.</p>

<p>Możesz też rzucić okiem na stronę <a href="https://explainshell.com">https://explainshell.com</a>, która pozwoli Ci lepiej zrozumieć bardziej skomplikowane komendy.</p>

<p>Niezmiennie zachęcam Cię do samodzielnych eksperymentów. Najwięcej nauczysz się samodzielnie bawiąc się linią poleceń.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Po lekturze tego artykułu możesz spokojnie używać linii poleceń w codziennej pracy. Udało Ci się poznać zestaw przydatnych cech <code class="language-plaintext highlighter-rouge">bash</code>‘a. Potrafisz swobodnie poruszać się po historii poleceń i ją modyfikować w razie potrzeby. Wiesz więcej o zmiennych środowiskowych i rozumiesz jaka jest zależność pomiędzy procesem a zmienną środowiskową. Gratulacje! :)</p>

<p>To tyle na dzisiaj, dziękuję za lekturę, trzymaj się i do następnego razu! A… zapomniałbym, jeśli uważasz, że materiał może się przydać komuś z Twoich znajomych proszę podziel się z nim odnośnikiem do artykułu. W ten sposób pomożesz mi dotrzeć do nowych czytelników, z góry dziękuję! Jeśli nie chcesz pomiąć kolejnych artykułów dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">Samouczka Programisty na Facebooku</a>.</p>

<p>Do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:regexpprogramy" role="doc-endnote">
      <p>Zupełnie inną sprawą są programy, które pozwalają na używanie wyrażeń regularnych w przekazanych parametrach. <a href="#fnref:regexpprogramy" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:inaczej" role="doc-endnote">
      <p>Chociaż szczerze mówiąc częściej używam zmiennej środowiskowej <code class="language-plaintext highlighter-rouge">PWD</code> lub wywołuję program <code class="language-plaintext highlighter-rouge">pwd</code> ;) <a href="#fnref:inaczej" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:histcontrol" role="doc-endnote">
      <p>Ten mechanizm zależy od wartości zmiennej środowiskowej <code class="language-plaintext highlighter-rouge">HISTCONTROL</code>. <a href="#fnref:histcontrol" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sygnal" role="doc-endnote">
      <p>Tak na prawdę to wysyła sygnał do procesu. To w jaki sposób ten sygnał jest obsłużony do inna sprawa. Domyślnie program jest „usypiany”. <a href="#fnref:sygnal" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:set" role="doc-endnote">
      <p>Program ten wyświetla też listę dostępnych funkcji. <a href="#fnref:set" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:rozwijanieparametrow" role="doc-endnote">
      <p>To mechanizm rozwijania parametrów, podobny do rozwijania <code class="language-plaintext highlighter-rouge">~</code> czy rozwijania <code class="language-plaintext highlighter-rouge">{}</code>. <a href="#fnref:rozwijanieparametrow" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Programista rzemieślnik" /><summary type="html"><![CDATA[W artykule poznasz kilka cech `bash`'a, które pozwolą Ci na efektywną pracę. Poznasz część mechanizmów rozwijania dostępnych w tym terminalu. Dowiesz się jak można używać historii poleceń i jak możesz ją zmieniać. Przeczytasz też o zmiennych środowiskowych w kontekście procesów. Na końcu artykułu czeka na Ciebie zestaw materiałów dodatkowych, które pomogą Ci pogłębić wiedzę z tego tematu.]]></summary></entry><entry><title type="html">Wzorzec projektowy dekorator</title><link href="https://www.samouczekprogramisty.pl/wzorzec-projektowy-dekorator/" rel="alternate" type="text/html" title="Wzorzec projektowy dekorator" /><published>2019-11-21T00:00:00+01:00</published><updated>2019-11-21T23:09:17+01:00</updated><id>https://www.samouczekprogramisty.pl/wzorzec-projektowy-dekorator</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/wzorzec-projektowy-dekorator/"><![CDATA[<p class="notice--info">Czytasz jeden z artykułów opisujących wzorce projektowe. Jeśli interesuje Cię ten temat zapraszam Cię do lektury pozostałych artykułów, które powstały w ramach tej serii – <a href="https://www.samouczekprogramisty.pl/narzedzia-i-dobre-praktyki/#wzorce-projektowe">wzorce projektowe</a>. W zrozumieniu artykułu przyda Ci się wiedza dotycząca <a href="/podstawy-uml/">podstaw UML’a</a>.</p>

<h2 id="problem-do-rozwiązania">Problem do rozwiązania</h2>

<p>Wyobraź sobie restaurację, w której możesz zjeść pizzę. Właściciel restauracji daje Ci do wyboru 10 różnych dodatków. Możesz skomponować pizzę samodzielnie używając dostępnych dodatków. Każdy z dodatków ma swoją cenę i może być użyty wyłącznie jeden raz. Właściciel restauracji mógłby wypisać wszystkie kombinacje z tych 10 dodatków. Menu miałoby wtedy <a href="https://pl.wikipedia.org/wiki/Kombinacja_bez_powt%C3%B3rze%C5%84">1023 pozycje</a>, 1024 jeśli wliczymy Margharitę… Trochę dużo ;).</p>

<p>Właściciel podszedł do sprawy inaczej. Nadal daje Ci dowolność w wyborze dodatków, jednak wycenia każdy z nich jako osobną pizzę. Na przykład pizza z szynką, pizza z bazylią, pizza z mozzarellą i tak dalej. Następnie pozwala Ci łączyć ze sobą te pizze w dowolny sposób. Na przykład pizza bez żadnych dodatków kosztuje 15zł. Pizza z szynką kosztuje o 7 zł więcej niż pizza bazowa. Pizza z bazylią kosztuje o 2 zł więcej niż pizza bazowa.</p>

<p>Dzięki takiemu podejściu w menu znajduje się 11 pozycji. Cena pizzy bez dodatków i cena każdego dodatku określona jako <em>cena pizzy bazowej + X zł</em>. Można powiedzieć, że właściciel restauracji użył wzorca dekoratora do opracowania cennika<sup id="fnref:naciagane" role="doc-noteref"><a href="#fn:naciagane" class="footnote" rel="footnote">1</a></sup>.</p>

<p>Podobne problemy występują w projektach informatycznych. Zdarzają się sytuacje, w których trzeba rozszerzyć działanie pewnego obiektu. Możliwych rozszerzeń jest wiele, jeszcze więcej jest kombinacji tych rozszerzeń. Z pomocą w rozwiązaniu tego problemu przychodzi wzorzec projektowy dekorator (ang. <em>decorator</em><sup id="fnref:wrapper" role="doc-noteref"><a href="#fn:wrapper" class="footnote" rel="footnote">2</a></sup>).</p>

<h2 id="wzorzec-dekorator">Wzorzec dekorator</h2>

<h3 id="diagramy-klas">Diagramy klas</h3>

<p>Istnieje wiele możliwości implementacji tego wzorca projektowego. Diagram klas poniżej pokazuje najprostszą z nich:</p>

<figure class="">
  <img src="/assets/images/2019/11/22_simple_decorator.svg" alt="" /><figcaption>
      Wzorzec projektowy dekorator (ang. <em>decorator</em>)

    </figcaption></figure>

<p><code class="language-plaintext highlighter-rouge">DecoratorA</code> i <code class="language-plaintext highlighter-rouge">DecoratorB</code> dekorują klasę <code class="language-plaintext highlighter-rouge">Component</code>. Dekoratory zawierają instancję klasy <code class="language-plaintext highlighter-rouge">Component</code>.</p>

<p>Często ten wzorzec projektowy przedstawiany jest w bardziej skomplikowany sposób:</p>

<figure class="">
  <img src="/assets/images/2019/11/17_decorator.svg" alt="" /><figcaption>
      Wzorzec projektowy dekorator (ang. <em>decorator</em>)

    </figcaption></figure>

<p>W tym przypadku dekoratory mają wspólnego przodka, abstrakcyjną klasę <code class="language-plaintext highlighter-rouge">Decorator</code>. Sam komponent, który jest dekorowany także jest klasą abstrakcyjną, która posiada swoje konkretne implementacje. Na diagramie wyżej jest to <code class="language-plaintext highlighter-rouge">ConcreteComponent</code>.</p>

<p>Nie są to jedyne możliwe wersje implementacji tego wzorca. Przykładem innej implementacji może być użycie interfejsów w miejscu klasy komponentu. Inną modyfikacją może być użycie kompozycji w miejscu agregacji. Obie zmiany nie wpływają znacząco na implementację tego wzorca projektowego.</p>

<p>Wzorzec projektowy dekorator pozwala na wielokrotne rozszerzenie funkcjonalności obiektu poprzez „nakładanie” na siebie dekoratorów.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="przykładowa-implementacja-dekoratora">Przykładowa implementacja dekoratora</h3>

<p>Zacznę od pizzy bazowej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pizza</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">BigDecimal</span> <span class="no">BASE_PRICE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">BASE_PRICE</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Pizza"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Ot, zwykła klasa, która reprezentuje podstawową pizzę. Posiada metodę <code class="language-plaintext highlighter-rouge">getPrice</code>, która zwraca jej cenę.</p>

<p>Poniżej możesz zobaczyć jeden z dekoratorów. W tym przypadku jest to pizza z mozzarellą:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PizzaWithMozzarella</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">BigDecimal</span> <span class="no">MOZZARELLA_PRICE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Pizza</span> <span class="n">basePizza</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PizzaWithMozzarella</span><span class="o">(</span><span class="nc">Pizza</span> <span class="n">basePizza</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">basePizza</span> <span class="o">=</span> <span class="n">basePizza</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">basePizza</span><span class="o">.</span><span class="na">getPrice</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="no">MOZZARELLA_PRICE</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">PizzaWithMozzarella</code> w konstruktorze przyjmuje jako parametr instancję klasy <code class="language-plaintext highlighter-rouge">Pizza</code>, którą opakowuje. Następnie używa jej do obliczenia ceny pizzy z mozzarellą dodając do ceny pizzy bazowej cenę sera.</p>

<p>W tym przypadku klasa <code class="language-plaintext highlighter-rouge">Pizza</code> odpowiada klasie <code class="language-plaintext highlighter-rouge">Component</code> z diagramu UML, a klasa <code class="language-plaintext highlighter-rouge">PizzaWithMozzarella</code> reprezentuje <code class="language-plaintext highlighter-rouge">DecoratorA</code>.</p>

<p>Poniżej możesz zobaczyć użycie dekoratorów w praktyce. Opakowując kolejne pizze w dekoratory otrzymuję coraz bardziej skomplikowane pozycje. Dzięki takiemu podejściu mogę łączyć dodatki w dowolny sposób:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Restaurant</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Pizza</span> <span class="n">margherita</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pizza</span><span class="o">();</span>
        <span class="nc">Pizza</span> <span class="n">withMozzarella</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PizzaWithMozzarella</span><span class="o">(</span><span class="n">margherita</span><span class="o">);</span>
        <span class="nc">Pizza</span> <span class="n">withMozzarellaAndHam</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PizzaWithHam</span><span class="o">(</span><span class="n">withMozzarella</span><span class="o">);</span>
        <span class="nc">Pizza</span> <span class="n">withMozzarellaHamAndBasil</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PizzaWithBasil</span><span class="o">(</span><span class="n">withMozzarellaAndHam</span><span class="o">);</span>

        <span class="nc">DecimalFormat</span> <span class="n">df</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DecimalFormat</span><span class="o">(</span><span class="s">"#,00 zł"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">:</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">margherita</span><span class="o">,</span> <span class="n">withMozzarella</span><span class="o">,</span> <span class="n">withMozzarellaAndHam</span><span class="o">,</span> <span class="n">withMozzarellaHamAndBasil</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s costs %s."</span><span class="o">,</span> <span class="n">pizza</span><span class="o">,</span> <span class="n">df</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">pizza</span><span class="o">.</span><span class="na">getPrice</span><span class="o">())));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="dodatkowe-rozważania">Dodatkowe rozważania</h3>

<h4 id="zalety">Zalety</h4>

<p>Jedną z często polecanych praktyk w programowaniu obiektowym jest preferowanie <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">kompozycji przed dziedziczeniem</a>. Wzorzec projektowy dekorator jest flagowym przykładem użycia tej reguły. Takie podejście pozwala na dynamiczne rozszerzanie funkcjonalności obiektu bez potrzeby kompilacji kodu.</p>

<p>Niewątpliwą zaletą dekoratora jest możliwość dowolnego łączenia istniejących dekoratorów. Każdy z nich będzie opakowywał kolejny obiekt nie mając świadomości, że jest kolejnym dekoratorem w kolejce. Jest to istotne w przypadku gdy istnieje kilka dodatkowych funkcjonalności, które powinna zawierać rozszerzana klasa.</p>

<h4 id="wady">Wady</h4>

<p>Interfejs dekoratora musi być dokładnie taki sam jak klasy dekorowanej. W niektórych językach programowania (na przykład w Javie) może prowadzić to do klas, które mają sporo metod, których implementacja polega na przekazaniu wywołania do dekorowanego obiektu (jeśli dekorator implementuje interfejs). Tę wadę można rozwiązać stosując dziedziczenie<sup id="fnref:hierarchia" role="doc-noteref"><a href="#fn:hierarchia" class="footnote" rel="footnote">3</a></sup>.</p>

<p>Dekorator często jest „płaską klasą”. Rozszerza on dekorowaną klasę o jedną, podstawową funkcjonalność. Prowadzić to może do sytuacji, w której system zawiera wiele niewielkich klas. W sytuacji gdy zazwyczaj używa się stałego zbioru dekoratorów użycie standardowego dziedziczenia może ograniczyć tę liczbę.</p>

<h2 id="przykłady-użycia-wzorca-dekorator">Przykłady użycia wzorca dekorator</h2>

<p>W przypadku języka Java wzorzec projektowy dekorator jest dość często używany w bibliotece standardowej. Za przykład mogą tu posłużyć strumienie wykorzystywane przy <a href="/operacje-na-plikach-w-jezyku-java/">operacjach na plikach</a>. <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/InputStream.html"><code class="language-plaintext highlighter-rouge">InputStream</code></a> jest klasą abstrakcyjną, która posiada wiele dekoratorów, na przykład <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/FileInputStream.html"><code class="language-plaintext highlighter-rouge">FileInputStream</code></a> czy <a href=""><code class="language-plaintext highlighter-rouge">BufferedInputStream</code></a>.</p>

<p>Innym przykładem, również z języka Java, mogą być dekoratory kolekcji. Dekoratory te na przykład pozwalają na utworzenie kolekcji, która jest synchronizowana czy niemodyfikowalna. <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Collections.html"><code class="language-plaintext highlighter-rouge">Collections</code></a> zawiera szereg metod zaczynających się od <code class="language-plaintext highlighter-rouge">synchronized</code> albo <code class="language-plaintext highlighter-rouge">unmodifiable</code>, które tworzą instancje dekoratorów.</p>

<p>W języku Python istnieje składnia, która pozwala na łatwe użycie dekoratorów. Można powiedzieć, że ten wzorzec projektowy został wbudowany w język. Notacja <code class="language-plaintext highlighter-rouge">@dekorator</code> pozwala dekorować zarówno klasy jak i funkcje. Przykładami dekoratorów dostępnych w bibliotece standardowej mogą być <code class="language-plaintext highlighter-rouge">@property</code>, <code class="language-plaintext highlighter-rouge">@contextlib.contextmanager</code> czy <code class="language-plaintext highlighter-rouge">@functools.wraps</code>.</p>

<h2 id="zadanie-do-wykonania">Zadanie do wykonania</h2>

<p>Chociaż klasy reprezentujące pizze z dodatkami spełniają swoje zadanie mogą być ulepszone. Zwróć uwagę, że klasy te są do siebie bardzo podobne. <a href="/jakosc-kodu-a-oschle-pocalunki-jagny/">Duplikacja kodu jest zła</a>, zrefaktoryzuj kod w taki sposób aby usunąć tę duplikację. Spróbuj rozwiązać ten problem używając bardziej skomplikowanej wersji dekoratorów z drugiego diagramu UML.</p>

<p>Jak zwykle zachęcam Cię do samodzielnego rozwiązania zadania, w ten sposób nauczysz się najwięcej. Możesz też porównać swoje rozwiązanie z <a href="https://github.com/SamouczekProgramisty/WzorceProjektowe/tree/master/java/03_decorator/src/main/java/pl/samouczekprogramisty/patterns/decorator/exercise">przykładowym</a>.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Niezmiennie, we wszystkich artykułach z serii poświęconej wzorcom projektowym polecam książkę <a href="https://www.amazon.com/gp/product/0201633612/">Design Patterns – Gamma, Helm, Johnson, Vlissides</a>. Jeśli miałbym polecić wyłącznie jedno źródło to poprzestałbym na tej książce.</p>

<p>Warto także rzucić okiem do <a href="https://pl.wikipedia.org/wiki/Dekorator_(wzorzec_projektowy)">polskiej</a> i <a href="https://en.wikipedia.org/wiki/Decorator_pattern">angielskiej Wikipedii</a> gdzie znajdziesz artykuły dotyczące tego wzorca projektowego.</p>

<p>Zachęcam Cię też do zajrzenia do <a href="https://github.com/SamouczekProgramisty/WzorceProjektowe/tree/master/java/03_decorator/src/main/java/pl/samouczekprogramisty/patterns/decorator">kodu źródłowego</a>, którego użyłem w tym artykule.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Po lekturze tego artykułu wiesz czym jest wzorzec dekorator. Znasz przykładowy sposób jego implementacji. Masz też zestaw materiałów dodatkowych, które pozwolą Ci spojrzeć na temat z innej strony. Po rozwiązaniu zadania wiesz jak zaimplementować ten wzorzec samodzielnie. Innymi słowy udało Ci się właśnie poznać kolejny wzorzec projektowy. Gratulacje! ;)</p>

<p>Jeśli artykuł przypadł Ci do gustu proszę podziel się nim ze znajomymi. Dzięki temu pozwolisz mi dotrzeć do nowych Czytelników, za co z góry dziękuję. Jeśli nie chcesz pomiąć kolejnych artykułów dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">Samouczka Programisty na Facebooku</a>.</p>

<p>Do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:naciagane" role="doc-endnote">
      <p>Ten przykład jest trochę naciągany. Sam dodatek nie jest pizzą, ale pizza z dodatkiem już tak. Jest to coś najbliższego światu rzeczywistemu co jest „dekoratorem” i powinno być łatwe do zrozumienia. <a href="#fnref:naciagane" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:wrapper" role="doc-endnote">
      <p>Inną nazwą tego wzorca projektowego, z którą możesz się spotkać jest <em>wrapper</em>. <a href="#fnref:wrapper" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:hierarchia" role="doc-endnote">
      <p>Takie podejście może wydłużać hierarchię dziedziczenia, sam preferuję użycie interfejsów jeśli hierarchia dziedziczenia jest dość długa. <a href="#fnref:hierarchia" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Wzorce projektowe" /><summary type="html"><![CDATA[W tym artykule przeczytasz o jednym z wzorców projektowych – o dekoratorze. Na przykładzie pokażę Ci sposób jego użycia i implementacji. Diagramy UML pomogą Ci zrozumieć relację pomiędzy klasami w tym wzorcu projektowym. Ćwiczenie zawarte na końcu artykułu pozwoli Ci sprawdzić wiedzę w praktyce.]]></summary></entry><entry><title type="html">Podstawy UML</title><link href="https://www.samouczekprogramisty.pl/podstawy-uml/" rel="alternate" type="text/html" title="Podstawy UML" /><published>2019-09-21T00:00:00+02:00</published><updated>2020-11-11T11:24:56+01:00</updated><id>https://www.samouczekprogramisty.pl/podstawy-uml</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/podstawy-uml/"><![CDATA[<p class="notice--info">W artykule opisuję wyłącznie moje doświadczenia. Możliwe, że ktoś ma zupełnie inne. Z chęcią poznam Twój punkt widzenia w komentarzach. Proszę weź też pod uwagę to, że lepiej czuję się w mniejszych firmach niż ustrukturyzowanych korporacjach – ma to wpływ na moje zdanie na temat UML’a.</p>

<p>Jak mówi znane powiedzenie „jeden obraz jest wart tysiąca słów”. Takie przypadki zdarzają się także w programowaniu. Często w trakcie projektowania czy rozmawiania na temat fragmentu oprogramowania programistom dużo łatwiej jest się porozumieć rysując. Takie rysunki mogą opisywać ogólną architekturę projektu, sposób podejścia do rozwiązania, kolejność zdarzeń w ramach procesu itd. Dobrze jest mieć wspólny język. W tym przypadku pomocny może być UML.</p>

<h2 id="czym-jest-uml">Czym jest UML</h2>

<p>UML to akronim pochodzący od angielskiego określenia <em>Unified Modeling Language</em>. W polskim tłumaczeniu znany jest jako zunifikowany język modelowania. UML to jasno wyspecyfikowany język składający się z kilkunastu diagramów. Diagramy te pozwalają na formalne opisywanie i modelowanie struktur czy procesów.</p>

<h2 id="czy-warto-uczyć-się-umla">Czy warto uczyć się UML’a</h2>

<p>Odpowiadając na tak postawione pytanie w jednym zdaniu mogę powiedzieć, że z mojego doświadczenia UML jest ważny i warto znać jego podstawy. Chociażby po to żeby rozszerzyć swój „słownik”, który później możemy użyć w trakcie rozmowy na temat programowania z inną osobą. UML to kolejne narzędzie, które możesz używać w odpowiednich sytuacjach. Rysunek, który usuwa zbędne szczegóły pokazując najbardziej istotne aspekty jest niezastąpiony.</p>

<p>Jednak to tylko część rzeczywistości. UML jest ważny, między innymi z wyżej wspomnianych powodów. Jednak ten sam UML to kobyła. <a href="https://www.omg.org/spec/UML/2.5.1/PDF">Specyfikacja UML w wersji 2.5.1</a> zawiera 754 strony! Pracując jako programista od 2007 roku w całej swojej karierze nie spotkałem ani jednej osoby, która fanatycznie przestrzegałaby reguł opisujących UML’a<sup id="fnref:ekspert" role="doc-noteref"><a href="#fn:ekspert" class="footnote" rel="footnote">1</a></sup>. Część funkcjonalność UML’a bardzo rzadko albo w ogóle nie jest wykorzystywana w praktyce.</p>

<p>Innymi słowy: tak, warto poznać UML’a, jednak wybiórczo.</p>

<h2 id="czy-uml-jest-używany-w-pracy-związanej-z-oprogramowaniem">Czy UML jest używany w pracy związanej z oprogramowaniem</h2>

<p>Na początku muszę powiedzieć Ci trochę o moich doświadczeniach. Po kilku latach pracy zauważyłem, że nie czuję się dobrze w korporacjach. Projekty, które wykorzystują „ciężkie metodologie” do ich prowadzenia też raczej nie są dla mnie. Mimo pracy jako programista od 2007 roku doświadczyłem wyłącznie niedużej części dużego świata firm IT. Bardzo możliwe, że w środowisku, którego nie lubię nacisk na „czystego UML’a” jest większy.</p>

<p>Z mojego doświadczenia UML jest wykorzystywany w nieformalny sposób. To tak jak z językiem obcym – najważniejsza jest komunikacja. Możesz robić mnóstwo błędów, jeśli jednak potrafisz się dogadać z drugą stroną to jesteś w domu. Właśnie komunikacja i umiejętność przekazywania informacji jest tu kluczowa. Innymi słowy jeśli będziesz znać podstawy najbardziej istotnych diagramów, to ta wiedza powinna być wystarczająca.</p>

<p>Taki punkt widzenia potwierdza też <a href="https://empirical-software.engineering/assets/pdf/fse14-sketches.pdf">badanie przeprowadzone na grupie programistów, testerów, architektów czy kierowników projektów</a><sup id="fnref:proba" role="doc-noteref"><a href="#fn:proba" class="footnote" rel="footnote">2</a></sup>. Wynik przeprowadzonej ankiety potwierdza, że UML używany jest raczej nieformalnie.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h2 id="narzędzia">Narzędzia</h2>

<p>UML to diagram, rysunek. Do efektywnej pracy przyda Ci się zestaw narzędzi pozwalający tworzyć te diagramy.</p>

<p>Przede wszystkim polecam tablicę i marker (lub kartkę i długopis). To zdecydowanie najczęściej używane narzędzia przy pracy z nieformalnymi diagramami.</p>

<p>W trakcie pracy nad Samouczkiem, szczególnie pracując na artykułami dotyczącymi <a href="https://www.samouczekprogramisty.pl/narzedzia-i-dobre-praktyki/#wzorce-projektowe">wzorców projektowych</a> używam programów <a href="https://www.umlet.com">UMLet</a> i <a href="https://www.yworks.com/downloads#yEd">yED</a>. Są to darmowe programy, które pozwalają na tworzenie niektórych rodzajów diagramów UML. Istotne w nich dla mnie jest to, że same programy są proste a tworzone diagramy zapisane są w postaci tekstowej (można je eksportować do formatów graficznych). Format tekstowy świetnie nadaje się do zapisania w <a href="https://www.samouczekprogramisty.pl/kurs-git/">repozytorium git’a</a>.</p>

<p>Istnieje całkiem sporo narzędzi, które mają dużo większe możliwości, jednak dla komercyjnych zastosowań są płatne.</p>

<h2 id="najczęściej-używane-diagramy-uml">Najczęściej używane diagramy UML</h2>

<p>Wspominałem to już wcześniej, jednak powtórzę to po raz kolejny. Poniżej prezentuję wyłącznie podzbiór diagramów. Skupiam się wyłącznie na tych, które doczekały się swojego praktycznego zastosowania w mojej dotychczasowej pracy komercyjnej. Pomijam diagramy, które wymagane były tylko w trakcie projektów na uczelni. Dodatkowo nie opisuję tu wszystkich możliwości, a jedynie te najczęściej używane.</p>

<p>Poniżej pokazałem diagram UML, który zawiera wszystkie dostępne diagramy. Na zielono oznaczyłem wyłącznie te, które opisuję w tym artykule:</p>

<figure class="">
  <img src="/assets/images/2019/11/25_diagramy_uml.svg" alt="" /><figcaption>
      Diagramy w UML

    </figcaption></figure>

<h3 id="diagram-klas">Diagram klas</h3>

<p>Diagram klas (ang. <em>class diagram</em>) to chyba najczęściej używany diagram. Służy do pokazania klas i zależności między nimi. Pozwala na szczegółowy opis klas zwracając uwagę na dostępne atrybuty i operacje. Ta szczegółowość pozwala na generowanie kodu na podstawie kompletnego diagramu. W praktyce nigdy nie spotkałem się z takim zastosowaniem. Diagram klas pozwala na „narysowanie” wycinka większego systemu. Jest on jednym z najbardziej rozbudowanych diagramów w notacji UML.</p>

<h4 id="klasa">Klasa</h4>

<p>Zacznę od pokazania symbolu klasy:</p>

<figure class="">
  <img src="/assets/images/2019/09/26_class.svg" alt="" /><figcaption>
      Klasa w diagramie klas

    </figcaption></figure>

<p>Klasa reprezentowana jest przez prostokąt podzielony na kilka części. W pierwszej z nich znajduje się nazwa klasy. W przykładzie jest to <code class="language-plaintext highlighter-rouge">Customer</code>. Następna sekcja zawiera atrybuty, kolejna metody.</p>

<p>Elementy, które są podkreślone oznaczają elementy statyczne. Na przykład atrybut <code class="language-plaintext highlighter-rouge">DEFAULT_PROMO_CODE</code> jest statycznym atrybutem klasy. Elementy pisane kursywą są abstrakcyjne (może dotyczyć także samej klasy), na przykład metoda <code class="language-plaintext highlighter-rouge">fetchPromoCode</code> jest abstrakcyjna.</p>

<p>Zarówno atrybuty jak i operacje mogą być poprzedzone symbolem. Dopuszczalne są między innymi:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">+</code> – element publiczny,</li>
  <li><code class="language-plaintext highlighter-rouge">#</code> – element „chroniony” (może odpowiadać <code class="language-plaintext highlighter-rouge">protected</code> w języku Java),</li>
  <li><code class="language-plaintext highlighter-rouge">-</code> – element prywatny.</li>
</ul>

<p>Klasa w przykładzie ma cztery atrybuty. Trzy atrybuty instancji i jeden atrybut klasy (statyczny). Atrybuty zapisywane są w formacie <code class="language-plaintext highlighter-rouge">nazwa:typ</code>. Ta sama klasa ma trzy metody. Prywatną metoda <code class="language-plaintext highlighter-rouge">modifyOrderStats</code> i dwie metody publiczne. Zwróć uwagę na to, że metody mogą mieć określone typy parametrów i wartości zwracanej.</p>

<p>W podobny sposób oznacza się interfejs. W odróżnieniu od klasy zawiera on tak zwany stereotyp <code class="language-plaintext highlighter-rouge">«interface»</code>. Na diagramie powyżej <code class="language-plaintext highlighter-rouge">NotificationPipe</code> jest interfejsem zawierającym dwie metody. Zauważ, że w tym przypadku pominąłem symbole określające dostępność metod.</p>

<p>Atrybuty klas mogą być także opisane przez relacje pomiędzy klasami.</p>

<h4 id="relacje">Relacje</h4>

<p>Pomiędzy klasami mogą występować relacje. Przykładem relacji jest <a href="/dziedziczenie-w-jezyku-java/">dziedziczenie</a>. Relacje reprezentowane są przez różne symbole. Proszę spójrz na rysunek poniżej, na którym zebrałem możliwe relacje:</p>

<figure class="">
  <img src="/assets/images/2019/09/26_relations.svg" alt="" /><figcaption>
      Przykładowe pomiędzy klasami

    </figcaption></figure>

<p>Zacznę od lewej kolumny. Pierwsza przerywana strzałka reprezentuje <em>implementację</em>. Jest używana do tego żeby pokazać jaki interfejs jest implementowany przez klasę. Druga oznacza <em>dziedziczenie</em>. W tym przypadku grot wskazuje klasę nadrzędną.</p>

<p>W prawej kolumnie znajdują się strzałki pokazujące relacje pomiędzy klasami inne niż implementacja czy dziedziczenie. Posegregowałem je w rosnąco według tego jak silne są relacje przez nie opisywane.</p>

<p>Relacje ze strzałkami mogą być jednokierunkowe albo dwukierunkowe. W przypadku relacji jednokierunkowej strona bez grota używa strony, na którą pokazuje grot. W przypadku braku grota relacja jest dwukierunkowa. Trochę inaczej sprawa wygląda z rombami. Opiszę to jak poznasz rodzaje relacji.</p>

<p>Najsłabszą relacją pomiędzy klasami jest <em>zależność</em>. Reprezentowana jest przez przerywaną linię. <em>Zależność</em> oznacza, że jedna klasa w pewnym momencie używa innej, na przykład jako parametr, czy wartość zwracana metody. W przypadku <em>zależności</em> klasa, od której zależymy nie jest zapisana jako atrybut. Przykładem <em>zależności</em> w bibliotece standardowej Javy może być zależność <code class="language-plaintext highlighter-rouge">Integer</code> od <code class="language-plaintext highlighter-rouge">String</code>, widać ją na przykład w metodzie <code class="language-plaintext highlighter-rouge">Integer.valueOf(String)</code>.</p>

<p>Kolejnym rodzajem relacji jest <em>asocjacja</em>. W tym przypadku jest to zapis, który może zastąpić atrybut klasy – jeśli nie chcesz dodawać atrybut w prostokącie reprezentującym klasę możesz użyć <em>asocjacji</em>. Przykładem <em>asocjacji</em> w bibliotece standardowej Javy może być <code class="language-plaintext highlighter-rouge">FileInputStream</code> i <code class="language-plaintext highlighter-rouge">String</code>. Klasa <code class="language-plaintext highlighter-rouge">FileInputStream</code> posiada atrybut typu <code class="language-plaintext highlighter-rouge">String</code> reprezentujący ścieżkę do pliku.</p>

<p>Kolejną relacją jest <em>agregacja</em>. <em>Agregacja</em> wprowadza w relacji stronę, która jest „właścicielem”. Jedna klasa agreguje inną. Relacja tego typu oznaczona jest przez ciągłą linię z pustym rombem po stronie właściciela. W bibliotece standardowej tego typu relacja występuje pomiędzy <code class="language-plaintext highlighter-rouge">ArrayList</code> a klasą, której instancje przechowuje<sup id="fnref:object" role="doc-noteref"><a href="#fn:object" class="footnote" rel="footnote">3</a></sup>.</p>

<p>Ostatnią relacją jest <em>kompozycja</em>. <em>Kompozycja</em> jest bardzo podobna do <em>agregacji</em>. Jest między nimi jedna znacząca różnica. W przypadku <em>kompozycji</em> „właściciel” jest odpowiedzialny za tworzenie (cykl życia) elementów, które grupuje. Przykładem <em>kompozycji</em> w bibliotece standardowej Javy może być implementacja <code class="language-plaintext highlighter-rouge">HashMap</code>, która zarządza elementami w kolekcji opakowując je w instancje <code class="language-plaintext highlighter-rouge">HashMap.Node</code>, które tworzy.</p>

<p>Proszę spójrz na diagram poniżej (dla czytelności pominąłem w nim atrybuty i operacje). Pokażę Ci na nim przykładowe relacje pomiędzy klasami:</p>

<figure class="">
  <img src="/assets/images/2019/09/26_example_relations.svg" alt="" /><figcaption>
      Możliwe relacje pomiędzy klasami

    </figcaption></figure>

<ul>
  <li>klasa <code class="language-plaintext highlighter-rouge">LargeItem</code> implementuje interfejs <code class="language-plaintext highlighter-rouge">Item</code> – <em>implementacja</em>,</li>
  <li>klasy <code class="language-plaintext highlighter-rouge">VIP</code> i <code class="language-plaintext highlighter-rouge">OrdinaryCustomer</code> dziedziczą po klasie abstrakcyjnej <code class="language-plaintext highlighter-rouge">Customer</code> – <em>dziedziczenie</em>,</li>
  <li>klasa <code class="language-plaintext highlighter-rouge">OrderCalculator</code> używa klasy <code class="language-plaintext highlighter-rouge">Basket</code> – <em>zależność</em>,</li>
  <li>klasa <code class="language-plaintext highlighter-rouge">Basket</code> wie o kliencie z którym jest powiązana (klasie <code class="language-plaintext highlighter-rouge">Customer</code>), odwrotne stwierdzenie także jest prawdziwe – <em>asocjacja</em>,</li>
  <li>klasa <code class="language-plaintext highlighter-rouge">Basket</code> może zawierać wiele instancji klasy <code class="language-plaintext highlighter-rouge">Item</code> – <em>agregacja</em>,</li>
  <li>klasa <code class="language-plaintext highlighter-rouge">VIP</code> zawiera wiele instancji klasy <code class="language-plaintext highlighter-rouge">BonusCode</code> i zarządza ich cyklem życia – kompozycja.</li>
</ul>

<p>Wiesz już, że strzałeczka oznacza kierunek relacji. Na przykład asocjacja pomiędzy <code class="language-plaintext highlighter-rouge">ItemBundle</code> a <code class="language-plaintext highlighter-rouge">Item</code> jest jednokierunkowa. <code class="language-plaintext highlighter-rouge">ItemBundle</code> wie o powiązanej klasie <code class="language-plaintext highlighter-rouge">Item</code>, <code class="language-plaintext highlighter-rouge">Item</code> zaś nie wie nic o <code class="language-plaintext highlighter-rouge">ItemBundle</code>. Jeśli strzałeczka nie jest umieszczona oznacza to, że relacja jest dwukierunkowa – można „przejść” z jednej klasy do drugiej w obu kierunkach<sup id="fnref:uproszczenie" role="doc-noteref"><a href="#fn:uproszczenie" class="footnote" rel="footnote">4</a></sup>.</p>

<p>Trochę inaczej wygląda sprawa w relacjach <em>agregacji</em> i <em>kompozycji</em>. W tym przypadku romby oznaczają stronę, która agreguje drugą stronę relacji. Na powyższym przykładzie klasa <code class="language-plaintext highlighter-rouge">VIP</code> zarządza cyklem życia <code class="language-plaintext highlighter-rouge">BonusCode</code>. <code class="language-plaintext highlighter-rouge">BonusCode</code> nic nie wie o klasie <code class="language-plaintext highlighter-rouge">VIP</code>.</p>

<p>Nowością dla Ciebie jest także komentarz do relacji (contains), który może ją opisywać. Nowe są także oznaczenia pokazujące liczność. W powyższym przykładzie jeden koszyk może zawierać wiele elementów (<code class="language-plaintext highlighter-rouge">0..*</code>).</p>

<h4 id="relacje-dwukierunkowe">Relacje dwukierunkowe</h4>

<p>Wiesz już jak oznaczana jest dwukierunkowa relacja <em>zależności</em>. Na przykładzie wyżej pokazałem ją pomiędzy klasami <code class="language-plaintext highlighter-rouge">Customer</code> i <code class="language-plaintext highlighter-rouge">Basket</code>. W praktyce występują też bardziej zagmatwane przypadki. Wyobraź sobie klasę reprezentująca książkę – <code class="language-plaintext highlighter-rouge">Book</code>. Książka ma autora – <code class="language-plaintext highlighter-rouge">Author</code>. Jedna książka może być napisana przez wielu autorów, a jeden autor może napisać wiele książek. To klasyczna relacja „wiele do wielu”.</p>

<p>Często tego typu relacje wprowadzają nową klasę, która reprezentuje samą relację. W tym przypadku byłoby to autorstwo – <code class="language-plaintext highlighter-rouge">Authorship</code>. Poniższy diagram pokazuje przykładowe sposoby przedstawienia sytuacji tego typu na diagramie UML<sup id="fnref:sql" role="doc-noteref"><a href="#fn:sql" class="footnote" rel="footnote">5</a></sup>.</p>

<figure class="">
  <img src="/assets/images/2019/10/05_many_to_many.svg" alt="" /><figcaption>
      Przykład relacji dwukierunkowych

    </figcaption></figure>

<p>W pierwszym przypadku <code class="language-plaintext highlighter-rouge">Author</code> przechowuje kolekcję <code class="language-plaintext highlighter-rouge">Book</code> i zarządza ich cyklem życia. <code class="language-plaintext highlighter-rouge">Book</code> wie o liście swoich autorów.</p>

<p>W drugim przypadku <code class="language-plaintext highlighter-rouge">Author</code> przechowuje kolekcję swoich „autorstw”. Podobną kolekcję przechowuje także <code class="language-plaintext highlighter-rouge">Book</code>.</p>

<h3 id="diagram-komponentów">Diagram komponentów</h3>

<p>Wiesz już, że diagram klas pozwala zobaczyć powiązania pomiędzy klasami w wąskiej części systemu. Diagram komponentów (ang. <em>component diagram</em>) pozwala spojrzeć na projekt z większej odległości. W diagram komponentów kluczową rolę odgrywają komponenty. Proszę spójrz na przykładowy symbol komponentu:</p>

<figure class="">
  <img src="/assets/images/2019/09/27_component.svg" alt="" /><figcaption>
      Przykładowy komponent

    </figcaption></figure>

<p>Jak widzisz komponent to prostokąt ze specyficzną ikonką w prawym górnym rogu. Komponent na rysunku wymaga jeden interfejs i sam dostarcza dwa. Komponent <code class="language-plaintext highlighter-rouge">UserManagement</code> wymaga dostępu do interfejsu <code class="language-plaintext highlighter-rouge">persistence</code> a sam zapewnia dwa inne <code class="language-plaintext highlighter-rouge">register</code> i <code class="language-plaintext highlighter-rouge">ban</code>.</p>

<p>Interfejs to kreska z kółkiem (interfejs udostępniany przez komponent) lub kreska z półkolem (interfejs wymagany przez komponent). Relacje pomiędzy komponentami odbywają się poprzez interfejsy. Można powiedzieć, że komponenty łączy relacja <em>zależności</em> – najsłabsza z typów relacji występująca w diagramie klas.</p>

<h4 id="czym-jest-komponent">Czym jest komponent</h4>

<p>Wiesz już jak wygląda symbol komponentu i interfejsów. Tylko czym ten komponent właściwie jest? Cytując za specyfikacją:</p>

<blockquote>
  <p>A Component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.</p>
</blockquote>

<p>Powyższe zdanie można przetłumaczyć jako: komponent reprezentuje wydzieloną, opakowaną część systemu, której reprezentacja jest wymienna w ramach swojego środowiska.</p>

<p>A teraz raz jeszcze, moimi słowami. Komponent to część systemu, która ma swoje interfejsy. Interfejsy czyli dokładnie określone sposoby komunikacji. Interfejsy służą do komunikacji z pozostałymi komponentami. Każdy z komponentów można zastąpić inną implementacją. Istotne jest to, że każda implementacja musi spełniać wymagania dotyczące jego interfejsów.</p>

<p>Jak widzisz definicja komponentów jest dość luźna. Do tego worka można wsadzić bardzo dużo rzeczy. Zaczynając od rozbudowanej implementacji w jednej klasie, poprzez ich zestaw znajdujący się w jednym pakiecie/module a na sporej części aplikacji kończąc. Ty jako autor diagramu sam decydujesz o tym do jakiego poziomu komponentów chcesz zejść. Istotne jest to, żeby poziom ten był spójny i prezentował wszystkie komponenty na diagramie „z podobnej odległości”.</p>

<h4 id="przykładowy-diagram-komponentów">Przykładowy diagram komponentów</h4>

<p>Proszę spójrz na przykładowy diagram komponentów systemu, który może być odpowiedzialny za rezerwację biletów lotniczych:</p>

<p>Możesz na nim zobaczyć kilka komponentów, które są od siebie zależne. Każdy z nich definiuje interfejsy, które pozwalają komunikować się z innymi komponentami. Dla uproszczenia pominąłem opisowe nazwy interfejsów:</p>

<figure class="">
  <img src="/assets/images/2019/10/01_example_components.svg" alt="" /><figcaption>
      Przykładowy diagram komponentów

    </figcaption></figure>

<h3 id="diagram-wdrożenia">Diagram wdrożenia</h3>

<p>Przedstawiłem Ci już diagram klas i diagram komponentów. Wiesz już, że na system można spojrzeć z różnej odległości zwracając uwagę na coraz mniej szczegółów. Kolejnym stopniem ukrywającym szczegóły może być diagram wdrożenia (ang. <em>deployment diagram</em>).</p>

<p>Każdy działający projekt/aplikacja składa się z dwóch niezbędnych elementów. Oprogramowania (ang. <em>software</em>) i sprzętu (ang. <em>hardware</em>). Zauważ, że żaden z powyżej omówionych diagramów nie poruszał tematyki sprzętu. Tę lukę wypełnia diagram wdrożenia. Diagram wdrożenia służy do odwzorowania zależności pomiędzy oprogramowaniem i/lub sprzętem. To właśnie na diagramie wdrożenia można pokazać sposób w jaki aplikacja/projekt powinien być zainstalowany/wdrożony.</p>

<p>Także tutaj specyfikacja UML pozwala na dużą dowolność jeśli chodzi o szczegóły. Ty jako autor diagramu decydujesz, czy potrzebna jest dokładna specyfikacja poszczególnych elementów sprzętowych, czy zgrubna informacja w zupełności wystarczy.</p>

<p>Na początku swojej przygody z programowaniem ten diagram nie będzie Ci do niczego potrzebny. W późniejszym czasie bardzo pomoże Ci przy rozmowach na temat sposobu wdrożenia projektu.</p>

<h4 id="elementy-diagramu-wdrożenia">Elementy diagramu wdrożenia</h4>

<p>Przykład poniżej pokazuje elementy, które możesz spotkać na diagramach wdrożenia:</p>

<figure class="">
  <img src="/assets/images/2019/10/01_deployments.svg" alt="" /><figcaption>
      Elementy diagramu wdrożenia

    </figcaption></figure>

<p>Kolejno od lewej na rysunku możesz zobaczyć:</p>

<ul>
  <li>serwer typu <code class="language-plaintext highlighter-rouge">n2-highmem-64</code>,</li>
  <li>element o nazwie Nginx, który reprezentuje serwer HTTP,</li>
  <li>element Deployment, który wewnątrz zawiera artefakt o nazwie Artifact.</li>
</ul>

<p>Zauważ, że podobnie jak w przypadku diagramu klas wstępują tu stereotypy, które dodają informacje. Mimo tego, że poszczególne części diagramu reprezentują zupełnie różne rzeczy, UML stosuje jedną graficzną reprezentację. W przypadku tego diagramu zupełnie nie przejmowałbym się sugestiami specyfikacji – w praktyce często spotyka się różnego rodzaju ikonki, które pozwalają lepiej zobrazować poszczególne elementy.</p>

<h4 id="przykładowy-diagram-wdrożenia">Przykładowy diagram wdrożenia</h4>

<p>Proszę spójrz na przykład poniżej, który mógłby być diagramem wdrożenia dla aplikacji pozwalającej na rezerwację biletów:</p>

<figure class="">
  <img src="/assets/images/2019/10/01_example_deployments.svg" alt="" /><figcaption>
      Przykładowy diagram wdrożenia

    </figcaption></figure>

<p>Na diagramie wyżej możesz zobaczyć kilka oddzielnych klastrów (zestawów maszyn), przeznaczonych do wdrożenia poszczególnych komponentów. Kreski łączące komponenty obrazują powiązania między nimi.</p>

<h3 id="diagram-sekwencji">Diagram sekwencji</h3>

<p>Trzy poprzednie diagramy dotyczyły relacji pomiędzy elementami. Diagram sekwencji (ang. <em>sequence diagram</em>) jest jednym z tak zwanych diagramów interakcji. Kładzie on nacisk na komunikację, która odbywa się pomiędzy poszczególnymi klasami/obiektami. Diagram sekwencji pokazuje dokładnie sekwencję wykonania metod w poszczególnych obiektach. Diagram ten przydaje się do pokazania przebiegu skomplikowanej komunikacji.</p>

<h4 id="elementy-diagramu-sekwencji">Elementy diagramu sekwencji</h4>

<p>Każdy z obiektów reprezentowany jest jako prostokąt połączony z pionową kreską. Ta linia oznacza „linię życia” – czas życia obiektu. Na diagramie może występować także tak zwany aktor. Aktor to człowiek albo system, który może brać udział w komunikacji. Proszę spójrz na przykład:</p>

<figure class="">
  <img src="/assets/images/2019/10/02_sequence.svg" alt="" /><figcaption>
      Przykładowy diagram sekwencji

    </figcaption></figure>

<p>Wąskie pionowe prostokąty na liniach życia oznaczają czas, w którym dany aktor/obiekt był aktywny. Aktywność była niezbędna do wypełnienia żądania, które dany obiekt wysłał/otrzymał.</p>

<p>Niektóre obiekty mogą żyć krócej niż pozostałe. Koniec życia obiektu zaznaczany jest przez znak <code class="language-plaintext highlighter-rouge">X</code> na ich linii życia.</p>

<p>Diagram, który pokazałem powyżej może służyć jako przykład opisujący mechanizm wysyłania wiadomości e-mail. Na początku aktor inicjalizuje proces, <code class="language-plaintext highlighter-rouge">Instance 1</code> obsługuje akcję <code class="language-plaintext highlighter-rouge">sendEmail</code> przekazując ją asynchronicznie do <code class="language-plaintext highlighter-rouge">Instance 2</code>. Następnie dwukrotnie sprawdza czy wysłanie wiadomości się powiodło, po czym zwraca informację do aktora.</p>

<h4 id="rodzaje-komunikatów">Rodzaje komunikatów</h4>

<p>Wiesz już, że pionowe kreski oznaczają linię życia. Im wyżej na diagramie, tym wcześniej coś się wydarzyło. Poziome kreski oznaczają komunikaty. Jak widzisz istnieje kilka rodzajów komunikatów:</p>

<figure class="">
  <img src="/assets/images/2019/10/02_invocations.svg" alt="" /><figcaption>
      Rodzaje komunikatów

    </figcaption></figure>

<p>Strzałki w lewej kolumnie oznaczają komunikaty synchroniczne. Strzałka z ciągłą liną oznacza wysłanie komunikatu, strzałka z przerywaną linią otrzymanie odpowiedzi. W prawej kolumnie pokazałem strzałkę reprezentującą asynchroniczne wysłanie komunikatu.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Jak wspomniałem na początku artykułu nie było moim zamiarem wyczerpanie tematu. Celowo skupiłem się wyłącznie na diagramach, które moim zdaniem są najczęściej używane. Ponadto pominąłem sporą część możliwości, których nie używałem w praktyce. Właśnie te diagramy były dla mnie najbardziej przydatne w sesjach przy tablicach z kolegami z pracy. Jeśli jednak temat UML Cię zainteresował zapraszam Cię do zapoznania się z zestawem materiałów dodatkowych. Zacznę od materiałów oficjalnych:</p>

<ul>
  <li><a href="https://www.uml.org/">Oficjalna strona UML’a</a>,</li>
  <li><a href="https://www.omg.org/spec/UML/2.5.1/PDF">Specyfikacja UML 2.5.1</a> – jest niezastąpiona jeśli potrzebujesz zajrzeć do źródła i chcesz poznać wszystkie szczegóły, w innym przypadku gorąco nie polecam.</li>
</ul>

<p>Dodatkowo mam dla Ciebie artykuł podsumowujący <a href="https://empirical-software.engineering/assets/pdf/fse14-sketches.pdf">badanie na temat użycia diagramów w praktyce</a>.</p>

<p>Uczelnie techniczne często mają osobne kursy poświęcone tematyce UML’a. Czasami jest też tak, że UML zajmuje część wykładu dotyczącego na przykład inżynierii oprogramowania. Przygotowałem dla Ciebie zestaw odnośników do materiałów przygotowanych na uczelniach:</p>

<ul>
  <li><a href="http://wazniak.mimuw.edu.pl/images/7/76/Io-5-wyk.pdf">Fragment wykładu z UW dotyczący UML’a część I</a>,</li>
  <li><a href="http://wazniak.mimuw.edu.pl/images/f/f3/Io-6-wyk.pdf">Fragment wykładu z UW dotyczący UML’a część II</a>,</li>
  <li>Opis <a href="https://brasil.cel.agh.edu.pl/~09sbfraczek/diagram-klas%2c1%2c11.html">diagramu klas</a> w materiałach dla studentów AGH,</li>
  <li>Opis <a href="https://brasil.cel.agh.edu.pl/~09sbfraczek/diagram-komponentow%2c1%2c17.html">diagramu komponentów</a> w materiałach dla studentów AGH,</li>
  <li>Opis <a href="https://brasil.cel.agh.edu.pl/~09sbfraczek/diagram-wdrozenia%2c1%2c20.html">diagramu wdrożenia</a> w materiałach dla studentów AGH,</li>
  <li>Opis <a href="https://brasil.cel.agh.edu.pl/~09sbfraczek/diagram-sekwencji%2c1%2c13.html">diagramu sekwencji</a> w materiałach dla studentów AGH,</li>
</ul>

<p>Na koniec zestawienie linków do artykułów na Wikipedii:</p>

<ul>
  <li><a href="https://pl.wikipedia.org/wiki/Unified_Modeling_Language">Artykuł o UML</a> na polskiej Wikipedii,</li>
  <li><a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">Artykuł o UML</a> na angielskiej Wikipedii,</li>
  <li><a href="https://en.wikipedia.org/wiki/Class_diagram">Diagram klas</a> na angielskiej Wikipedii,</li>
  <li><a href="https://pl.wikipedia.org/wiki/Diagram_klas">Diagram klas</a> na polskiej Wikipedii,</li>
  <li><a href="https://en.wikipedia.org/wiki/Component_diagram">Diagram komponentów</a> na angielskiej Wikipedii,</li>
  <li><a href="https://en.wikipedia.org/wiki/Deployment_diagram">Diagram wdrożenia</a> na angielskiej Wikipedii,</li>
  <li><a href="https://en.wikipedia.org/wiki/Sequence_diagram">Diagram sekwencji</a> na angielskiej Wikipedii.</li>
</ul>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Znasz już mój punkt widzenia dotyczący UML’a. Wiesz, że moim zdaniem warto znać podstawy tego języka. Mogą Ci się one przydać w codziennej pracy. Jeśli lubisz pracować w bardziej formalnym środowisku może się okazać, że UML będzie niezastąpiony. Znasz kilka rodzajów diagramów, które mogą być przydatne. Znasz także darmowe narzędzia, które pozwalają na tworzenie diagramów UML.</p>

<p>Mam nadzieję, że artykuł przypadł Ci do gustu. Proszę daj znać w komentarzach co sądzisz o UML’u. Czy Twoim zdaniem znajomość tego języka przydaje się w codziennej pracy? A może to już tylko zaszłość, która powoli odchodzi do lamusa? Jestem ciekawy Twoje opinii.</p>

<p>Dodatkowo, jak zwykle, proszę Cię o podzielenie się odnośnikiem do artykułu ze swoimi znajomymi. W ten sposób pomożesz mi dotrzeć do nowych Czytelników, za co z góry Ci dziękuję. Jeśli nie chcesz pomiąć kolejnych artykułów proszę zapisz się do samouczkowego newslettera i polub Samouczka na Facebook’u. To tyle na dzisiaj, trzymaj się i do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:ekspert" role="doc-endnote">
      <p>Sam też nie mogę ich fanatycznie przestrzegać – nie znam tej specyfikacji wystarczająco dokładnie. <a href="#fnref:ekspert" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:proba" role="doc-endnote">
      <p>Swoją drogą badanie było przeprowadzone na dość małej grupie kontrolnej. W związku z tym jest ryzyko, że wyniki nie są w pełni miarodajne. <a href="#fnref:proba" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:object" role="doc-endnote">
      <p>Tak na prawdę <code class="language-plaintext highlighter-rouge">ArrayList</code> zawiera tablicę instancji typu <code class="language-plaintext highlighter-rouge">Object</code>, to dzięki <a href="/typy-generyczne-w-jezyku-java/">typom generycznym</a> na zewnątrz widoczna jest inna klasa. <a href="#fnref:object" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:uproszczenie" role="doc-endnote">
      <p>Można powiedzieć, że to swego rodzaju uproszczenie. Tak naprawdę to można „przejść” z instancji jednej klasy do drugiej i odwrotnie. <a href="#fnref:uproszczenie" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:sql" role="doc-endnote">
      <p>Do tego dochodzi jeszcze modelowanie relacji tego typu w relacyjnych bazach danych, jednak to jest już zupełnie inna para kaloszy i temat na osobny artykuł ;). <a href="#fnref:sql" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Programista rzemieślnik" /><summary type="html"><![CDATA[W artykule opisuję podstawy UML. Po lekturze tego artykułu poznasz kilka rodzajów diagramów, które moim zdaniem są najbardziej przydatne. Dowiesz się w jakich sytuacjach UML może być dobrym narzędziem. W artykule stawiam raczej na praktyczne zastosowanie niż rygorystyczną zgodność ze specyfikacją UML.]]></summary></entry><entry><title type="html">Podzapytania SQL</title><link href="https://www.samouczekprogramisty.pl/podzapytania-sql/" rel="alternate" type="text/html" title="Podzapytania SQL" /><published>2019-09-18T00:00:00+02:00</published><updated>2019-09-19T10:11:50+02:00</updated><id>https://www.samouczekprogramisty.pl/podzapytania-sql</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/podzapytania-sql/"><![CDATA[<div class="notice--info">
  
<p>To jest jeden z artykułów w ramach <a href="https://www.samouczekprogramisty.pl/kurs-sql">praktycznego kursu SQL</a>. Proszę zapoznaj się z pozostałymi częściami, mogą one być pomocne w zrozumieniu materiału z tego artykułu.</p>

<p>Każde zapytanie z kursu możesz wykonać samodzielnie. Potrzebujesz do tego środowiska opisanego w <a href="/pobieranie-danych-z-bazy-select/">pierwszym artykule kursu</a>. Bardzo mocno Cię do tego zachęcam. Moim zdaniem najwięcej nauczysz się samodzielnie eksperymentując z zapytaniami.</p>

</div>

<h2 id="czym-jest-podzapytanie">Czym jest podzapytanie</h2>

<p>Podzapytanie to zapytanie SQL, które umieszczone jest wewnątrz innego zapytania. Podzapytanie zawsze otoczone jest parą nawiasów <code class="language-plaintext highlighter-rouge">()</code>. Jak zwykle spróbuję pokazać to na przykładzie. Dla przypomnienia, najprostsze zapytanie SQL może wyglądać tak:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>Po wykonaniu takiego zapytania otrzymasz pojedynczy wiersz zawierający jedną kolumnę z wartością <code class="language-plaintext highlighter-rouge">1</code>. Teraz trochę skomplikuję to zapytanie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p>Efekt działania obu przykładów jest dokładnie taki sam. Drugi przykład używa podzapytania. Główne zapytanie <code class="language-plaintext highlighter-rouge">SELECT * FROM</code> zwraca wszystkie wiersze zwrócone przez podzapytanie <code class="language-plaintext highlighter-rouge">SELECT 1</code>. Przykład, który tu pokazałem jest trochę naciągany, bardziej prawdopodobny przykład może wyglądać następująco:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">name</span>
  <span class="k">FROM</span> <span class="n">artist</span>
 <span class="k">WHERE</span> <span class="n">artistid</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">artistid</span>
                      <span class="k">FROM</span> <span class="n">album</span>
                  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
                    <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<p>Ponownie rozbiję to zapytanie na czynniki pierwsze. Proszę zwróć uwagę na podzapytanie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">SELECT</span> <span class="n">artistid</span>
     <span class="k">FROM</span> <span class="n">album</span>
 <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
   <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>To zapytanie zwraca listę identyfikatorów płodnych artystów ;). Zapytanie zwraca identyfikatory artystów z tabeli <code class="language-plaintext highlighter-rouge">album</code>, którzy opublikowali więcej niż dziesięć albumów.</p>

<p>W połączeniu z głównym zapytaniem otrzymuję nazwy artystów, którzy opublikowali więcej niż dziesięć albumów.</p>

<h3 id="podzapytania-skorelowane">Podzapytania skorelowane</h3>

<p>Poprzedni przykład pokazywał „zwykłe” podzapytania. Istnieją jeszcze tak zwane podzapytania skorelowane. Czasami nazywa się je także zapytaniami powiązanymi. Od zwykłych różnią się one tym, że są powiązane z nadrzędnym zapytaniem. Spróbuję wyjaśnić to na przykładzie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">trackid</span>
      <span class="p">,</span><span class="n">albumid</span>
      <span class="p">,</span><span class="n">name</span>
  <span class="k">FROM</span> <span class="n">track</span> <span class="k">AS</span> <span class="n">outer_track</span>
 <span class="k">WHERE</span> <span class="n">milliseconds</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">MIN</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
                         <span class="k">FROM</span> <span class="n">track</span> <span class="k">AS</span> <span class="n">inner_track</span>
                        <span class="k">WHERE</span> <span class="n">inner_track</span><span class="p">.</span><span class="n">albumid</span> <span class="o">=</span> <span class="n">outer_track</span><span class="p">.</span><span class="n">albumid</span><span class="p">);</span>
</code></pre></div></div>

<p>To zapytanie zwraca identyfikator utworu, identyfikator albumu i tytuł utworu z tabeli <code class="language-plaintext highlighter-rouge">track</code>. Zwraca wyłącznie takie utwory, które są dziesięć razy dłuższe niż najkrótszy utwór z tego samego albumu. W tym przypadku podzapytanie używa dokładnie tej samej tabeli. Żeby móc odróżnić tabelę <code class="language-plaintext highlighter-rouge">track</code> z zapytania wewnętrznego, od tej samej tabeli w zapytaniu zewnętrznym używam aliasów – słowa kluczowego <code class="language-plaintext highlighter-rouge">AS</code>.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">MIN</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">track</span> <span class="k">AS</span> <span class="n">inner_track</span>
 <span class="k">WHERE</span> <span class="n">inner_track</span><span class="p">.</span><span class="n">albumid</span> <span class="o">=</span> <span class="n">outer_track</span><span class="p">.</span><span class="n">albumid</span><span class="p">;</span>
</code></pre></div></div>

<p>Do tej pory w kursie posługiwałem się wyłącznie <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/#aliasy-dla-kolumn">aliasami kolumn</a>, jak widzisz istnieje także możliwość nadania aliasu tabelom.</p>

<p>Zapytania skorelowane nie są możliwe do wykonania bez dostępu do zapytania nadrzędnego. W tym przypadku zapytanie nie może być wykonane samodzielnie dlatego, że nie wie czym jest tabela <code class="language-plaintext highlighter-rouge">outer_track</code>.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="po-co-stosuje-się-podzapytania">Po co stosuje się podzapytania</h3>

<p>Powtórzę jeszcze raz przykład z poprzedniego punktu:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">name</span>
  <span class="k">FROM</span> <span class="n">artist</span>
 <span class="k">WHERE</span> <span class="n">artistid</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">artistid</span>
                      <span class="k">FROM</span> <span class="n">album</span>
                  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
                    <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<p>Czy można osiągnąć ten sam efekt bez podzapytania<sup id="fnref:join" role="doc-noteref"><a href="#fn:join" class="footnote" rel="footnote">1</a></sup>? Oczywiście, że można. Jednym ze sposobów jest użycie stałej listy identyfikatorów artystów. Listę tych identyfikatorów zwróci zapytanie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">artistid</span>
    <span class="k">FROM</span> <span class="n">album</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
  <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ArtistId  
----------
22        
58        
90   
</code></pre></div></div>

<p>Następnie taką listę można użyć w kolejnym zapytaniu:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">name</span>
  <span class="k">FROM</span> <span class="n">artist</span>
 <span class="k">WHERE</span> <span class="n">artistid</span> <span class="k">IN</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">90</span><span class="p">];</span>
</code></pre></div></div>

<p>Takie podejście ma jednak swoje wady. Jedną z nich jest to, że trzeba wykonać dwa zapytania. Kolejną jest potrzeba modyfikowania drugiego zapytania na podstawie wyników pierwszego. Co więcej taka modyfikacja nie zawsze jest możliwa – co jeśli lista zwróconych identyfikatorów miałaby kilkadziesiąt tysięcy elementów?</p>

<p>Podzapytania mogą mieć wiele zastosowań. Czasami osiągnięcie oczekiwanego efektu nie jest możliwe bez użycia podzapytania. Stosowanie podzapytań czasami może także prowadzić do uproszczenia finalnego zapytania.</p>

<p>Podzapytania mogą mieć różny wpływ na wydajność zapytania. Jeśli wydajność zapytania jest kluczowa sprawdzaj plan zapytania upewniając się czy usunięcie podzapytań mogłoby przyspieszyć jego wykonanie<sup id="fnref:plan" role="doc-noteref"><a href="#fn:plan" class="footnote" rel="footnote">2</a></sup>.</p>

<h2 id="gdzie-może-występować-podzapytanie">Gdzie może występować podzapytanie</h2>

<p>Podzapytanie może występować praktycznie wszędzie wewnątrz zapytania SQL. To gdzie podzapytanie może być użyte uzależnione jest od tego ile wartości zwraca. Jeśli podzapytanie zwraca pojedynczą wartość może być użyte jako część wyrażenia – na przykład w porównaniach, czy zwracanych kolumnach.</p>

<p>W przypadku gdy podzapytanie zwraca wiele wartości może być użyte na przykład w porównaniach czy jako tabela źródłowa. Poniższe przykłady powinny wyjaśnić poszczególne przypadki.</p>

<h3 id="podzapytanie-wewnątrz-listy-pobieranych-wartości">Podzapytanie wewnątrz listy pobieranych wartości</h3>

<p>Wyobraź sobie raport, który musisz przygotować. Raport powinien zawierać wszystkie faktury klientów. Poszczególne kolumny powinny pokazywać identyfikator klienta, wartość faktury i globalną średnią wartość faktur. Tego typu problem możesz rozwiązać używając podzapytania:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
            <span class="k">FROM</span> <span class="n">invoice</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_total</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
   <span class="k">LIMIT</span> <span class="mi">14</span><span class="p">;</span>
</code></pre></div></div>

<p>W tym przypadku podzapytanie zwraca pojedynczą wartość – globalną średnią wartość wszystkich faktur:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">invoice</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>avg(total)
----------------
5.65194174757282
</code></pre></div></div>

<p>W połączeniu z zapytaniem głównym zwróci następujące wyniki:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  Total       avg_total
----------  ----------  ----------------
1           3.98        5.65194174757282
1           3.96        5.65194174757282
1           5.94        5.65194174757282
1           0.99        5.65194174757282
1           1.98        5.65194174757282
1           13.86       5.65194174757282
1           8.91        5.65194174757282
2           1.98        5.65194174757282
2           13.86       5.65194174757282
2           8.91        5.65194174757282
2           1.98        5.65194174757282
2           3.96        5.65194174757282
2           5.94        5.65194174757282
2           0.99        5.65194174757282
</code></pre></div></div>

<p>Okazuje się, że raport nie jest idealny. Lepiej wyglądałoby zestawienie wartości poszczególnych faktur ze średnią faktur dla danego klienta. W tym przypadku podzapytanie musi bazować na kolumnie dostępnej w zapytaniu głównym. Aby móc tego dokonać niezbędne jest używanie <a href="/sortowanie-aliasy-ograniczanie-wynikow-i-zwracanie-unikalnych-wartosci/#aliasy-dla-kolumn">aliasów</a> (w tym przypadku aliasów dla tabel):</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="n">total</span>
        <span class="p">,(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
            <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="n">subquery_invoice</span>
           <span class="k">WHERE</span> <span class="n">subquery_invoice</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="n">query_invoice</span><span class="p">.</span><span class="n">customerid</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_total</span>
    <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="n">query_invoice</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
<span class="k">LIMIT</span> <span class="mi">14</span><span class="p">;</span>
</code></pre></div></div>

<p>W tym przypadku podzapytanie nadal zwraca pojedynczą wartość. Jednak tym razem wartość ta zależna jest od identyfikatora klienta znajdującego się w danym wierszu. Dla przykładu wybrałem jeden z identyfikatorów:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="n">subquery_invoice</span>
 <span class="k">WHERE</span> <span class="n">subquery_invoice</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>avg(total)
----------
5.66
</code></pre></div></div>

<p>Zwróć uwagę, że tym razem zapytanie główne zwraca średnią charakterystyczną dla każdego klienta (która jest rożna od średniej dla wszystkich klientów):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CustomerId  Total       avg_total
----------  ----------  ----------
1           3.98        5.66
1           3.96        5.66
1           5.94        5.66
1           0.99        5.66
1           1.98        5.66
1           13.86       5.66
1           8.91        5.66
2           1.98        5.37428571
2           13.86       5.37428571
2           8.91        5.37428571
2           1.98        5.37428571
2           3.96        5.37428571
2           5.94        5.37428571
2           0.99        5.37428571
</code></pre></div></div>

<p>Drugi przypadek pokazuje podzapytanie skorelowane. To podzapytanie powiązane jest z zapytaniem głównym. W odróżnieniu od pierwszego przypadku musi zostać wykonane wiele razy. Średnia użyta w pierwszym przypadku może być obliczona dokładnie raz dla uzyskania poprawnego wyniku.</p>

<h3 id="podzapytanie-wewnątrz-klauzuli-from">Podzapytanie wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">FROM</code></h3>

<p>Wyniki podzapytania użytego wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">FROM</code> traktowane są jakby były tabelą. Dlatego w tym przypadku podzapytanie może zwrócić wiele wartości. Kolumny użyte w podzapytaniu stają się kolumnami „tabeli” i mogą być użyte w zapytaniu głównym.</p>

<p>Proszę spójrz na przykład:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">customer_total</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total</span>
          <span class="k">FROM</span> <span class="n">invoice</span>
      <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">);</span>
</code></pre></div></div>

<p>Ponownie zacznę od analizy podzapytania:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">customer_total</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customerid</span><span class="p">;</span>
</code></pre></div></div>

<p>Podzapytanie sumuje wszystkie poszczególnych klientów. Zwraca dokładnie tyle wierszy ile jest wartości kolumny <code class="language-plaintext highlighter-rouge">customerid</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>customer_total
--------------
39.62
37.62
39.62
39.62
40.62
…
</code></pre></div></div>

<p>Następnie taki wynik użyty jest do policzenia średniej z wszystkich sum. Ostatecznym wynikiem zapytania jest liczba pokazująca średnią sumę zamówień wszystkich klientów:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>avg(customer_total)
-------------------
39.4677966101694
</code></pre></div></div>

<p>Podzapytania tego typu mogą być użyte w bardziej skomplikowanych zapytaniach. Proszę spójrz na przykład poniżej:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">invoiceid</span>
      <span class="p">,</span><span class="n">total</span>
      <span class="p">,</span><span class="n">invoice</span><span class="p">.</span><span class="n">billingstate</span>
      <span class="p">,</span><span class="n">billingstate_avg</span><span class="p">.</span><span class="n">state_avg</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">billingstate</span>
              <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">state_avg</span>
          <span class="k">FROM</span> <span class="n">invoice</span>
      <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">billingstate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">billingstate_avg</span> <span class="k">JOIN</span> <span class="n">invoice</span>
                                                 <span class="k">ON</span> <span class="n">billingstate_avg</span><span class="p">.</span><span class="n">billingstate</span> <span class="o">=</span> <span class="n">invoice</span><span class="p">.</span><span class="n">billingstate</span><span class="p">;</span>
</code></pre></div></div>

<p>Analizę ponownie zacznę od podzapytania:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">billingstate</span>
        <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">state_avg</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">billingstate</span><span class="p">;</span>
</code></pre></div></div>

<p>Podzapytanie używa <a href="/funkcje-i-grupowanie-wierszy-w-sql/">klauzuli <code class="language-plaintext highlighter-rouge">GROUP BY</code></a> żeby zwrócić średnią wartość zamówienia dla każdego stanu:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BillingState  state_avg
------------  ---------------
              5.6930693069307
AB            5.3742857142857
AZ            5.3742857142857
BC            5.5171428571428
CA            5.5171428571428
…
</code></pre></div></div>

<p>Następnie takie wyniki, używając <a href="/klauzula-join-w-zapytaniach-sql/">klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code></a>, złączone są z tabelą <code class="language-plaintext highlighter-rouge">invoice</code>. Kolumną używaną do złączenia jest <code class="language-plaintext highlighter-rouge">billingstate</code>. Wynikiem jest zbiór wierszy zawierający faktury, które mają uzupełnioną kolumnę <code class="language-plaintext highlighter-rouge">billingstate</code> (efekt złączenia). Każda taka faktura zestawiona jest później ze średnią obowiązującą w danym stanie:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>InvoiceId   Total       BillingState  state_avg
----------  ----------  ------------  ----------------
4           8.91        AB            5.37428571428571
5           13.86       MA            5.37428571428571
10          5.94        Dublin        6.51714285714286
13          0.99        CA            5.51714285714286
14          1.98        WA            5.66
…
</code></pre></div></div>

<h3 id="podzapytania-wewnątrz-klauzuli-where">Podzapytania wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code></h3>

<p>Podzapytanie może być także użyte do filtrowania wyników głównego zapytania. Przykład poniżej pokazuje takie zapytanie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">trackid</span>
      <span class="p">,</span><span class="n">name</span>
      <span class="p">,</span><span class="n">milliseconds</span>
  <span class="k">FROM</span> <span class="n">track</span>
 <span class="k">WHERE</span> <span class="n">milliseconds</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">MIN</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
                         <span class="k">FROM</span> <span class="n">track</span><span class="p">);</span>
</code></pre></div></div>

<p>W tym przypadku podzapytanie zwraca dziesięciokrotność długości najkrótszej ścieżki:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="mi">10</span> <span class="o">*</span> <span class="k">MIN</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">track</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10 * min(milliseconds)
----------------------
10710
</code></pre></div></div>

<p>Następnie ten wynik użyty jest do zwrócenia ścieżek, które są krótsze od tej wartości:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TrackId     Name        Milliseconds
----------  ----------  ------------
168         Now Sports  4884        
170         A Statisti  6373        
178         Oprah       6635        
2461        É Uma Part  1071        
3304        Commercial  7941   
</code></pre></div></div>

<p>Możliwe jest także używanie podzapytań zwracających wiele wartości. Proszę spójrz na przykład poniżej:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">trackid</span>
      <span class="p">,</span><span class="n">name</span>
  <span class="k">FROM</span> <span class="n">track</span>
 <span class="k">WHERE</span> <span class="n">mediatypeid</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">mediatypeid</span>
                         <span class="k">FROM</span> <span class="n">mediatype</span>
                        <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">'%AAC%'</span><span class="p">);</span>
</code></pre></div></div>

<p>W tym przypadku podzapytanie zwraca listę identyfikatorów typów których nazwa pasuje do wyrażenia <code class="language-plaintext highlighter-rouge">'%AAC%'</code>. Następnie te identyfikatory użyte są do odfiltrowania ścieżek, które mają odpowiednią wartość kolumny <code class="language-plaintext highlighter-rouge">mediatypeid</code>. Innymi słowy zapytanie zwraca ścieżki, które są w formacie pasującym do <code class="language-plaintext highlighter-rouge">'%AAC%'</code>.</p>

<p>Wyżej wspomniałem już o zapytaniach powiązanych. Musisz wiedzieć, że podzapytania powiązane mogą wystąpić także w innych miejscach. Poniżej pokazuję Ci przykład takiego podzapytania występującego w <a href="/klauzula-where-w-zapytaniach-sql/">klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code></a>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">albumid</span>
      <span class="p">,</span><span class="n">name</span>
      <span class="p">,</span><span class="n">milliseconds</span>
  <span class="k">FROM</span> <span class="n">track</span> <span class="k">AS</span> <span class="n">outer_track</span> 
 <span class="k">WHERE</span> <span class="n">milliseconds</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
                         <span class="k">FROM</span> <span class="n">track</span> <span class="k">AS</span> <span class="n">inner_track</span>
                        <span class="k">WHERE</span> <span class="n">inner_track</span><span class="p">.</span><span class="n">albumid</span> <span class="o">=</span> <span class="n">outer_track</span><span class="p">.</span><span class="n">albumid</span><span class="p">);</span>
</code></pre></div></div>

<p>W tym przypadku podzapytanie zwraca średnią długość ścieżki dla każdego albumu. Następnie wartość ta użyta jest w głównym zapytaniu. Pozwala ona zwrócić wyłącznie te wiersze, które dotyczą ścieżek o długości krótszej niż średnia z ich albumu.</p>

<h4 id="operator-exists">Operator <code class="language-plaintext highlighter-rouge">EXISTS</code></h4>

<p>W artykule dotyczącym <a href="/klauzula-where-w-zapytaniach-sql/">klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code></a> pominąłem między innymi możliwość użycia operatora <code class="language-plaintext highlighter-rouge">EXISTS</code>. Operator <code class="language-plaintext highlighter-rouge">EXISTS</code> powoduje, że zwrócone są wyłącznie te wiersze, dla których podzapytanie zwróci co najmniej jeden wiersz. Proszę spójrz na przykład:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="n">employee</span> <span class="k">AS</span> <span class="n">outer_employee</span>
 <span class="k">WHERE</span> <span class="k">EXISTS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span>
                 <span class="k">FROM</span> <span class="n">employee</span> <span class="k">AS</span> <span class="n">inner_empolyee</span>
                <span class="k">WHERE</span> <span class="n">inner_employee</span><span class="p">.</span><span class="n">reportsto</span> <span class="o">=</span> <span class="n">outer_employee</span><span class="p">.</span><span class="n">employeeid</span><span class="p">);</span>
</code></pre></div></div>

<p>W tym przypadku skorelowane podzapytanie zwraca wiersze, które połączone są relacją szef-podwładny. Wiersze, które zawierają pracowników nie posiadających podwładnych są pominięte. Dzieje się tak dlatego, że podzapytanie w ich przypadku nie zwróci ani jednego wiersza.</p>

<h4 id="operatory-all-i-any">Operatory <code class="language-plaintext highlighter-rouge">ALL</code> i <code class="language-plaintext highlighter-rouge">ANY</code></h4>

<p class="notice--warning">Operatory <code class="language-plaintext highlighter-rouge">ALL</code> i <code class="language-plaintext highlighter-rouge">ANY</code> nie są obsługiwane przez bazę SQLite.</p>

<p>Operatory <code class="language-plaintext highlighter-rouge">ALL</code> i <code class="language-plaintext highlighter-rouge">ANY</code> używa się w połączeniu z <a href="/klauzula-where-w-zapytaniach-sql/#-----">operatorami porównania z klauzuli <code class="language-plaintext highlighter-rouge">WHERE</code></a>.</p>

<p>Na przykład wyrażenie <code class="language-plaintext highlighter-rouge">kolumna &gt; ALL (podzapytanie)</code> oznacza, że kolumna musi mieć większą wartość niż wszystkie wartości zwrócone przez podzapytanie.</p>

<p>Analogicznie <code class="language-plaintext highlighter-rouge">kolumna &lt;= ANY (podzapytanie)</code> oznacza, że kolumna musi mieć wartość mniejszą bądź równą którejkolwiek z wartości zwróconych przez podzapytanie.</p>

<p>Chociaż SQLite nie wspiera tych operatorów identyczne zachowanie, w przypadku niektórych zapytań, można uzyskać stosując <a href="/funkcje-i-grupowanie-wierszy-w-sql/#funkcje-grupując">funkcje <code class="language-plaintext highlighter-rouge">MIN</code> albo <code class="language-plaintext highlighter-rouge">MAX</code></a>. Dla przykładu dwa poniższe zapytania dałyby te same wyniki:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="n">track</span>
 <span class="k">WHERE</span> <span class="n">milliseconds</span> <span class="o">&lt;</span> <span class="k">ANY</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">milliseconds</span>
                             <span class="k">FROM</span> <span class="n">track</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
  <span class="k">FROM</span> <span class="n">track</span>
 <span class="k">WHERE</span> <span class="n">milliseconds</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">milliseconds</span><span class="p">)</span>
                         <span class="k">FROM</span> <span class="n">track</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="podzapytania-jako-wyrażenie">Podzapytania jako wyrażenie</h3>

<p>Podzapytania zwracające pojedynczą wartość mogą traktowane być jako wyrażenie. W związku z tym mogą wystąpić w innych miejscach zapytania SQL. Kilka zapytań tego typu omówiłem dokładnie w poprzednich podpunktach.</p>

<p>Poniżej pokazuję kilka przykładów obrazujących użycie podzapytań w innych miejscach zapytania SQL.</p>

<h4 id="podzapytania-wewnątrz-klauzuli-order-by">Podzapytania wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">ORDER BY</code></h4>

<p>Dziwne, ale poprawne sortowanie:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="o">*</span>
    <span class="k">FROM</span> <span class="n">artist</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">albumid</span><span class="p">)</span>
            <span class="k">FROM</span> <span class="n">album</span>
           <span class="k">WHERE</span> <span class="n">artist</span><span class="p">.</span><span class="n">artistid</span> <span class="o">=</span> <span class="n">album</span><span class="p">.</span><span class="n">artistid</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="podzapytania-wewnątrz-klauzuli-limit">Podzapytania wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">LIMIT</code></h4>

<p>Ponownie dziwne, ale poprawne ograniczanie liczby wierszy:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">album</span> <span class="k">LIMIT</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
                             <span class="k">FROM</span> <span class="n">artist</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="podzapytania-wewnątrz-klauzuli-having">Podzapytania wewnątrz klauzuli <code class="language-plaintext highlighter-rouge">HAVING</code></h4>

<p>Tym razem podzapytanie zostało użyte do zwrócenia wierszy, dla których suma jest większa niż suma w jednym ze stanów:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">customerid</span>
        <span class="p">,</span><span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sum_total</span>
    <span class="k">FROM</span> <span class="n">invoice</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">customerid</span>
  <span class="k">HAVING</span> <span class="n">sum_total</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
                        <span class="k">FROM</span> <span class="n">invoice</span>
                       <span class="k">WHERE</span> <span class="n">billingstate</span> <span class="o">=</span> <span class="s1">'WA'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="podzapytania-a-klauzula-join">Podzapytania a klauzula <code class="language-plaintext highlighter-rouge">JOIN</code></h2>

<p>Często istnieje wiele sposobów na uzyskanie tych samych wyników. W przypadku niektórych podzapytań możliwe jest ich zastąpienie odpowiednimi złączeniami. Poprawne użycie <a href="/klauzula-join-w-zapytaniach-sql/">klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code></a> może pomóc w usunięciu niechcianego podzapytania.</p>

<h2 id="podzapytania-w-innych-rodzajach-zapytań">Podzapytania w innych rodzajach zapytań</h2>

<p>Do tej pory w ramach <a href="/kurs-sql/">kursu SQL</a> omawiałem wyłącznie <a href="/pobieranie-danych-z-bazy-select/">zapytania typu <code class="language-plaintext highlighter-rouge">SELECT</code></a>. W języku SQL istnieją także inne rodzaje zapytań. Musisz wiedzieć, że także w zapytaniach typu <code class="language-plaintext highlighter-rouge">UPDATE</code> czy <code class="language-plaintext highlighter-rouge">DELETE</code> możesz spodziewać się użycia podzapytań.</p>

<h2 id="dobre-praktyki-przy-używaniu-podzapytań">Dobre praktyki przy używaniu podzapytań</h2>

<p>To, że coś jest możliwe, wcale nie znaczy, że powinno być używane. Zapytania SQL szybko mogą stać się mało czytelne. Przez co będą trudne w zrozumieniu i późniejszym utrzymaniu. Jeśli podzapytanie wprowadza niepotrzebne zamieszanie postaraj się rozwiązać problem inaczej – czasami jest to możliwe na przykład przy użyciu <a href="/klauzula-join-w-zapytaniach-sql/">klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code></a>.</p>

<p>Ta sama klauzula może także pomóc w optymalizowaniu zapytania zawierającego podzapytania. Dobrą praktyką jest porównanie planu wykonania obu wersji zapytania. Plan zapytania możesz sprawdzić używając <code class="language-plaintext highlighter-rouge">EXPLAIN &lt;zapytanie sql&gt;</code>.</p>
<h3 id="podzapytanie-w-podzapytaniu-podzapytania">Podzapytanie w podzapytaniu podzapytania</h3>

<p>Podzapytania to twory, które mogą być zagnieżdżone. W zależności od silnika bazy danych limit zagnieżdżonych podzapytań może być różny. Mimo tego, że takie konstrukcje są możliwe, w codziennej pracy nie spotkałem się za podzapytaniami zagnieżdżonymi więcej niż dwa poziomy.</p>

<p>Nadmierne zagnieżdżanie podzapytań nie jest dobrą praktyką. Takie łańcuszki nie poprawiają czytelności zapytania. Dodatkowo powoduje problemy z jego utrzymaniem. Jeśli musisz stosować więcej niż jeden, dwa poziomy zagnieżdżenia zastanów się czy nie można rozwiązać tego problemu inaczej.</p>

<h2 id="zadania-do-wykonania">Zadania do wykonania</h2>

<p>Poniżej przygotowałem dla Ciebie zestaw kilku zadań, które pozwolą Ci sprawdzić wiedzę dotyczącą podzapytań w praktyce. Zanim zerkniesz do przykładowego rozwiązania zachęcam się do samodzielnej próby rozwiązania zadań – w ten sposób nauczysz się najwięcej.</p>

<p>Napisz zapytanie używając podzapytań, które zwróci:</p>

<ol>
  <li>sumaryczną wartość (kolumna <code class="language-plaintext highlighter-rouge">total</code>) faktur (tabela <code class="language-plaintext highlighter-rouge">invoice</code>), których kwota jest powyżej średniej wartości wszystkich faktur,</li>
  <li>średnią liczbę albumów (tabela <code class="language-plaintext highlighter-rouge">album</code>) dla artystów, którzy opublikowali więcej niż dwa albumy,</li>
  <li>wiersze zawierające identyfikator klienta (kolumna <code class="language-plaintext highlighter-rouge">customerid</code>) i wartość faktur ponad średnią wartość faktur danego klienta (<code class="language-plaintext highlighter-rouge">wartość - średnia</code>). Zapytanie powinno zwrócić wyłącznie wiersze gdzie ta różnica jest większa od <code class="language-plaintext highlighter-rouge">0</code>,</li>
  <li>te same wyniki, które zwraca zapytanie poniżej bez użycia klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code>:
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">SELECT</span> <span class="n">name</span> 
 <span class="k">FROM</span> <span class="n">artist</span> <span class="k">JOIN</span> <span class="n">album</span>
             <span class="k">ON</span> <span class="n">artist</span><span class="p">.</span><span class="n">artistid</span> <span class="o">=</span> <span class="n">album</span><span class="p">.</span><span class="n">artistid</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">name</span>
  <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>te same wyniki, które zwraca zapytanie poniżej bez użycia klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code>:
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">invoiceid</span>
   <span class="p">,</span><span class="n">total</span>
   <span class="p">,</span><span class="n">invoice</span><span class="p">.</span><span class="n">billingstate</span>
   <span class="p">,</span><span class="n">billingstate_avg</span><span class="p">.</span><span class="n">state_avg</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">billingstate</span>
           <span class="p">,</span><span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">state_avg</span>
       <span class="k">FROM</span> <span class="n">invoice</span>
   <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">billingstate</span><span class="p">)</span> <span class="k">AS</span> <span class="n">billingstate_avg</span> <span class="k">JOIN</span> <span class="n">invoice</span>
                                              <span class="k">ON</span> <span class="n">billingstate_avg</span><span class="p">.</span><span class="n">billingstate</span> <span class="o">=</span> <span class="n">invoice</span><span class="p">.</span><span class="n">billingstate</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="przykładowe-rozwiązania-zadań">Przykładowe rozwiązania zadań</h3>
<p>1.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">invoice</span>
 <span class="k">WHERE</span> <span class="n">total</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
                  <span class="k">FROM</span> <span class="n">invoice</span><span class="p">);</span>
</code></pre></div></div>
<p>2.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">how_many</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">how_many</span>
          <span class="k">FROM</span> <span class="n">album</span>
      <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
        <span class="k">HAVING</span> <span class="n">how_many</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<p>3.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">customerid</span>
      <span class="p">,(</span><span class="n">total</span> <span class="o">-</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
                   <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="n">i2</span>
                  <span class="k">WHERE</span> <span class="n">i1</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="n">i2</span><span class="p">.</span><span class="n">customerid</span><span class="p">))</span> <span class="k">AS</span> <span class="n">above_average</span>
  <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="n">i1</span>
 <span class="k">WHERE</span> <span class="n">above_average</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>
<p>4.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">name</span>
  <span class="k">FROM</span> <span class="n">artist</span>
 <span class="k">WHERE</span> <span class="n">artistid</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">artistid</span>
                      <span class="k">FROM</span> <span class="n">album</span>
                  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">artistid</span>
                    <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>
<p>5.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">invoiceid</span>
      <span class="p">,</span><span class="n">total</span>
      <span class="p">,</span><span class="n">billingstate</span>
      <span class="p">,(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">total</span><span class="p">)</span> <span class="k">AS</span> <span class="n">state_avg</span>
          <span class="k">FROM</span> <span class="n">invoice</span>
         <span class="k">WHERE</span> <span class="n">billingstate</span> <span class="o">=</span> <span class="k">outer</span><span class="p">.</span><span class="n">billingstate</span><span class="p">)</span>
  <span class="k">FROM</span> <span class="n">invoice</span> <span class="k">AS</span> <span class="k">outer</span>
 <span class="k">WHERE</span> <span class="n">billingstate</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Po lekturze artykułu wiesz już czym są podzapytania. Wiesz doskonale gdzie można ich używać. Udało Ci się także poznać kilka dobrych praktyk dotyczących używania podzapytań. Po samodzielnym rozwiązaniu zadań możesz śmiało powiedzieć, że potrafisz posługiwać się podzapytaniami.</p>

<p>Artykuł ten zamyka część kursu poświęconą zapytaniom typu <code class="language-plaintext highlighter-rouge">SELECT</code>. W kolejnych częściach kursu poznasz pozostałe elementy języka SQL niezbędne do codziennej pracy.</p>

<p>Mam nadzieję, że artykuł przypadł Ci do gustu. Udało Ci się rozwiązać zadania? Podziel się swoimi rozwiązaniami! Spojrzenie na ten sam problem z innego punktu widzenia pozwoli wszystkim na nauczenie się jeszcze więcej.</p>

<p>Zależy mi na dotarciu do nowych Czytelników, jeśli uważasz, że ten artykuł byłby wartościowy dla kogoś z Twoich znajomych bardzo proszę podziel się z nim odnośnikiem do tego artykułu. Z góry dziękuję!</p>

<p>Jeśli nie chcesz ominąć kolejnych artykułów w przyszłości proszę dopisz się do samouczkowego newslettera i polub Samouczka na Facebook’u. Trzymaj się i do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:join" role="doc-endnote">
      <p>Dla uproszenia pominę tu możliwość użycia klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code>. <a href="#fnref:join" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:plan" role="doc-endnote">
      <p>Możliwe, że silnik bazy danych, której używasz użyje dokładnie takiego samego planu zapytania zarówno przy użyciu podzapytań jak i klauzuli <code class="language-plaintext highlighter-rouge">JOIN</code>. <a href="#fnref:plan" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Bazy danych" /><category term="Kurs SQL" /><summary type="html"><![CDATA[W tym artykule opisuję podzapytania SQL. Po lekturze tego artykułu będziesz wiedzieć czym są podzapytania, kiedy można je stosować i w jakich miejscach mogą występować. Na przykładach poznasz zapytania skorelowane. Wszystkie omówione przypadki poparłem przykładowymi zapytaniami, które możesz wykonać samodzielnie. Na końcu artykułu czeka na Ciebie zestaw zadań, które pomogą Ci utrwalić zdobytą wiedzę.]]></summary></entry><entry><title type="html">Struktury danych – zbiór</title><link href="https://www.samouczekprogramisty.pl/struktury-danych-zbior/" rel="alternate" type="text/html" title="Struktury danych – zbiór" /><published>2019-05-07T00:00:00+02:00</published><updated>2019-05-07T23:54:56+02:00</updated><id>https://www.samouczekprogramisty.pl/struktury-danych-zbior</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/struktury-danych-zbior/"><![CDATA[<div class="notice--info">
  
<p>Artykuł ten opisuje przykładową implementację zbioru. Zbiór jest abstrakcyjnym typem danych, który występuje w wielu językach programowania. Zasada pracy ze zbiorami są niezależnie od języka programowania.</p>

<p>Przykładową implementację przygotowałem w Javie. Żeby wynieść jak najwięcej z tego artykułu potrzebna jest wiedza na temat <code class="language-plaintext highlighter-rouge">hashCode</code> i <code class="language-plaintext highlighter-rouge">equals</code>. Niezbędna jest też znajomość <a href="/porownywanie-obiektow-metody-equals-i-hashcode-w-jezyku-java/#kontrakt-między-metodami-equals-i-hashcode">kontraktu pomiędzy metodami <code class="language-plaintext highlighter-rouge">equals</code> i <code class="language-plaintext highlighter-rouge">hashCode</code></a>.</p>

<p>Do zrozumienia przykładowej implementacji niezbędna będzie też wiedza o <a href="/typy-generyczne-w-jezyku-java/">typach generycznych</a>.</p>

<p>Może przydać się też wiedza na temat <a href="/podstawy-zlozonosci-obliczeniowej/">szacowania złożoności obliczeniowej</a>.</p>

</div>

<h2 id="struktura-danych-a-abstrakcyjny-typ-danych">Struktura danych a abstrakcyjny typ danych</h2>

<p>W poprzednich artykułach z serii opisujących <a href="/struktury-danych-lista-wiazana/">listę wiązaną</a> czy <a href="/struktury-danych-tablica-asocjacyjna/">tablicę asocjacyjną</a> pominąłem kwestie definicji. Używałem określenia struktura danych i abstrakcyjny typ danych zamiennie. Tym razem chciałbym zwrócić Twoją uwagę na drobną różnicę pomiędzy tymi określeniami.</p>

<p>Abstrakcyjny typ danych definiuje zachowanie danego typu. Określa zestaw operacji, które można na tym typie wykonać. Opis abstrakcyjnego typu danych zawiera także cechy charakterystyczne dla danego typu.</p>

<p>Na przykład zbiór jest abstrakcyjnym typem danych (niżej opiszę jego własności), a <code class="language-plaintext highlighter-rouge">TreeSet</code> czy <code class="language-plaintext highlighter-rouge">HashSet</code> są implementacjami tego abstrakcyjnego typu danych. Te implementacje używają rożnych struktur danych. Innym przykładem może być abstrakcyjny typ danych <a href="/struktury-danych-tablica-asocjacyjna/">tablica asocjacyjna</a>, której implementacja może używać tablicy i listy wiązanej.</p>

<h2 id="czym-jest-zbiór">Czym jest zbiór</h2>

<p>Zbiór jest abstrakcyjnym typem danych, który ma następujące własności:</p>

<ul>
  <li>pozwala na przechowywanie wielu elementów,</li>
  <li>kolejność elementów w zbiorze nie ma znaczenia<sup id="fnref:wyjatek" role="doc-noteref"><a href="#fn:wyjatek" class="footnote" rel="footnote">1</a></sup>,</li>
  <li>pozwala na przechowywanie co najwyżej jednej kopii elementu (duplikaty nie są dozwolone).</li>
</ul>

<p>Podstawowymi operacjami, które można przeprowadzić na zbiorze jest dodanie elementu, usunięcie elementu i sprawdzenie czy dany element jest częścią zbioru.</p>

<p>Zbiór jest także jednym z podstawowych pojęć matematycznych.</p>

<h2 id="algebra-zbiorów">Algebra zbiorów</h2>

<p>Tematem tego artykułu nie jest zbiór w kontekście matematycznym. Chciałbym jednak zwrócić Twoją uwagę na podstawowe operacje, które można przeprowadzać na zbiorach. Ta podstawowa wiedza może także przydać się w kontekście programowania.</p>

<p>Poza operacjami przyda się też wiedza o tak zwanym zbiorze pustym. Zbiór pusty jak sama nazwa wskazuje jest pusty, nie ma żadnego elementu.</p>

<h3 id="iloczyn">Iloczyn</h3>

<p>Nazywany także przecięciem dwóch zbiorów. Przecięcie to nic innego jak część wspólna dwóch zbiorów. Przecięcie dwóch zbiorów może prowadzić do uzyskania:</p>
<ul>
  <li>mniejszego podzbioru, który jest częścią wspólną obu zbiorów,</li>
  <li>zbioru równemu obu zbiorom, jeśli oba zbiory zawierają dokładnie takie same elementy,</li>
  <li>pustego zbioru, jeśli oba zbiory nie mają wspólnych elementów.</li>
</ul>

<p>Iloczyn dowolnego zbioru ze zbiorem pustym zawsze jest zbiorem pustym.</p>

<h3 id="suma">Suma</h3>

<p>Suma dwóch zbiorów to zbiór, który zawiera wszystkie elementy z obu sumowanych zbiorów.</p>

<h3 id="różnica">Różnica</h3>

<p>Różnica zbioru A i zbioru B to zbiór zawierający wszystkie elementy, które są w zbiorze A i nie ma ich w zbiorze B.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h2 id="jak-działa-zbiór">Jak działa zbiór?</h2>

<p>W ramach tego artykułu skupię się na przykładowej implementacji, która oparta jest o funkcję skrótu (w języku Java jest to <code class="language-plaintext highlighter-rouge">hashCode</code>). Przedstawiona tu implementacja będzie uproszczoną wersją klasy <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/HashSet.html"><code class="language-plaintext highlighter-rouge">HashSet</code></a>, znajdującej się w bibliotece standardowej.</p>

<h3 id="hashcode-i-equals"><code class="language-plaintext highlighter-rouge">hashCode</code> i <code class="language-plaintext highlighter-rouge">equals</code></h3>

<p>Podobnie jak w przypadku tablicy asocjacyjnej opartej o funkcję skrótu tak i tutaj <code class="language-plaintext highlighter-rouge">hashCode</code> i <code class="language-plaintext highlighter-rouge">equals</code> pełnią kluczową rolę.</p>

<p>Także tutaj na podstawie wartości funkcji <code class="language-plaintext highlighter-rouge">hashCode</code> obliczone zostanie „wiaderko”, do którego wpadnie dany element. Następnie elementy wewnątrz tego samego wiaderka porównywane będą przy pomocy metody <code class="language-plaintext highlighter-rouge">equals</code>. Takie podejście pozwala na uzyskanie bardzo dobrej złożoności obliczeniowej.</p>

<p>Podobnie jak w przypadku tablicy asocjacyjnej kluczowe jest zachowanie <a href="/porownywanie-obiektow-metody-equals-i-hashcode-w-jezyku-java/#kontrakt-między-metodami-equals-i-hashcode">kontraktu</a> pomiędzy tymi metodami.</p>

<h3 id="podstawowe-operacje">Podstawowe operacje</h3>

<p>Jak wspomniałem wyżej zbiór oferuje kilka podstawowych operacji. Na potrzeby tego artykułu ograniczę je do takiego <a href="/interfejsy-w-jezyku-java/">interfejsu</a>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SimpleSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">size</span><span class="o">();</span>
    <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">element</span><span class="o">);</span>
    <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="no">E</span> <span class="n">element</span><span class="o">);</span>
    <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="no">E</span> <span class="n">element</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int size()</code> – metoda zwraca liczbę elementów zbioru,</li>
  <li><code class="language-plaintext highlighter-rouge">boolean add(E element)</code> – metoda dodaje element to zbioru, zwraca <code class="language-plaintext highlighter-rouge">true</code> jeśli element został dodany,</li>
  <li><code class="language-plaintext highlighter-rouge">boolean remove(E element)</code> – metoda usuwa element ze zbioru, zwraca <code class="language-plaintext highlighter-rouge">true</code> jeśli element został usunięty,</li>
  <li><code class="language-plaintext highlighter-rouge">boolean contains(E element)</code> – metoda zwraca flagę informującą czy element istnieje w zbiorze.</li>
</ul>

<h2 id="przykładowa-implementacja">Przykładowa implementacja</h2>

<h3 id="podobieństwa-pomiędzy-hashset-i-hashmap">Podobieństwa pomiędzy <code class="language-plaintext highlighter-rouge">HashSet</code> i <code class="language-plaintext highlighter-rouge">HashMap</code></h3>

<p>Zacznę od krótkiego przypomnienia czym jest tablica asocjacyjna. Ta struktura pozwala na przechowywanie kluczy i odpowiadających im wartości. Implementacja <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/HashMap.html"><code class="language-plaintext highlighter-rouge">HashMap</code></a> zakłada, że tablica asocjacyjna zawiera unikalny zestaw kluczy. Innymi słowy nie może w niej być dwóch takich samych kluczy.</p>

<p>Tablica asocjacyjna, podobnie jak zbiór, nie zwraca uwagi na porządek kluczy<sup id="fnref:treemap" role="doc-noteref"><a href="#fn:treemap" class="footnote" rel="footnote">2</a></sup>. Zbiór nie zawiera duplikatów, mapa nie przechowuje zduplikowanych kluczy.</p>

<p>Czy widzisz tu pewne podobieństwo pomiędzy zbiorem a tak zdefiniowaną tablicą asocjacyjną? Powiem więcej, bardzo często implementacje zbioru pod spodem używają tablicy asocjacyjnej.</p>

<p>Są też języki programowania, w których w bibliotece standardowej nie ma zbiorów a jedynie tablice asocjacyjne. Jednym z takich języków jest Go.</p>

<h3 id="kod-źródłowy">Kod źródłowy</h3>

<p>Jak wspomniałem wcześniej zbiór jest bardzo podobny do tablicy asocjacyjnej. To podobieństwo jest widoczne także w przykładowej implementacji:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleHashSet</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">SimpleSet</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Object</span> <span class="no">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">SimpleMap</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">item</span><span class="o">,</span> <span class="no">PRESENT</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="no">PRESENT</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Zauważ, że cały mechanizm związany z funkcją skrótu, kubełkami, dynamicznym rozszerzaniem pojemności zbioru jest ukryty w implementacji tablicy asocjacyjnej. Sam zbiór korzysta jedynie z publicznych metod. Jeśli nie znasz któregokolwiek z tych mechanizmów koniecznie przeczytaj artykuł o <a href="/struktury-danych-tablica-asocjacyjna/">tablicy asocjacyjnej</a>.</p>

<p>Interesującym zabiegiem jest tu użycie instancji <code class="language-plaintext highlighter-rouge">PRESENT</code>. Dzięki takiemu podejściu minimalizowana jest wielkość zbioru, istnieje tylko jeden obiekt wartości współdzielony pomiędzy wszystkimi kluczami.</p>

<p>Implementacja zbioru opartego o funkcje skrótu jest na tyle prosta, że <a href="https://github.com/SamouczekProgramisty/AlgorytmyStrukturyDanych/blob/master/03_hash_set/src/test/java/pl/samouczekprogramisty/asd/set/SimpleHashSetTest.java">zestaw testów jednostkowych</a> ma dużo więcej linijek kodu ;).</p>

<h2 id="złożoność-obliczeniowa">Złożoność obliczeniowa</h2>

<p>Złożoność obliczeniowa poszczególnych operacji odpowiada złożoności obliczeniowej tablicy asocjacyjnej. Wynika to z faktu, że każda operacja wywołuje odpowiednią metodę zaimplementowaną w tablicy asocjacyjnej.</p>

<p>Ma to dokładnie takie same konsekwencje jak w przypadku mapy opartej o funkcję skrótu. Jeśli funkcja skrótu jest „dobra” wówczas złożoność operacji wynosi <code class="language-plaintext highlighter-rouge">Ο(1)</code>. Jeśli jest zła, złożoność obliczeniowa spada do <code class="language-plaintext highlighter-rouge">Ο(n)</code>.</p>

<p>Dla przypomnienia możesz rzucić okiem na <a href="/struktury-danych-tablica-asocjacyjna/#por%C3%B3wnanie-z%C5%82o%C5%BCono%C5%9Bci-obliczeniowych">złożoność obliczeniową mapy</a>.</p>

<h2 id="najczęściej-zadawane-pytania">Najczęściej zadawane pytania</h2>

<h3 id="czy-zbiór-jest-serializowalnywielowątkowo-bezpiecznyposortowany">Czy zbiór jest serializowalny/wielowątkowo bezpieczny/posortowany</h3>

<p>Jak wspomniałem na początku artykułu zbiór tak na prawdę nie jest strukturą danych. Zbiór to abstrakcyjny typ danych, który może mieć wiele implementacji. Jedną z nich przedstawiłem w tym artykule. Sam zbiór nie może być serializowalny/wielowątkowo bezpieczny/posortowany, ale jego konkretna implementacja już tak. Na przykład implementacja zbioru oparta o drzewo jest posortowana, a ta oparta o funkcję skrótu już nie musi taka być.</p>

<h3 id="czym-zbiór-różni-się-od-listy">Czym zbiór różni się od listy</h3>

<p>Zbiór z definicji jest nieuporządkowanym zbiorem elementów, które nie mogą się powtarzać. Lista to elementy, które mogą się powtarzać. Dodatkowo lista ma swój określony porządek.</p>

<h3 id="czym-zbiór-różni-się-od-tablicy-asocjacyjnej">Czym zbiór różni się od tablicy asocjacyjnej</h3>

<p>Tablica asocjacyjna zawiera unikalny zbiór kluczy, Każdy z kluczy ma przyporządkowaną wartość. Zbiór kluczy w mapie nie zawiera duplikatów. Można powiedzieć, że zbiór jest częścią mapy – zbiór nie zawiera mapowania. To podobieństwo widać w przykładowej implementacji.</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>W artykule tylko musnąłem zagadnienia związane z matematyką. Jeśli chcesz możesz dowiedzieć się czegoś więcej o <a href="http://www.math.edu.pl/algebra-zbiorow">algebrze zbiorów</a>.</p>

<p>Polecam lekturę dokumentacji klasy <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/HashSet.html"><code class="language-plaintext highlighter-rouge">HashSet</code></a> i przejrzenie implementacji <a href="http://hg.openjdk.java.net/jdk/jdk12/file/06222165c35f/src/java.base/share/classes/java/util/HashSet.java"><code class="language-plaintext highlighter-rouge">HashSet</code> w OpenJDK</a>. Możesz też rzucić okiem na <a href="http://hg.openjdk.java.net/jdk/jdk12/file/06222165c35f/src/java.base/share/classes/java/util/TreeSet.java">implementację zbioru opartą o drzewa</a>.</p>

<p>Jak zwykle zachęcam Cię też do przejrzenia <a href="https://github.com/SamouczekProgramisty/AlgorytmyStrukturyDanych/tree/master/03_hash_set">kodu źródłowego użytego w artykule</a>.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Teraz wiesz czym jest zbiór. Znasz złożoność obliczeniową poszczególnych operacji. Znasz podstawowe operacje, które można przeprowadzać na zbiorach. Masz też pod ręką zestaw dodatkowych materiałów, które pozwolą Ci poszerzyć zdobytą wiedzę. Możesz śmiało powiedzieć, że udało Ci się poznać kolejny abstrakcyjny typ danych :).</p>

<p>Jeśli znasz kogoś komu materiał zebrany w tym artykule może się przydać będę wdzięczny za podzielenie się linkiem. Zależy mi na dotarciu do nowych Czytelników, a Ty możesz mi w ten sposób pomóc – z góry dziękuję!</p>

<p>Jeśli nie chcesz pominąć kolejnych artykułów na blogu dopisz się do samouczkowego newslettera. Możesz też polubić <a href="https://www.facebook.com/SamouczekProgramisty">profil Samouczka na Facebook’u</a>. To tyle na dzisiaj, trzymaj się i do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:wyjatek" role="doc-endnote">
      <p>Niektóre implementacje porządkują elementy zbioru. <a href="#fnref:wyjatek" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:treemap" role="doc-endnote">
      <p>To zależy od implementacji, na przykład <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/TreeMap.html"><code class="language-plaintext highlighter-rouge">TreeMap</code></a> sortuje klucze a <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/TreeSet.html"><code class="language-plaintext highlighter-rouge">TreeSet</code></a> przechowuje posortowane wartości. <a href="#fnref:treemap" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><category term="Programista rzemieślnik" /><summary type="html"><![CDATA[W artykule tym przeczytasz o zbiorze. Dowiesz się jak działa ta struktura. Pokażę Ci przykładową implementację zbioru. Dowiesz się jaka jest złożoność obliczeniowa poszczególnych operacji.]]></summary></entry><entry><title type="html">Wzorzec projektowy obserwator</title><link href="https://www.samouczekprogramisty.pl/wzorzec-projektowy-obserwator/" rel="alternate" type="text/html" title="Wzorzec projektowy obserwator" /><published>2019-05-02T00:00:00+02:00</published><updated>2020-09-27T12:33:08+02:00</updated><id>https://www.samouczekprogramisty.pl/wzorzec-projektowy-obserwator</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/wzorzec-projektowy-obserwator/"><![CDATA[<p class="notice--info">Czytasz jeden z artykułów opisujących wzorce projektowe. Jeśli interesuje Cię ten temat zapraszam Cię do lektury pozostałych artykułów, które powstały w ramach tej serii – <a href="https://www.samouczekprogramisty.pl/narzedzia-i-dobre-praktyki/#wzorce-projektowe">wzorce projektowe</a>. W zrozumieniu artykułu przyda Ci się wiedza dotycząca <a href="/podstawy-uml/">podstaw UML’a</a>.</p>

<h2 id="problem-do-rozwiązania">Problem do rozwiązania</h2>

<p>Czytasz artykuły na różnych stronach internetowych. Jedną z tych stron jest Samouczek Programisty ;). Są strony na które zaglądasz regularnie. Raz na jakiś czas sprawdzasz czy na stronach, które Cię interesują nie pojawiły się nowe artykuły. Po lekturze nowych artykułów spisujesz swoje notatki. Jeśli stron do śledzenie masz sporo pojawia się problem. Regularne sprawdzanie czy pojawiły się nowe treści jest mało efektywne. Możesz rozwiązać ten problem na kilka sposobów, jednym z nich może być zapisanie się do newslettera. Można powiedzieć, że zapisanie się na newsletter czyni z Ciebie obserwatora strony.</p>

<p>Ten sam problem występuje w projektach informatycznych. Istnieją zdarzenia, które powinny wyzwalać pewne zachowanie. Wystąpienie zdarzenia powoduje to, że obserwator aktualizuje swój stan na podstawie zmiany obserwowanego elementu. Aktywne sprawdzanie czy zdarzenie wystąpiło w większości przypadków nie jest dobrym rozwiązaniem. W projektach informatycznych problem tego typu rozwiązany jest przez wzorzec projektowy obserwator (ang. <em>observer</em>).</p>

<h2 id="wzorzec-obserwator">Wzorzec obserwator</h2>

<h3 id="diagramy-klas">Diagramy klas</h3>

<p>Ten wzorzec projektowy opiera się o dwa interfejsy. Jeden z nich reprezentuje obserwatora. Drugi element, który jest obserwowany:</p>

<figure class="">
  <img src="/assets/images/2019/0502-wzorzec-projektowy-obserwator/observer.svg" alt="" /><figcaption>
      Wzorzec projektowy obserwator (ang. <em>observer</em>)

    </figcaption></figure>

<p>Interfejs <code class="language-plaintext highlighter-rouge">Observable</code> zawiera trzy metody:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">attach(Observer)</code> – powoduje dodanie nowego obserwatora (obserwator jest zainteresowany zmianami),</li>
  <li><code class="language-plaintext highlighter-rouge">detach(Observer)</code> – powoduje usunięcie istniejącego obserwatora (obserwator nie jest już zainteresowany zmianami),</li>
  <li><code class="language-plaintext highlighter-rouge">notify()</code> – powoduje powiadomienie wszystkich obserwatorów o wystąpieniu zmiany.</li>
</ul>

<p>Interfejs <code class="language-plaintext highlighter-rouge">Observer</code> zawiera wyłącznie jedną metodę:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">update()</code> – metoda jest wywołana przez <code class="language-plaintext highlighter-rouge">Observable</code> w momencie wystąpienia zmiany.</li>
</ul>

<p>Interfejsy nie przechowują żadnego stanu, który może się zmienić. Właściwe obiekty implementują te interfejsy i to one przechowują stan.</p>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="przykładowa-implementacja-obserwatora">Przykładowa implementacja obserwatora</h3>

<p>Interfejsy przedstawione na diagramie UML mogą wyglądać następująco:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">);</span>
    <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">);</span>
    <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Posłużę się przykładem, który przytoczyłem na początku artykułu. Wyobraź sobie blog, na którym publikowane są artykuły. Blog pozwala się obserwować – implementuje interfejs <code class="language-plaintext highlighter-rouge">Observable</code>. W momencie dodania nowego czytelnika zostaje on dodany do zbioru obserwatorów.</p>

<p>Następnie w momencie publikacji nowego artykułu (metoda <code class="language-plaintext highlighter-rouge">publishArticle</code>) zmieniany jest wewnętrzny stan instancji klasy <code class="language-plaintext highlighter-rouge">Blog</code>. Po tej zmianie wywołana jest metoda <code class="language-plaintext highlighter-rouge">notifyObservers</code>. Wewnątrz tej metody na każdej z instancji implementującej <code class="language-plaintext highlighter-rouge">Observer</code> wywołana jest metoda <code class="language-plaintext highlighter-rouge">update</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blog</span> <span class="kd">implements</span> <span class="nc">Observable</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Observer</span><span class="o">&gt;</span> <span class="n">observers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">newestArticle</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="nc">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">observers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">observers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nl">Observer:</span><span class="o">:</span><span class="n">update</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNewestArticle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">newestArticle</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">publishArticle</span><span class="o">(</span><span class="nc">String</span> <span class="n">article</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">newestArticle</span> <span class="o">=</span> <span class="n">article</span><span class="o">;</span>
        <span class="n">notifyObservers</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Obserwatorem jest czytelnik reprezentowany przez klasę <code class="language-plaintext highlighter-rouge">Reader</code>. Czytelnik wie jaki zasób obserwuje, przechowuje go w atrybucie <code class="language-plaintext highlighter-rouge">blog</code>. W momencie powiadomienia, czyli w trakcie wywołania metody <code class="language-plaintext highlighter-rouge">update</code>, sprawdzany jest stan atrybutu <code class="language-plaintext highlighter-rouge">blog</code> i <code class="language-plaintext highlighter-rouge">Reader</code> może odpowiednio na tę zmianę zareagować. W tym przypadku informuje o najnowszym artykule:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reader</span> <span class="kd">implements</span> <span class="nc">Observer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Blog</span> <span class="n">blog</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">newestArticle</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Reader</span><span class="o">(</span><span class="nc">Blog</span> <span class="n">blog</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">blog</span> <span class="o">=</span> <span class="n">blog</span><span class="o">;</span>
        <span class="n">newestArticle</span> <span class="o">=</span> <span class="n">blog</span><span class="o">.</span><span class="na">getNewestArticle</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">newestArticle</span> <span class="o">=</span> <span class="n">blog</span><span class="o">.</span><span class="na">getNewestArticle</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"An article „%s” was published!"</span><span class="o">,</span>  <span class="n">newestArticle</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Przekładając klasy z tego przykładu na te użyte w diagramie UML:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SomeObservable</code> – <code class="language-plaintext highlighter-rouge">Blog</code>,</li>
  <li><code class="language-plaintext highlighter-rouge">SomeObserver</code> – <code class="language-plaintext highlighter-rouge">Reader</code>.</li>
</ul>

<h3 id="dodatkowe-rozważania">Dodatkowe rozważania</h3>

<p>Obserwator to wzorzec, który jest bardzo generyczny. W swojej podstawowej wersji nie posiada mechanizmu na informowanie o tym co dokładnie zmieniło się w obserwowanym obiekcie. Takie podejście ma swoje wady i zalety.</p>

<h4 id="zalety">Zalety</h4>

<p>Jedną z zalet stosowania tego wzorca projektowego jest to, że klasa implementująca interfejs <code class="language-plaintext highlighter-rouge">Observer</code> nie musi aktywnie sprawdzać czy interesujący ją obiekt się zmienił.</p>

<p>Dzięki zastosowaniu tego wzorca projektowego można w czysty sposób odizolować od siebie obiekty. Nie są one ze sobą sztywno powiązane. Dodatkowo szeroka definicja metody <code class="language-plaintext highlighter-rouge">update</code> pozwala na informowanie o zdarzeniach różnego rodzaju.</p>

<p>Niewątpliwą zaletą także jest to, że obiekt obserwowany może poinformować wielu obserwatorów używając tego samego protokołu.</p>

<h4 id="wady">Wady</h4>

<p>Obserwator powiadomiony o zmianie sam musi dojść do tego co się zmieniło w obiekcie obserwowanym. Czasami takie sprawdzenie może nie być trywialne. Co więcej nie jest to potrzebne, bo obserwowany obiekt doskonale wie co się zmieniło – sam przecież o tej zmianie informuje swoich obserwatorów.</p>

<p>Można to obejść poprzez rozszerzenie metody <code class="language-plaintext highlighter-rouge">attach</code> lub <code class="language-plaintext highlighter-rouge">update</code>. Na przykład zmiana deklaracji z <code class="language-plaintext highlighter-rouge">attach(Observer observer)</code> na <code class="language-plaintext highlighter-rouge">attach(Observer observer, EnumType event)</code> może informować obiekt informowany o tym, że dany obserwator zainteresowany jest jedynie podzbiorem zdarzeń.</p>

<p>Podobną zmianę można wprowadzić w metodzie <code class="language-plaintext highlighter-rouge">update</code> zmieniając ją z <code class="language-plaintext highlighter-rouge">update()</code> na <code class="language-plaintext highlighter-rouge">update(EventDetails eventDetails)</code>. Zmiany tego typu sprawiają, że interfejsy <code class="language-plaintext highlighter-rouge">Observable</code> czy <code class="language-plaintext highlighter-rouge">Observer</code> nie są już tak generyczne.</p>

<p>Przy synchronicznym powiadamianiu obserwatorów może wystąpić sytuacja, w której wywołania metody <code class="language-plaintext highlighter-rouge">update</code> zajmują lwią część czasu zmiany stanu obiektu obserwowanego.</p>

<h2 id="przykłady-użycia-wzorca-obserwator">Przykłady użycia wzorca obserwator</h2>

<p>W standardowej bibliotece języka Java możesz spotkać całą masę różnych implementacji interfejsu <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/EventListener.html"><code class="language-plaintext highlighter-rouge">EventListener</code></a>. Jest to interfejs bazowy dla pozostałych interfejsów, które służą do informowania o wystąpieniu pewnego zdarzenia. To nic innego jak <code class="language-plaintext highlighter-rouge">Observer</code>, z rozszerzoną metodą <code class="language-plaintext highlighter-rouge">update</code>.</p>

<p>Jeśli udało Ci się już przeczytać artykuł o <a href="/watki-w-jezyku-java/#jak-dzia%C5%82a-mechanizm-powiadomie%C5%84">wątkach</a> to wiesz o mechanizmie powiadamiania. Także tam można dopatrzeć się analogii do wzorca projektowego obserwator. Wątek, oczekujący na pewien zasób jest powiadamiany kiedy zasób staje się dostępny.</p>

<p>Można powiedzieć, że MVC (ang. <em>Model View Controller</em>) jest wzorcem architektonicznym. Połączenia pomiędzy poszczególnymi komponentami można uzyskać stosując wzorzec obserwatora. Na przykład widok obserwuje zmiany w modelu, model informuje widok o zmianach, które powinny zostać pokazane użytkownikowi.</p>

<h2 id="ćwiczenie-do-wykonania">Ćwiczenie do wykonania</h2>

<p>Ćwiczenie polega na zaimplementowaniu klasy zdarzenia <code class="language-plaintext highlighter-rouge">ArticleEvent</code>, która będzie zawierała informacje o nowym artykule opublikowanym na blogu. Wymaga to także zmiany metody <code class="language-plaintext highlighter-rouge">update</code>. Niech obserwator użyje informacji przekazywanej w tym zdarzeniu do pokazania najnowszego artykułu. Czy w takim przypadku <code class="language-plaintext highlighter-rouge">Reader</code> potrzebuje instancji klasy <code class="language-plaintext highlighter-rouge">Blog</code>?</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Niezmiennie, we wszystkich artykułach z serii poświęconej wzorcom projektowym polecam książkę <a href="https://www.amazon.com/gp/product/0201633612/">Design Patterns – Gamma, Helm, Johnson, Vlissides</a>. Jeśli miałbym polecić wyłącznie jedno źródło to poprzestałbym na tej książce.</p>

<p>Możesz też przeczytać więcej o obserwatorze z <a href="https://codecouple.pl/2017/03/31/2-wzorce-projektowe-obserwator-po-raz-kolejny/">innego punktu widzenia</a>. Wartościowym źródłem są także artykuły na <a href="https://pl.wikipedia.org/wiki/Obserwator_(wzorzec_projektowy)">polskiej</a> i <a href="https://en.wikipedia.org/wiki/Observer_pattern">angielskiej Wikipedii</a>.</p>

<p>Zachęcam Cię też do zajrzenia do <a href="https://github.com/SamouczekProgramisty/WzorceProjektowe/tree/master/java/02_observer/src/main/java/pl/samouczekprogramisty/patterns">kodu źródłowego</a>, który użyłem w tym artykule.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Po lekturze tego artykułu wiesz czym jest obserwator. Artykuł pokazał Ci też pewne wariacje tego wzorca projektowego. Po wykonaniu ćwiczenia potrafisz zaimplementować swój własny obserwator. Można powiedzieć, że udało Ci się poznać kolejny wzorzec projektowy. Gratulacje!</p>

<p>Czy udało Ci się użyć tego wzorca w praktyce? W czym pomógł w Twoim projekcie? Podziel się Twoją opinią z innymi Czytelnikami :).</p>

<p>Jeśli znasz kogoś komu obserwator może się przydać proszę podziel się odnośnikiem do tego artykułu. Kto wie, może dzięki Tobie Samouczek zyska kolejnego Czytelnika? Z góry dziękuję!</p>

<p>Jeśli nie chcesz pominąć kolejnych artykułów proszę dopisz się do samouczkowego newslettera i polub <a href="https://www.facebook.com/SamouczekProgramisty">profil Samouczka na Facebook’u</a>. To tyle na dzisiaj, trzymaj się i do następnego razu!</p>]]></content><author><name>Marcin Pietraszek</name></author><category term="Wzorce projektowe" /><summary type="html"><![CDATA[W tym artykule przeczytasz o jednym z wzorców projektowych – o obserwatorze. Na przykładzie pokażę Ci sposób jego użycia i implementacji. Diagramy UML pomogą Ci zrozumieć relację pomiędzy klasami w tym wzorcu projektowym. Ćwiczenie zawarte na końcu artykułu pozwoli Ci sprawdzić wiedzę w praktyce]]></summary></entry><entry><title type="html">Jak pisać kod wysokiej jakości w języku Java</title><link href="https://www.samouczekprogramisty.pl/jak-pisac-kod-wysokiej-jakosci-w-jezyku-java/" rel="alternate" type="text/html" title="Jak pisać kod wysokiej jakości w języku Java" /><published>2019-04-24T00:00:00+02:00</published><updated>2019-04-24T00:37:30+02:00</updated><id>https://www.samouczekprogramisty.pl/jak-pisac-kod-wysokiej-jakosci-w-jezyku-java</id><content type="html" xml:base="https://www.samouczekprogramisty.pl/jak-pisac-kod-wysokiej-jakosci-w-jezyku-java/"><![CDATA[<p>Powtórzę to po raz kolejny. Uważam, że nauka przez praktykę to najlepsze rozwiązanie. Właśnie z tego powodu artykuły na Samouczku bardzo często zawierają zadania z przykładowymi rozwiązaniami. Sporo Czytelników rozwiązuje te zadania prosząc później o spojrzenie na kod krytycznym okiem.</p>

<p>Tego typu praktyka spotykana jest także w codziennej pracy programisty. Przeglądy kodu (ang. <em>code review</em>) to bardzo dobry sposób na poznawanie projektu i naukę. Najlepsze w tym wszystkim jest to, że uczy się zarówno osoba, która sprawdza kod jak i ta której kod jest sprawdzany.</p>

<p>Na przestrzeni kilku lat prowadzenia Samouczka widziałem już różne przypadki. W tym artykule zbieram najczęściej popełniane błędy wraz z propozycją ich rozwiązania.</p>

<p class="notice--info">Część proponowanych tu rozwiązań jest subiektywna. Nie jest poparta żadną specyfikacją czy dokładnym opisem „u źródła”. Masz prawo nie zgadzać się z moją opinią, z chęcią usłyszę Twój punkt widzenia w komentarzach.</p>

<h2 id="ogólne-uwagi-dotyczące-kodu">Ogólne uwagi dotyczące kodu</h2>

<h3 id="konwencja-nazewnicza">Konwencja nazewnicza</h3>

<p>Zanim zacznę opisywać jakiekolwiek standardy muszę zaznaczyć jedną bardzo ważną rzecz. Jeśli w projekcie, z którym pracujesz istnieje już jakaś konwencja proponuję nadal ją stosować. Jeśli wejdziesz między wrony, musisz krakać jak i one.</p>

<p>Jeśli Twoim zdaniem ta konwencja jest bez sensu porozmawiaj o tym z innymi członkami zespołu. Każdy przypadek powinien być rozpatrywany indywidualnie, a konsensus może usprawiedliwić zmianę istniejącej konwencji.</p>

<p>W języku Java „obowiązuje” konwencja nazewnicza. Kompilator nie będzie marudził jeśli kod, który napiszesz nie będzie jej przestrzegał. Będzie marudziła kolejna osoba, która z tym kodem będzie pracowała. W praktyce często jest tak, że raz napisany kod czytany jest wielokrotnie. Często przez kogoś innego niż autor. Stosowanie konwencji nazewniczej pozwala na łatwiejsze zorientowanie się w kodzie, z którym się pracuje.</p>

<p>Mimo tego, że pisownia jest ważna to nie jest najważniejsza. Najbardziej istotne jest nadanie poszczególnym elementom dobrej nazwy. Pracuję w IT od 2007 roku, nadal nie potrafię tego robić dobrze. W branży IT panuje obiegowa opinia:</p>

<blockquote>
  <p>There are only two hard things in Computer Science: cache invalidation and naming things.</p>
</blockquote>

<p>Istotne jest aby nazwy elementów (typów, parametrów, atrybutów, metod itd.) oddawały to co dany element zawiera/robi. Złe nazwy mogą wprowadzić w błąd, co może utrudnić zrozumienie kodu.</p>

<h4 id="typy">Typy</h4>

<p>Klasy, typy wyliczeniowe, interfejsy powinny być nazwane zgodnie z <a href="https://pl.wikipedia.org/wiki/PascalCase">PascalCase</a>. Oznacza to tyle, że nazwy powinny być jednym ciągiem znaków, w którym każde kolejne słowo zaczyna się od wielkiej litery. Dobrze, jeśli te nazwy są rzeczownikami. Problem jest z akronimami, nawet JDK nie zachowuje tu konwencji – część akronimów pisana jest wielkimi literami (na przykład <code class="language-plaintext highlighter-rouge">URL</code>), część używając PascalCase (na przykład <code class="language-plaintext highlighter-rouge">Http</code>). W tym przypadku proponuję Ci używanie pierwszego podejścia.</p>

<p>Moim zdaniem przykłady poniżej pokazują nazwy, które można poprawić:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">class</span> <span class="nc">anonymousUser</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Bus_driver</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">enum</span> <span class="n">color</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Poprawnymi przykładami nazw mogą być:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">PageCollector</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">enum</span> <span class="nc">URLSchema</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="metody-parametry-atrybuty">Metody, parametry, atrybuty</h4>

<p>Metody w języku Java zwykło się nazywać używając <a href="https://pl.wikipedia.org/wiki/CamelCase">camelCase</a>. Oznacza to tyle, że pierwsze słowo pisane jest małą literą. Każdy kolejny wyraz zaczyna się wielką literą. Przykładami poprawnych nazw mogą być:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">CodeExecutor</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">snippet</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">returnCode</span><span class="o">;</span>

    <span class="nc">Future</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">executeAsynchronously</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// ...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="stałe">Stałe</h4>

<p>Swego rodzaju wyjątkiem od reguły są stałe – atrybuty przypisane do klasy oznaczone słowem kluczowym <code class="language-plaintext highlighter-rouge">final</code>. Te powinny być pisane wyłącznie wielkimi literami używając <a href="https://en.wikipedia.org/wiki/Snake_case">SCREAMING_SNAKE_CASE</a>. Poszczególne słowa pisane wielkimi literami powinny być oddzielone symbolem <code class="language-plaintext highlighter-rouge">_</code>. Na przykład:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">Temperature</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">BOILING_WATER_CELSIUS</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="pakiety">Pakiety</h4>

<p>Mimo tego, że Java pozwala na używanie domyślnego pakietu (brak deklaracji <code class="language-plaintext highlighter-rouge">package</code>) nie jest to zalecane. Przyjęło się, że nazwa pakietu składa się z małych liter oddzielonych kropkami. Każdy z członów opisuje bardziej szczegółowo swoją zwartość.</p>

<p>Przyjęło się, że pakiety mają postać „odwróconej domeny”:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kn">package</span> <span class="nn">pckg.pl</span><span class="o">;</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kn">package</span> <span class="nn">pl.samouczekprogramisty.kursjava.loops</span><span class="o">;</span>
</code></pre></div></div>

<div class="notice--success text-center">
  
<p><span class="c_almost-header">Pobierz opracowania zadań z rozmów kwalifikacyjnych</span></p>

<p>Przygotowałem rozwiązania kilku zadań algorytmicznych z rozmów kwalifikacyjnych. Rozkładam je na czynniki pierwsze i pokazuję różne sposoby ich rozwiązania. Dołącz do grupy <strong>ponad 6147 Samouków</strong>, którzy jako pierwsi dowiadują się o nowych treściach na blogu, a prześlę je na Twój e-mail.</p>

<script type="text/javascript" src="https://static.mailerlite.com/data/webforms/704312/f8q4i2.js?v4"></script>


</div>

<h3 id="formatowanie-kodu">Formatowanie kodu</h3>

<p>Nie chcę rozpoczynać świętej wojny. Niektórzy programiści bronią formatowania, do którego są przyzwyczajeni, jak niepodległości. Mam do tego bardziej pragmatyczne podejście. Używaj formatowania kodu. Niech IDE robi to za Ciebie, nie zastanawiaj się nad tym dopóki nie zacznie Ci ono przeszkadzać. Nie chcę się tu rozpisywać nad wyższością jednego formatowania nad drugim, to nie ma sensu. Istotne jest to, że brak formatowania kodu można traktować jako złą praktykę.</p>

<p>Moim zdaniem dobrym podejściem jest włączenie automatycznego formatowania kodu w IDE<sup id="fnref:wyjatek" role="doc-noteref"><a href="#fn:wyjatek" class="footnote" rel="footnote">1</a></sup>. W zależności od tego jakiego IDE używasz ta akcja może być wykonywana na przykład przed każdym zapisem pliku czy przed każdym commit’em do repozytorium. Dzięki temu możesz w ogóle zapomnieć o formatowaniu i skupić się na innych rzeczach. IDE zrobi to za Ciebie.</p>

<p>Istotne jest to, żeby wszystkie osoby, które pracują w danym projekcie używały spójnego formatowania kodu. Wachlowanie się commit’ami, które polegają tylko na zmianach w formatowaniu kodu nie jest dobrym pomysłem. Formatowanie kodu to konwencja, która musi być ustalona wspólnie przez cały zespół i konsekwentnie stosowana.</p>

<h3 id="bloki-z-jedną-linią">Bloki z jedną linią</h3>

<p>Język Java pozwala na opuszczanie nawiasów <code class="language-plaintext highlighter-rouge">{ }</code> jeśli blok ma jedną linię. Tego typu konstrukcja może być na przykład użyta po warunku <code class="language-plaintext highlighter-rouge">if</code> czy pętli. Proszę spójrz na przykład poniżej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="k">if</span> <span class="o">(</span><span class="n">activeUser</span><span class="o">.</span><span class="na">isAnAdmin</span><span class="o">())</span>
    <span class="n">allowedActions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Action</span><span class="o">.</span><span class="na">DELETION</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Some log message"</span><span class="o">);</span>
</code></pre></div></div>

<p>Moim zdaniem to bardzo zła praktyka. Może prowadzić do trudnych do znalezienia błędów. Co jeśli tylko użytkownik, który jest administratorem powinien móc dokonywać modyfikacji? Ktoś mógłby wprowadzić drobną zmianę:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="k">if</span> <span class="o">(</span><span class="n">activeUser</span><span class="o">.</span><span class="na">isAnAdmin</span><span class="o">())</span>
    <span class="n">allowedActions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Action</span><span class="o">.</span><span class="na">DELETION</span><span class="o">);</span>
    <span class="n">allowedActions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Action</span><span class="o">.</span><span class="na">MODIFICATION</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Some log message"</span><span class="o">);</span>
</code></pre></div></div>

<p>Problem polega na tym, że taki fragment kodu powoduje, że każdy użytkownik mógłby wykonać modyfikację. Dlatego nawet przy jednoliniowych blokach należy używać nawiasów:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="k">if</span> <span class="o">(</span><span class="n">activeUser</span><span class="o">.</span><span class="na">isAnAdmin</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">allowedActions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Action</span><span class="o">.</span><span class="na">DELETION</span><span class="o">);</span>
<span class="o">}</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Some log message"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="flagi">Flagi</h3>

<p>Na początku mojej przygody z programowaniem pracowałem w Eurobanku. Nie zapomnę do końca życia strony w intranecie opisującej „kwiatki w kodzie”. Kwiatki w kodzie czyli radosną twórczość programistów, która po dłuższym zastanowieniu nie ma sensu. Dość dużą część tej strony zajmowały przykłady kodu z wyrażeniami logicznymi.</p>

<p>Proszę spójrz na kilka złych przykładów wraz z propozycjami jak można je poprawić:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kt">boolean</span> <span class="n">parameter</span> <span class="o">=</span> <span class="c1">// ...</span>
<span class="k">if</span> <span class="o">(</span><span class="n">parameter</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kt">boolean</span> <span class="n">parameter</span> <span class="o">=</span> <span class="c1">// ...</span>
<span class="k">if</span> <span class="o">(</span><span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Podobnie wyglądać może sytuacja z odwróceniem warunku</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="k">if</span> <span class="o">(</span><span class="n">parameter</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="k">if</span> <span class="o">(!</span><span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spotkałem się też z uzależnieniem wartości zwracanej od zmiennej typu <code class="language-plaintext highlighter-rouge">boolean</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="k">if</span> <span class="o">(</span><span class="n">parameter</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="k">return</span> <span class="o">!</span><span class="n">parameter</span><span class="o">;</span>
</code></pre></div></div>

<p>Warunki logiczne często urastają do sporych potworków. Jeśli zauważysz jeden z nich, który ma zawsze taką samą wartość warto uprościć takie wyrażenie. Dzięki temu kod będzie bardziej czytelny. W przykładzie poniżej zakładam, że <code class="language-plaintext highlighter-rouge">variableThatAlwaysIsNull</code> w wyniku różnych operacji zawsze ma wartość <code class="language-plaintext highlighter-rouge">null</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="nc">Object</span> <span class="n">variableThatAlwaysIsNull</span> <span class="o">=</span> <span class="n">methodAlwaysReturningNull</span><span class="o">();</span>
<span class="kt">boolean</span> <span class="n">someMagicFlag</span> <span class="o">=</span> <span class="c1">// ...</span>

<span class="k">if</span> <span class="o">(</span><span class="n">variableThatAlwaysIsNull</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">someMagicFlag</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kt">boolean</span> <span class="n">someMagicFlag</span> <span class="o">=</span> <span class="c1">// ...</span>

<span class="k">if</span> <span class="o">(</span><span class="n">someMagicFlag</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spotkałem się też z kodem tego typu:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="k">if</span> <span class="o">(</span><span class="n">someMagicFlag</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="c1">// code to execute</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Blok <code class="language-plaintext highlighter-rouge">if</code> nie zawierał żadnej linijki. Kod do wykonania znajdował się wewnątrz bloku <code class="language-plaintext highlighter-rouge">else</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="k">if</span> <span class="o">(!</span><span class="n">someMagicFlag</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// code to execute</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Przykłady tego typu można mnożyć. Ważne, żeby zwracać uwagę na wyrażenia logiczne – bardzo często można je uprościć. Jeśli nie znasz <a href="https://pl.wikipedia.org/wiki/Prawa_De_Morgana">praw De Morgana</a>, to najwyższy czas je poznać ;).</p>

<h3 id="duplikacja-kodu">Duplikacja kodu</h3>

<p>Jakiś czas temu pisałem o <a href="/jakosc-kodu-a-oschle-pocalunki-jagny/">regule <em>Don’t Repeat Yourself</em></a>. Można ją zastosować na wielu poziomach. Jednym z nich jest kod źródłowy programu. Duplikacja w kodzie jest zła. Należy ją eliminować (jestem gorącym zwolennikiem usuwania kodu). Poniższy przykład pokazuje duplikację w bardzo wąskim zakresie:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">class</span> <span class="nc">MagicNumber</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isOdd</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">MagicNumber</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isOdd</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">!</span><span class="n">isEven</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="unikanie-zbędnych-zagnieżdżeń">Unikanie zbędnych zagnieżdżeń</h3>

<p>Moim zdaniem unikanie zbędnych zagnieżdżeń jest dobre. Mam tu na myśli pomijanie bloku <code class="language-plaintext highlighter-rouge">else</code>, jeśli kod wewnątrz bloku <code class="language-plaintext highlighter-rouge">if</code> na pewno zakończy działanie metody. Może się tak stać na przykład w sytuacji kiedy wewnątrz bloku <code class="language-plaintext highlighter-rouge">if</code> znajduje się <code class="language-plaintext highlighter-rouge">return</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// „incorrect”</span>
<span class="k">if</span> <span class="o">(</span><span class="n">someFlag</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// return/throw/break/continue</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="c1">// something else</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Moim zdaniem pomięcie <code class="language-plaintext highlighter-rouge">else</code> poprawia czytelność:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="k">if</span> <span class="o">(</span><span class="n">someFlag</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// return/throw/break/continue</span>
<span class="o">}</span>
<span class="c1">// something else</span>
</code></pre></div></div>

<h3 id="metody-statyczne">Metody statyczne</h3>

<p>Metody statyczne są przypisane do klasy. Moim zdaniem warto o tym pamiętać i wywoływać metody statyczne posługując się klasą a nie jej instancją:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="nc">SomeClass</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SomeClass</span><span class="o">();</span>
<span class="n">instance</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">();</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="nc">SomeClass</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="import-"><code class="language-plaintext highlighter-rouge">import *</code></h3>

<p>Kolejny subiektywny punkt. Nie podchodzą mi klasy/metody statyczne importowane przy pomocy <code class="language-plaintext highlighter-rouge">*</code>. Pewnie wynika to trochę z filozofii jaką proponuje Python –  <a href="https://www.python.org/dev/peps/pep-0020/"><em>explicit is better than implicit</em></a>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">;</span>
</code></pre></div></div>

<h2 id="projekt">Projekt</h2>

<p>Problemy i złe praktyki na poziomie poszczególnych plików to czubek góry lodowej. Pod spodem kryją się większe problemy. Problemy związane z podejściem do samego projektu.</p>

<h3 id="brak-systemu-kontroli-wersji">Brak systemu kontroli wersji</h3>

<p>Piszesz kod bez używania systemu kontroli wersji? Robisz błąd. System kontroli wersji jest narzędziem niezbędnym w pracy każdego programisty. Polecam Ci <a href="https://www.samouczekprogramisty.pl/kurs-git/">Git’a</a>, który moim zdaniem jest standardem w branży.</p>

<h3 id="brak-testów-jednostkowych">Brak testów jednostkowych</h3>

<p>Piszesz kod bez testów jednostkowych? Robisz błąd. Moim zdaniem automatyczne testy jednostkowe w wielu przypadkach są niezbędne. Nie będę się tu rozwodził nad tematyką testów. Zachęcam Cię do przeczytania artykułów:</p>

<ul>
  <li><a href="/testy-jednostkowe-z-junit/">Wprowadzenie do tematyki testów jednostkowych na przykładzie JUnit4</a> – jeśli nigdy nie udało Ci się pracować z testami zacznij od tego artykułu,</li>
  <li><a href="/testy-jednostkowe-z-junit5/">Opis biblioteki JUnit5</a> – ten artykuł opisuje bibliotekę JUnit5,</li>
  <li><a href="/test-driven-development-na-przykladzie/">Test Driven Development</a> – jak poznasz już bibliotekę do pisania testów czas zabrać się za TDD.</li>
</ul>

<h3 id="zła-organizacja-kodu">Zła organizacja kodu</h3>

<p>Na ten temat powstają mądre książki. Dobrym początkiem będzie zapoznanie się z zasadami <a href="/solid-czyli-dobre-praktyki-w-programowaniu-obiektowym/">SOLID</a> i ich świadome stosowanie w pracy z kodem.</p>

<h3 id="brak-standardowego-mechanizmu-budowania">Brak standardowego mechanizmu budowania</h3>

<p>W idealnym świecie zbudowanie projektu powinno składać się z dwóch etapów:</p>

<ol>
  <li>Pobrania źródeł projektu, na przykład z <a href="https://www.samouczekprogramisty.pl/kurs-git/">repozytorium Git’a</a>,</li>
  <li>Uruchomienia narzędzia do budowania, które na podstawie plików konfiguracyjnych zbuduje projekt.</li>
</ol>

<p>Oba etapy powinny działać niezależnie od środowiska programisty. Drugi punkt rozwiązywany jest przez narzędzia takie jak Maven, Make, Rake, Gradle, Ant, Grunt itp. Jeśli do tej pory nie udało Ci się pracować z narzędziami tego typu zachęcam Cię do zajrzenia do artykułów opisujących Gradle:</p>

<ul>
  <li><a href="/wstep-do-gradle/">Wstęp do Gradle</a>,</li>
  <li><a href="/pierwszy-projekt-z-gradle/">Pierwszy projekt z Gradle</a>.</li>
</ul>

<h3 id="niestandardowa-struktura-projektu">Niestandardowa struktura projektu</h3>

<p>Organizacja plików w projekcie jest ważna. Podobnie jak z nazewnictwem czy formatowaniem kodu istnieje pewna konwencja, która pozwala na szybkie zorientowanie się w strukturze projektu. Niejako powiązane z tym tematem jest używanie narzędzie wspomagającego budowanie projektu, które „narzucają” używanie pewnych konwencji. Standardową strukturę projektu opisałem we <a href="/wstep-do-gradle/">wstępie do Gradle</a>.</p>

<h2 id="martwy-kod">Martwy kod</h2>

<p>Historia w repozytorium jest od tego, żeby pamiętać co działo się w projekcie. Fragmenty kodu w komentarzu, które „może kiedyś się przydadzą” moim zdaniem powinny od razu wylecieć w kosmos. Nie są potrzebne, jedynie zaciemniają obraz.</p>

<p>Kilka poniższych podpunktów opisuje różne przypadki, które można podsumować w jednym zdaniu: nie jest sztuką napisać dużo kodu, sztuką jest napisać jak najmniej czytelnego i zrozumiałego kodu, który robi to samo. Jeśli masz możliwość usunięcia czegoś, co nie jest używane zrób to! :) Mniej kodu oznacza mniej potencjalnych błędów. Mniej kodu, to niższy koszt jego utrzymania<sup id="fnref:czytelny" role="doc-noteref"><a href="#fn:czytelny" class="footnote" rel="footnote">2</a></sup>.</p>

<p>Często jest tak, że fragmenty martwego kodu narastają z czasem – wynikają z kilku zmian wprowadzonych na przestrzeni życia projektu. Odwaga do usuwania danej linijki kodu jest odwrotnie proporcjonalna do jej wieku ;).</p>

<h3 id="kod-który-nigdy-nie-będzie-wykonany">Kod, który nigdy nie będzie wykonany</h3>

<p>Ten punkt jest powiązany z flagami, które poruszałem wcześniej. Po uproszczeniu warunków logicznych możesz czasami zauważyć, że dotarcie do pewnych fragmentów kodu jest po prostu niemożliwe. W podstawowych przypadkach IDE potrafi pokazać takie fragmenty kodu jako martwe. Dobrym pomysłem jest usunięcie śmieci tego typu.</p>

<h3 id="niepotrzebne-parametry-i-atrybuty">Niepotrzebne parametry i atrybuty</h3>

<p>Widzisz metodę, która ma nieużywany parametr? Zastanów się czy możesz go usunąć. Jeśli tak, to wiesz co masz zrobić ;). Podobną regułę trzeba stosować przy atrybutach klas.</p>

<p>Zwróć szczególną uwagę na zmianę sygnatury metody. Tego typu zmiany mogą prowadzić do „dziwnych zachowań”. Mam tu na myśli sytuację, w której metoda nadpisywała inną w klasie bazowej. Tu drobne ćwiczenie dla Ciebie – czym może skończyć się takie usunięcie parametru?</p>

<p>Usuwanie atrybutów, to też coś co wymaga pewnej analizy. W zależności od <a href="/modyfikatory-dostepu-w-jezyku-java/">modyfikatora dostępu</a> może, ale nie musi, łamać kompatybilność wsteczną.</p>

<h3 id="zbędne-metody">Zbędne metody</h3>

<p>Nie zrozum mnie źle. Uważam, że nieduże metody są dobre. Jednak także i tutaj trzeba zachować zdrowy rozsądek. Proszę spójrz na przykład poniżej, używa on klasy <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Math.html"><code class="language-plaintext highlighter-rouge">Math</code></a>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kt">double</span> <span class="nf">someVeryImportantCalculation</span><span class="o">(</span><span class="kt">double</span> <span class="n">argument0</span><span class="o">,</span> <span class="kt">double</span> <span class="n">argument1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">argument0</span> <span class="o">+</span> <span class="n">sqrt</span><span class="o">(</span><span class="n">argument1</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">double</span> <span class="n">argument</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">argument</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Moim zdaniem w tym przypadku wprowadzenie metody <code class="language-plaintext highlighter-rouge">sqrt</code> nic nie wnosi. Równie dobrze w miejscu jej wywołania można byłoby użyć <code class="language-plaintext highlighter-rouge">Math.sqrt</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kt">double</span> <span class="nf">someVeryImportantCalculation</span><span class="o">(</span><span class="kt">double</span> <span class="n">argument0</span><span class="o">,</span> <span class="kt">double</span> <span class="n">argument1</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">argument0</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">argument1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="nieużywana-wartość-zwracana">Nieużywana wartość zwracana</h3>

<p>Widziałem przypadki, w których metoda wywoływana dla efektów ubocznych<sup id="fnref:uboczne" role="doc-noteref"><a href="#fn:uboczne" class="footnote" rel="footnote">3</a></sup> zwracała wartość. Ta zwrócona wartość nie była w ogóle wykorzystywana. Moim zdaniem warto uprościć taką metodę usuwając wartość zwracaną:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">login</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">callingExternalServiceToLogin</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="nc">LoginException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// handling exception</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="s">"logged in"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">login</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">callingExternalServiceToLogin</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="nc">LoginException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// handling exception</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="wydajność">Wydajność</h2>

<h3 id="przedwczesna-optymalizacja">Przedwczesna optymalizacja</h3>

<p>Tutaj nie mam przykładu z zadań na blogu, jednak nadal warto wspomnieć o tym błędzie. W świecie programistów panuje przekonanie, że „przedwczesna optymalizacja jest źródłem całego zła”<sup id="fnref:knuth" role="doc-noteref"><a href="#fn:knuth" class="footnote" rel="footnote">4</a></sup>. Podpisuję się pod tym obiema rękami. Kompilator Java jest na tyle zaawansowany, że potrafi zrobić cuda, tak żeby nasz kod był bardziej wydajny.</p>

<p>Zacznij od pisania zrozumiałego i czytelnego kodu. Dopiero gdy zauważysz, że pojawiają się problemy wydajnościowe wprowadzaj optymalizacje. Istotne jest żeby wprowadzać takie zmiany na podstawie twardych dowodów – przeprowadzonych testów wydajnościowych.</p>

<p>Jest to ważne, bo może zdarzyć się tak, że intuicja nawet doświadczonych programistów nie sprawdza się w praktyce. Przez co wprowadzona optymalizacja ma znikomy (zerowy?) wpływ na wydajność, a sprawia, że kod jest zupełnie niezrozumiały.</p>

<h3 id="tworzenie-nadmiarowych-obiektów">Tworzenie nadmiarowych obiektów</h3>

<p>Im mniej obiektów, tym mniej zajętej pamięci. Jeśli możesz użyć obiektu wielokrotnie zrób to, nie ma sensu tworzyć nowej instancji dla każdego wywołania. Tutaj sprawa trochę się komplikuje. Wszystko przez <a href="/watki-w-jezyku-java/">wątki</a> i współdzielenie instancji pomiędzy nimi. Jeśli instancja obiektu będzie współdzielona pomiędzy wątkami należy upewnić się, że kod jej klasy napisany jest w wielowątkowo bezpieczny sposób.</p>

<p>Uproszczony przykład tworzenia nadmiarowej instancji:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">class</span> <span class="nc">UserInput</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">prompt</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prompt</span><span class="o">);</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">UserInput</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">prompt</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prompt</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="znajomość-jdk">Znajomość JDK</h2>

<p>Znajomość bibliotek i API przychodzi z czasem. Nie ma sensu uczyć się tego na pamięć. Poniżej zebrałem najczęściej spotykane błędy powiązane z klasami dostarczonym wraz z JDK.</p>

<h3 id="systemin-systemout-systemerr"><code class="language-plaintext highlighter-rouge">System.in</code>, <code class="language-plaintext highlighter-rouge">System.out</code>, <code class="language-plaintext highlighter-rouge">System.err</code></h3>

<p>Wspomniany wyżej <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Scanner.html"><code class="language-plaintext highlighter-rouge">Scanner</code></a> jest bardzo często używany do pobierania danych od użytkownika. Jednym ze sposobów utworzenia instancji tej klasy jest przekazanie jej instancji <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/io/InputStream.html"><code class="language-plaintext highlighter-rouge">InputStream</code></a>. Możesz na przykład użyć <code class="language-plaintext highlighter-rouge">System.in</code>. Proszę spójrz na przykład poniżej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span><span class="o">(</span><span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">try</span><span class="o">(</span><span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Ten kod jest zły z dwóch powodów. Pierwszy to wyżej wspomniane tworzenie dwóch instancji klasy <code class="language-plaintext highlighter-rouge">Scanner</code>, w tym przypadku spokojne wystarczy jeden obiekt i jego użycie wiele razy. Drugim, poważniejszym błędem jest zamykanie <code class="language-plaintext highlighter-rouge">System.in</code>. Dzieje się tak, ponieważ po wyjściu z bloku <a href="/konstrukcja-try-with-resources-w-jezyku-java/"><em>try with resources</em></a> na instancji <code class="language-plaintext highlighter-rouge">s</code> wywoływana jest metoda <code class="language-plaintext highlighter-rouge">close</code>. Powoduje to zamknięcie <code class="language-plaintext highlighter-rouge">System.in</code>. W ramach ćwiczenia uruchom powyższy kod i zobacz jaki będzie jego efekt.</p>

<p>Nie jest to dobra praktyka. To wirtualna maszyna Javy otwiera ten strumień i to ona jest odpowiedzialna za jego zamknięcie. Sprawa wygląda podobnie w przypadku strumieni <code class="language-plaintext highlighter-rouge">System.out</code> czy <code class="language-plaintext highlighter-rouge">System.err</code>.</p>

<p>Jeśli chcesz przeczytać więcej o stdout, stderr i stdin w trochę innym kontekście zapraszam do przeczytania artykułu opisującego <a href="/poczatki-pracy-z-wierszem-polecen/#standardowe-wej%C5%9Bcie-i-wyj%C5%9Bcie">początki pracy z linią poleceń</a>.</p>

<p>Poniżej możesz zobaczyć poprawiony fragment kodu:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="znak-końca-linii">Znak końca linii</h3>

<p>Java pozwala tworzyć programy, które mogą być uruchamiane na różnych systemach operacyjnych. Żeby programy te działały w pełni poprawnie trzeba brać pod uwagę różnice, które występują pomiędzy nimi.</p>

<p>Sztandarowym przykładem jest tutaj znak końca linii. W zależności od systemu operacyjnego inny ciąg znaków odpowiedzialny jest za łamanie linii. Poniższy przykład pokazuje błąd i jego rozwiązanie:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"This is a list:\n- item."</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"This is a list:"</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">()</span> <span class="o">+</span> <span class="s">"- item."</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="kompilacja-wyrażenia-regularnego">Kompilacja wyrażenia regularnego</h3>

<p><a href="/wyrazenia-regularne-w-jezyku-java/">Wyrażenia regularne</a> i <a href="/wyrazenia-regularne-czesc-2/">bardziej zaawansowane wyrażenia regularne</a> były już poruszane na blogu.</p>

<p>Tutaj chciałbym zwrócić na jeden drobny szczegół. Proszę rzuć okiem na kod poniżej:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// incorrect</span>
<span class="kd">class</span> <span class="nc">Postcode</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">String</span> <span class="n">postcode</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Pattern</span> <span class="n">postcodePattern</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"^\\d{2}-\\d{3}$"</span><span class="o">);</span>
        <span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">postcodePattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">postcode</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Kompilacja wyrażenia regularnego jest procesem długotrwałym. Jeśli jest taka możliwość to warto wykonywać tę czynność tylko raz:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// correct</span>
<span class="kd">class</span> <span class="nc">Postcode</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Pattern</span> <span class="no">PATTERN</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"^\\d{2}-\\d{3}$"</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">String</span> <span class="n">postcode</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="no">PATTERN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">postcode</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="znajomość-wbudowanych-wyjątków">Znajomość wbudowanych wyjątków</h3>

<p>Java dostarcza cały szereg gotowych klas <a href="/wyjatki-w-jezyku-java/">wyjątków</a>. Czasami nie ma sensu tworzenie własnego dedykowanego wyjątku – warto użyć jednego z istniejących. Dobrym przykładem jest użycie wyjątku <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/IllegalArgumentException.html"><code class="language-plaintext highlighter-rouge">IllegalArgumentException</code></a> jeśli chcesz zasygnalizować niepoprawny argument.</p>

<p>Dodatkowo ważne jest żeby rzucać wyjątki, które pasują do danej sytuacji. Na przykład rzucenie wyjątku <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/IllegalStateException.html"><code class="language-plaintext highlighter-rouge">IllegalStateException</code></a> w sytuacji gdy podano błędny argument nie jest najlepszym rozwiązaniem.</p>

<h3 id="javautildate-i-spółka"><code class="language-plaintext highlighter-rouge">java.util.Date</code> i spółka</h3>

<p>Gdzie tylko się da omijaj stare API do zarządzania datami szerokim łukiem. Na przykład instancje <code class="language-plaintext highlighter-rouge">java.util.Date</code> nie są wielowątkowo bezpieczne, API jest zagmatwane, obsługa stref czasowych wymaga więcej pracy.</p>

<p>Skup się na poznaniu <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/time/LocalDateTime.html"><code class="language-plaintext highlighter-rouge">LocalDateTime</code></a> i jej podobnych.</p>

<h3 id="konstrukcje-języka">Konstrukcje języka</h3>

<p>Konstrukcje języka nie są związane z API a składnią jaką język oferuje. Java ewoluuje jak każdy język. W kolejnych wersjach wprowadza nowe elementy. Warto z nich korzystać. Za przykład mogą tu posłużyć <a href="/wyrazenia-lambda-w-jezyku-java/">wyrażenia lambda</a>, wyrażenia <code class="language-plaintext highlighter-rouge">switch</code>, zmienne lokalne przy użyciu <code class="language-plaintext highlighter-rouge">var</code>, konstrukcja <a href="/konstrukcja-try-with-resources-w-jezyku-java/"><em>try with resources</em></a> i tak dalej ;).</p>

<h2 id="dodatkowe-materiały-do-nauki">Dodatkowe materiały do nauki</h2>

<p>Do tej pory nie nazwałem tego wprost. Wprowadzanie zmian, które nie modyfikują zachowania programu to tak zwana refaktoryzacja. Zacznij od przeczytania czym jest refaktoryzacja w <a href="https://pl.wikipedia.org/wiki/Refaktoryzacja">artykule na Wikipedii</a>. Później możesz sięgnąć po książkę <a href="https://martinfowler.com/articles/refactoring-2nd-ed.html"><em>Refactoring</em> autorstwa Martin’a Fowler’a</a>. Pierwsza edycja zawiera przykłady w Javie, druga w JavaScript.</p>

<p>Możesz też rzucić okiem na dość stary dokument opisujący <a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf">konwencja nazewnicza w języku Java</a>. Opisuje on też zalecane formatowanie kodu.</p>

<p>W treści artykułu wspomniałem o <a href="https://pl.wikipedia.org/wiki/Prawa_De_Morgana">prawach De Morgana</a>. To podstawa, jak już je poznasz warto poczytać więcej o <a href="https://pl.wikipedia.org/wiki/Algebra_Boole%E2%80%99a">algebrze Boole’a</a> i wzorach pozwalających na upraszczanie wyrażeń logicznych.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Moją motywacją do napisania tego artykułu było zebranie w jednym miejscu błędów i propozycji ich rozwiązania. Temat bynajmniej nie jest wyczerpany. Większość z tych punktów można rozbudować podając więcej przykładów.</p>

<p>Jednak nawet w obecnej formie artykuł pokazał Ci większość klas „podstawowych błędów”. Po jego lekturze wiesz jak można je poprawić. Stosując się do zaleceń, które tu zebrałem Twój kod będzie na pewno wyższej jakości. Z góry gratuluję ;).</p>

<p>Jeśli znasz kogoś dla kogo ten artykuł byłby pomocny proszę podziel się linkiem. Dzięki temu pomożesz mi dotrzeć do nowych Czytelników, za co od razu bardzo dziękuję!</p>

<p>Jeśli nie chcesz pomiąć kolejnych artykułów polub <a href="https://www.facebook.com/SamouczekProgramisty/">Samouczka na Facebooku</a> i dopisz się do samouczkowego newslettera. To tyle na dzisiaj, trzymaj się i do następnego razu!</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:wyjatek" role="doc-endnote">
      <p>Potrafię sobie wyobrazić wyjątki od tej reguły. Załóżmy, że pracujesz nad projektem, który nie jest pierwszej młodości. Znajdują się w nim pliki mające kilka lat i kilka tysięcy linii. Musisz poprawić błąd, który sprowadza się do zmiany kilku linijek. Łączenie tej zmiany z formatowaniem całego pliku przeważnie nie jest dobrym pomysłem. <a href="#fnref:wyjatek" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:czytelny" role="doc-endnote">
      <p>Jak napisałem wcześniej – zakładam, że kod jest napisany w sposób czytelny i zrozumiały. Nie chodzi mi tu o sytuację, w której używasz jednoliterowych nazw metod, żeby „było mniej kodu”. <a href="#fnref:czytelny" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:uboczne" role="doc-endnote">
      <p>Abstrahując od tego czy metody posiadające efekty uboczne są w porządku czy nie. <a href="#fnref:uboczne" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:knuth" role="doc-endnote">
      <p>Cytat pochodzi z książki autorstwa <a href="https://en.wikiquote.org/wiki/Donald_Knuth#Computer_Programming_as_an_Art_(1974)">Donalda Knuth’a</a>. <a href="#fnref:knuth" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Marcin Pietraszek</name></author><summary type="html"><![CDATA[W artykule przeczytasz o tym czym jest konwencja nazewnicza. Dowiesz się jak jej stosować. Na przykładach pokażę Ci najczęściej popełniane błędy wraz z propozycjami ich poprawienia.]]></summary></entry></feed>